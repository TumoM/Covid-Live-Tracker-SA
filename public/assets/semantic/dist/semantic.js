 /*
***REMOVED*** # Fomantic UI - 2.8.4
***REMOVED*** https://github.com/fomantic/Fomantic-UI
***REMOVED*** http://fomantic-ui.com/
***REMOVED***
***REMOVED*** Copyright 2014 Contributors
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/
/*!
***REMOVED*** # Fomantic-UI - Site
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

$.isFunction = $.isFunction || function(obj) {
    return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

$.site = $.fn.site = function(parameters) {
  var
    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),

    settings        = ( $.isPlainObject(parameters) )
      ? $.extend(true, {***REMOVED***, $.site.settings, parameters)
      : $.extend({***REMOVED***, $.site.settings),

    namespace       = settings.namespace,
    error           = settings.error,

    moduleNamespace = 'module-' + namespace,

    $document       = $(document),
    $module         = $document,
    element         = this,
    instance        = $module.data(moduleNamespace),

    module,
    returnedValue
  ;
  module = {

    initialize: function() {
      module.instantiate();
  ***REMOVED***

    instantiate: function() {
      module.verbose('Storing instance of site', module);
      instance = module;
      $module
        .data(moduleNamespace, module)
      ;
  ***REMOVED***

    normalize: function() {
      module.fix.console();
      module.fix.requestAnimationFrame();
  ***REMOVED***

    fix: {
      console: function() {
        module.debug('Normalizing window.console');
        if (console === undefined || console.log === undefined) {
          module.verbose('Console not available, normalizing events');
          module.disable.console();
      ***REMOVED***
        if (typeof console.group == 'undefined' || typeof console.groupEnd == 'undefined' || typeof console.groupCollapsed == 'undefined') {
          module.verbose('Console group not available, normalizing events');
          window.console.group = function() {***REMOVED***;
          window.console.groupEnd = function() {***REMOVED***;
          window.console.groupCollapsed = function() {***REMOVED***;
      ***REMOVED***
        if (typeof console.markTimeline == 'undefined') {
          module.verbose('Mark timeline not available, normalizing events');
          window.console.markTimeline = function() {***REMOVED***;
      ***REMOVED***
    ***REMOVED***
      consoleClear: function() {
        module.debug('Disabling programmatic console clearing');
        window.console.clear = function() {***REMOVED***;
    ***REMOVED***
      requestAnimationFrame: function() {
        module.debug('Normalizing requestAnimationFrame');
        if(window.requestAnimationFrame === undefined) {
          module.debug('RequestAnimationFrame not available, normalizing event');
          window.requestAnimationFrame = window.requestAnimationFrame
            || window.mozRequestAnimationFrame
            || window.webkitRequestAnimationFrame
            || window.msRequestAnimationFrame
            || function(callback) { setTimeout(callback, 0); ***REMOVED***
          ;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

    moduleExists: function(name) {
      return ($.fn[name] !== undefined && $.fn[name].settings !== undefined);
  ***REMOVED***

    enabled: {
      modules: function(modules) {
        var
          enabledModules = []
        ;
        modules = modules || settings.modules;
        $.each(modules, function(index, name) {
          if(module.moduleExists(name)) {
            enabledModules.push(name);
        ***REMOVED***
      ***REMOVED***);
        return enabledModules;
    ***REMOVED***
  ***REMOVED***

    disabled: {
      modules: function(modules) {
        var
          disabledModules = []
        ;
        modules = modules || settings.modules;
        $.each(modules, function(index, name) {
          if(!module.moduleExists(name)) {
            disabledModules.push(name);
        ***REMOVED***
      ***REMOVED***);
        return disabledModules;
    ***REMOVED***
  ***REMOVED***

    change: {
      setting: function(setting, value, modules, modifyExisting) {
        modules = (typeof modules === 'string')
          ? (modules === 'all')
            ? settings.modules
            : [modules]
          : modules || settings.modules
        ;
        modifyExisting = (modifyExisting !== undefined)
          ? modifyExisting
          : true
        ;
        $.each(modules, function(index, name) {
          var
            namespace = (module.moduleExists(name))
              ? $.fn[name].settings.namespace || false
              : true,
            $existingModules
          ;
          if(module.moduleExists(name)) {
            module.verbose('Changing default setting', setting, value, name);
            $.fn[name].settings[setting] = value;
            if(modifyExisting && namespace) {
              $existingModules = $(':data(module-' + namespace + ')');
              if($existingModules.length > 0) {
                module.verbose('Modifying existing settings', $existingModules);
                $existingModules[name]('setting', setting, value);
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***
      settings: function(newSettings, modules, modifyExisting) {
        modules = (typeof modules === 'string')
          ? [modules]
          : modules || settings.modules
        ;
        modifyExisting = (modifyExisting !== undefined)
          ? modifyExisting
          : true
        ;
        $.each(modules, function(index, name) {
          var
            $existingModules
          ;
          if(module.moduleExists(name)) {
            module.verbose('Changing default setting', newSettings, name);
            $.extend(true, $.fn[name].settings, newSettings);
            if(modifyExisting && namespace) {
              $existingModules = $(':data(module-' + namespace + ')');
              if($existingModules.length > 0) {
                module.verbose('Modifying existing settings', $existingModules);
                $existingModules[name]('setting', newSettings);
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***
  ***REMOVED***

    enable: {
      console: function() {
        module.console(true);
    ***REMOVED***
      debug: function(modules, modifyExisting) {
        modules = modules || settings.modules;
        module.debug('Enabling debug for modules', modules);
        module.change.setting('debug', true, modules, modifyExisting);
    ***REMOVED***
      verbose: function(modules, modifyExisting) {
        modules = modules || settings.modules;
        module.debug('Enabling verbose debug for modules', modules);
        module.change.setting('verbose', true, modules, modifyExisting);
    ***REMOVED***
  ***REMOVED***
    disable: {
      console: function() {
        module.console(false);
    ***REMOVED***
      debug: function(modules, modifyExisting) {
        modules = modules || settings.modules;
        module.debug('Disabling debug for modules', modules);
        module.change.setting('debug', false, modules, modifyExisting);
    ***REMOVED***
      verbose: function(modules, modifyExisting) {
        modules = modules || settings.modules;
        module.debug('Disabling verbose debug for modules', modules);
        module.change.setting('verbose', false, modules, modifyExisting);
    ***REMOVED***
  ***REMOVED***

    console: function(enable) {
      if(enable) {
        if(instance.cache.console === undefined) {
          module.error(error.console);
          return;
      ***REMOVED***
        module.debug('Restoring console function');
        window.console = instance.cache.console;
    ***REMOVED***
      else {
        module.debug('Disabling console function');
        instance.cache.console = window.console;
        window.console = {
          clear          : function(){***REMOVED***,
          error          : function(){***REMOVED***,
          group          : function(){***REMOVED***,
          groupCollapsed : function(){***REMOVED***,
          groupEnd       : function(){***REMOVED***,
          info           : function(){***REMOVED***,
          log            : function(){***REMOVED***,
          markTimeline   : function(){***REMOVED***,
          warn           : function(){***REMOVED***
      ***REMOVED***;
    ***REMOVED***
  ***REMOVED***

    destroy: function() {
      module.verbose('Destroying previous site for', $module);
      $module
        .removeData(moduleNamespace)
      ;
  ***REMOVED***

    cache: {***REMOVED***,

    setting: function(name, value) {
      if( $.isPlainObject(name) ) {
        $.extend(true, settings, name);
    ***REMOVED***
      else if(value !== undefined) {
        settings[name] = value;
    ***REMOVED***
      else {
        return settings[name];
    ***REMOVED***
  ***REMOVED***
    internal: function(name, value) {
      if( $.isPlainObject(name) ) {
        $.extend(true, module, name);
    ***REMOVED***
      else if(value !== undefined) {
        module[name] = value;
    ***REMOVED***
      else {
        return module[name];
    ***REMOVED***
  ***REMOVED***
    debug: function() {
      if(settings.debug) {
        if(settings.performance) {
          module.performance.log(arguments);
      ***REMOVED***
        else {
          module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
          module.debug.apply(console, arguments);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
    verbose: function() {
      if(settings.verbose && settings.debug) {
        if(settings.performance) {
          module.performance.log(arguments);
      ***REMOVED***
        else {
          module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
          module.verbose.apply(console, arguments);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
    error: function() {
      module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
      module.error.apply(console, arguments);
  ***REMOVED***
    performance: {
      log: function(message) {
        var
          currentTime,
          executionTime,
          previousTime
        ;
        if(settings.performance) {
          currentTime   = new Date().getTime();
          previousTime  = time || currentTime;
          executionTime = currentTime - previousTime;
          time          = currentTime;
          performance.push({
            'Element'        : element,
            'Name'           : message[0],
            'Arguments'      : [].slice.call(message, 1) || '',
            'Execution Time' : executionTime
        ***REMOVED***);
      ***REMOVED***
        clearTimeout(module.performance.timer);
        module.performance.timer = setTimeout(module.performance.display, 500);
    ***REMOVED***
      display: function() {
        var
          title = settings.name + ':',
          totalTime = 0
        ;
        time = false;
        clearTimeout(module.performance.timer);
        $.each(performance, function(index, data) {
          totalTime += data['Execution Time'];
      ***REMOVED***);
        title += ' ' + totalTime + 'ms';
        if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
          console.groupCollapsed(title);
          if(console.table) {
            console.table(performance);
        ***REMOVED***
          else {
            $.each(performance, function(index, data) {
              console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
          ***REMOVED***);
        ***REMOVED***
          console.groupEnd();
      ***REMOVED***
        performance = [];
    ***REMOVED***
  ***REMOVED***
    invoke: function(query, passedArguments, context) {
      var
        object = instance,
        maxDepth,
        found,
        response
      ;
      passedArguments = passedArguments || queryArguments;
      context         = element         || context;
      if(typeof query == 'string' && object !== undefined) {
        query    = query.split(/[\. ]/);
        maxDepth = query.length - 1;
        $.each(query, function(depth, value) {
          var camelCaseValue = (depth != maxDepth)
            ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
            : query
          ;
          if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
            object = object[camelCaseValue];
        ***REMOVED***
          else if( object[camelCaseValue] !== undefined ) {
            found = object[camelCaseValue];
            return false;
        ***REMOVED***
          else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
            object = object[value];
        ***REMOVED***
          else if( object[value] !== undefined ) {
            found = object[value];
            return false;
        ***REMOVED***
          else {
            module.error(error.method, query);
            return false;
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***
      if ( $.isFunction( found ) ) {
        response = found.apply(context, passedArguments);
    ***REMOVED***
      else if(found !== undefined) {
        response = found;
    ***REMOVED***
      if(Array.isArray(returnedValue)) {
        returnedValue.push(response);
    ***REMOVED***
      else if(returnedValue !== undefined) {
        returnedValue = [returnedValue, response];
    ***REMOVED***
      else if(response !== undefined) {
        returnedValue = response;
    ***REMOVED***
      return found;
  ***REMOVED***
***REMOVED***;

  if(methodInvoked) {
    if(instance === undefined) {
      module.initialize();
  ***REMOVED***
    module.invoke(query);
***REMOVED***
  else {
    if(instance !== undefined) {
      module.destroy();
  ***REMOVED***
    module.initialize();
***REMOVED***
  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
***REMOVED***;

$.site.settings = {

  name        : 'Site',
  namespace   : 'site',

  error : {
    console : 'Console cannot be restored, most likely it was overwritten outside of module',
    method : 'The method you called is not defined.'
***REMOVED***

  debug       : false,
  verbose     : false,
  performance : true,

  modules: [
    'accordion',
    'api',
    'calendar',
    'checkbox',
    'dimmer',
    'dropdown',
    'embed',
    'form',
    'modal',
    'nag',
    'popup',
    'slider',
    'rating',
    'shape',
    'sidebar',
    'state',
    'sticky',
    'tab',
    'toast',
    'transition',
    'visibility',
    'visit'
  ],

  siteNamespace   : 'site',
  namespaceStub   : {
    cache     : {***REMOVED***,
    config    : {***REMOVED***,
    sections  : {***REMOVED***,
    section   : {***REMOVED***,
    utilities : {***REMOVED***
***REMOVED***

***REMOVED***;

// allows for selection of elements with data attributes
$.extend($.expr[ ":" ], {
  data: ($.expr.createPseudo)
    ? $.expr.createPseudo(function(dataName) {
        return function(elem) {
          return !!$.data(elem, dataName);
      ***REMOVED***;
    ***REMOVED***)
    : function(elem, i, match) {
      // support: jQuery < 1.8
      return !!$.data(elem, match[ 3 ]);
  ***REMOVED***
***REMOVED***);


***REMOVED***)( jQuery, window, document );

/*!
***REMOVED*** # Fomantic-UI - Form Validation
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

***REMOVED***;

$.isFunction = $.isFunction || function(obj) {
  return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.form = function(parameters) {
  var
    $allModules      = $(this),
    moduleSelector   = $allModules.selector || '',

    time             = new Date().getTime(),
    performance      = [],

    query            = arguments[0],
    legacyParameters = arguments[1],
    methodInvoked    = (typeof query == 'string'),
    queryArguments   = [].slice.call(arguments, 1),
    returnedValue
  ;
  $allModules
    .each(function() {
      var
        $module     = $(this),
        element     = this,

        formErrors  = [],
        keyHeldDown = false,

        // set at run-time
        $field,
        $group,
        $message,
        $prompt,
        $submit,
        $clear,
        $reset,

        settings,
        validation,

        metadata,
        selector,
        className,
        regExp,
        error,

        namespace,
        moduleNamespace,
        eventNamespace,

        submitting = false,
        dirty = false,
        history = ['clean', 'clean'],

        instance,
        module
      ;

      module      = {

        initialize: function() {

          // settings grabbed at run time
          module.get.settings();
          if(methodInvoked) {
            if(instance === undefined) {
              module.instantiate();
          ***REMOVED***
            module.invoke(query);
        ***REMOVED***
          else {
            if(instance !== undefined) {
              instance.invoke('destroy');
          ***REMOVED***
            module.verbose('Initializing form validation', $module, settings);
            module.bindEvents();
            module.set.defaults();
            if (settings.autoCheckRequired) {
              module.set.autoCheck();
          ***REMOVED***
            module.instantiate();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
 ***REMOVED*****REMOVED***

        destroy: function() {
          module.verbose('Destroying previous module', instance);
          module.removeEvents();
          $module
            .removeData(moduleNamespace)
          ;
 ***REMOVED*****REMOVED***

        refresh: function() {
          module.verbose('Refreshing selector cache');
          $field      = $module.find(selector.field);
          $group      = $module.find(selector.group);
          $message    = $module.find(selector.message);
          $prompt     = $module.find(selector.prompt);

          $submit     = $module.find(selector.submit);
          $clear      = $module.find(selector.clear);
          $reset      = $module.find(selector.reset);
 ***REMOVED*****REMOVED***

        submit: function() {
          module.verbose('Submitting form', $module);
          submitting = true;
          $module.submit();
 ***REMOVED*****REMOVED***

        attachEvents: function(selector, action) {
          action = action || 'submit';
          $(selector).on('click' + eventNamespace, function(event) {
            module[action]();
            event.preventDefault();
        ***REMOVED***);
 ***REMOVED*****REMOVED***

        bindEvents: function() {
          module.verbose('Attaching form events');
          $module
            .on('submit' + eventNamespace, module.validate.form)
            .on('blur'   + eventNamespace, selector.field, module.event.field.blur)
            .on('click'  + eventNamespace, selector.submit, module.submit)
            .on('click'  + eventNamespace, selector.reset, module.reset)
            .on('click'  + eventNamespace, selector.clear, module.clear)
          ;
          if(settings.keyboardShortcuts) {
            $module.on('keydown' + eventNamespace, selector.field, module.event.field.keydown);
        ***REMOVED***
          $field.each(function(index, el) {
            var
              $input     = $(el),
              type       = $input.prop('type'),
              inputEvent = module.get.changeEvent(type, $input)
            ;
            $input.on(inputEvent + eventNamespace, module.event.field.change);
        ***REMOVED***);

          // Dirty events
          if (settings.preventLeaving) {
            $(window).on('beforeunload' + eventNamespace, module.event.beforeUnload);
        ***REMOVED***

          $field.on('change click keyup keydown blur', function(e) {
            $(this).triggerHandler(e.type + ".dirty");
        ***REMOVED***);

          $field.on('change.dirty click.dirty keyup.dirty keydown.dirty blur.dirty', module.determine.isDirty);

          $module.on('dirty' + eventNamespace, function(e) {
            settings.onDirty.call();
        ***REMOVED***);

          $module.on('clean' + eventNamespace, function(e) {
            settings.onClean.call();
        ***REMOVED***)
 ***REMOVED*****REMOVED***

        clear: function() {
          $field.each(function (index, el) {
            var
              $field       = $(el),
              $element     = $field.parent(),
              $fieldGroup  = $field.closest($group),
              $prompt      = $fieldGroup.find(selector.prompt),
              $calendar    = $field.closest(selector.uiCalendar),
              defaultValue = $field.data(metadata.defaultValue) || '',
              isCheckbox   = $element.is(selector.uiCheckbox),
              isDropdown   = $element.is(selector.uiDropdown)  && module.can.useElement('dropdown'),
              isCalendar   = ($calendar.length > 0  && module.can.useElement('calendar')),
              isErrored    = $fieldGroup.hasClass(className.error)
            ;
            if(isErrored) {
              module.verbose('Resetting error on field', $fieldGroup);
              $fieldGroup.removeClass(className.error);
              $prompt.remove();
          ***REMOVED***
            if(isDropdown) {
              module.verbose('Resetting dropdown value', $element, defaultValue);
              $element.dropdown('clear', true);
          ***REMOVED***
            else if(isCheckbox) {
              $field.prop('checked', false);
          ***REMOVED***
            else if (isCalendar) {
              $calendar.calendar('clear');
          ***REMOVED***
            else {
              module.verbose('Resetting field value', $field, defaultValue);
              $field.val('');
          ***REMOVED***
        ***REMOVED***);
 ***REMOVED*****REMOVED***

        reset: function() {
          $field.each(function (index, el) {
            var
              $field       = $(el),
              $element     = $field.parent(),
              $fieldGroup  = $field.closest($group),
              $calendar    = $field.closest(selector.uiCalendar),
              $prompt      = $fieldGroup.find(selector.prompt),
              defaultValue = $field.data(metadata.defaultValue),
              isCheckbox   = $element.is(selector.uiCheckbox),
              isDropdown   = $element.is(selector.uiDropdown)  && module.can.useElement('dropdown'),
              isCalendar   = ($calendar.length > 0  && module.can.useElement('calendar')),
              isErrored    = $fieldGroup.hasClass(className.error)
            ;
            if(defaultValue === undefined) {
              return;
          ***REMOVED***
            if(isErrored) {
              module.verbose('Resetting error on field', $fieldGroup);
              $fieldGroup.removeClass(className.error);
              $prompt.remove();
          ***REMOVED***
            if(isDropdown) {
              module.verbose('Resetting dropdown value', $element, defaultValue);
              $element.dropdown('restore defaults', true);
          ***REMOVED***
            else if(isCheckbox) {
              module.verbose('Resetting checkbox value', $element, defaultValue);
              $field.prop('checked', defaultValue);
          ***REMOVED***
            else if (isCalendar) {
              $calendar.calendar('set date', defaultValue);
          ***REMOVED***
            else {
              module.verbose('Resetting field value', $field, defaultValue);
              $field.val(defaultValue);
          ***REMOVED***
        ***REMOVED***);

          module.determine.isDirty();
 ***REMOVED*****REMOVED***

        determine: {
          isValid: function() {
            var
              allValid = true
            ;
            $.each(validation, function(fieldName, field) {
              if( !( module.validate.field(field, fieldName, true) ) ) {
                allValid = false;
            ***REMOVED***
          ***REMOVED***);
            return allValid;
   ***REMOVED*****REMOVED***
          isDirty: function(e) {
            var formIsDirty = false;

            $field.each(function(index, el) {
              var
                $el = $(el),
                isCheckbox = ($el.filter(selector.checkbox).length > 0),
                isDirty
              ;

              if (isCheckbox) {
                isDirty = module.is.checkboxDirty($el);
            ***REMOVED*** else {
                isDirty = module.is.fieldDirty($el);
            ***REMOVED***

              $el.data(settings.metadata.isDirty, isDirty);

              formIsDirty |= isDirty;
          ***REMOVED***);

            if (formIsDirty) {
              module.set.dirty();
          ***REMOVED*** else {
              module.set.clean();
          ***REMOVED***

            if (e && e.namespace === 'dirty') {
              e.stopImmediatePropagation();
              e.preventDefault();
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        is: {
          bracketedRule: function(rule) {
            return (rule.type && rule.type.match(settings.regExp.bracket));
   ***REMOVED*****REMOVED***
          shorthandFields: function(fields) {
            var
              fieldKeys = Object.keys(fields),
              firstRule = fields[fieldKeys[0]]
            ;
            return module.is.shorthandRules(firstRule);
   ***REMOVED*****REMOVED***
          // duck type rule test
          shorthandRules: function(rules) {
            return (typeof rules == 'string' || Array.isArray(rules));
   ***REMOVED*****REMOVED***
          empty: function($field) {
            if(!$field || $field.length === 0) {
              return true;
          ***REMOVED***
            else if($field.is(selector.checkbox)) {
              return !$field.is(':checked');
          ***REMOVED***
            else {
              return module.is.blank($field);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          blank: function($field) {
            return $.trim($field.val()) === '';
   ***REMOVED*****REMOVED***
          valid: function(field) {
            var
              allValid = true
            ;
            if(field) {
              module.verbose('Checking if field is valid', field);
              return module.validate.field(validation[field], field, false);
          ***REMOVED***
            else {
              module.verbose('Checking if form is valid');
              $.each(validation, function(fieldName, field) {
                if( !module.is.valid(fieldName) ) {
                  allValid = false;
              ***REMOVED***
            ***REMOVED***);
              return allValid;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          dirty: function() {
            return dirty;
   ***REMOVED*****REMOVED***
          clean: function() {
            return !dirty;
   ***REMOVED*****REMOVED***
          fieldDirty: function($el) {
            var initialValue = $el.data(metadata.defaultValue);
            // Explicitly check for null/undefined here as value may be `false`, so ($el.data(dataInitialValue) || '') would not work
            if (initialValue == null) { initialValue = ''; ***REMOVED***
            var currentValue = $el.val();
            if (currentValue == null) { currentValue = ''; ***REMOVED***

            // Boolean values can be encoded as "true/false" or "True/False" depending on underlying frameworks so we need a case insensitive comparison
            var boolRegex = /^(true|false)$/i;
            var isBoolValue = boolRegex.test(initialValue) && boolRegex.test(currentValue);
            if (isBoolValue) {
              var regex = new RegExp("^" + initialValue + "$", "i");
              return !regex.test(currentValue);
          ***REMOVED***

            return currentValue !== initialValue;
   ***REMOVED*****REMOVED***
          checkboxDirty: function($el) {
            var initialValue = $el.data(metadata.defaultValue);
            var currentValue = $el.is(":checked");

            return initialValue !== currentValue;
   ***REMOVED*****REMOVED***
          justDirty: function() {
            return (history[0] === 'dirty');
   ***REMOVED*****REMOVED***
          justClean: function() {
            return (history[0] === 'clean');
        ***REMOVED***
 ***REMOVED*****REMOVED***

        removeEvents: function() {
          $module.off(eventNamespace);
          $field.off(eventNamespace);
          $submit.off(eventNamespace);
          $field.off(eventNamespace);
 ***REMOVED*****REMOVED***

        event: {
          field: {
            keydown: function(event) {
              var
                $field       = $(this),
                key          = event.which,
                isInput      = $field.is(selector.input),
                isCheckbox   = $field.is(selector.checkbox),
                isInDropdown = ($field.closest(selector.uiDropdown).length > 0),
                keyCode      = {
                  enter  : 13,
                  escape : 27
              ***REMOVED***
              ;
              if( key == keyCode.escape) {
                module.verbose('Escape key pressed blurring field');
                $field
                  .blur()
                ;
            ***REMOVED***
              if(!event.ctrlKey && key == keyCode.enter && isInput && !isInDropdown && !isCheckbox) {
                if(!keyHeldDown) {
                  $field.one('keyup' + eventNamespace, module.event.field.keyup);
                  module.submit();
                  module.debug('Enter pressed on input submitting form');
              ***REMOVED***
                keyHeldDown = true;
            ***REMOVED***
***REMOVED*****REMOVED*****REMOVED***
            keyup: function() {
              keyHeldDown = false;
***REMOVED*****REMOVED*****REMOVED***
            blur: function(event) {
              var
                $field          = $(this),
                $fieldGroup     = $field.closest($group),
                validationRules = module.get.validation($field)
              ;
              if( $fieldGroup.hasClass(className.error) ) {
                module.debug('Revalidating field', $field, validationRules);
                if(validationRules) {
                  module.validate.field( validationRules );
              ***REMOVED***
            ***REMOVED***
              else if(settings.on == 'blur') {
                if(validationRules) {
                  module.validate.field( validationRules );
              ***REMOVED***
            ***REMOVED***
***REMOVED*****REMOVED*****REMOVED***
            change: function(event) {
              var
                $field      = $(this),
                $fieldGroup = $field.closest($group),
                validationRules = module.get.validation($field)
              ;
              if(validationRules && (settings.on == 'change' || ( $fieldGroup.hasClass(className.error) && settings.revalidate) )) {
                clearTimeout(module.timer);
                module.timer = setTimeout(function() {
                  module.debug('Revalidating field', $field,  module.get.validation($field));
                  module.validate.field( validationRules );
    ***REMOVED*****REMOVED*****REMOVED*** settings.delay);
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***
          beforeUnload: function(event) {
            if (module.is.dirty() && !submitting) {
              var event = event || window.event;

              // For modern browsers
              if (event) {
                event.returnValue = settings.text.leavingMessage;
            ***REMOVED***

              // For olders...
              return settings.text.leavingMessage;
          ***REMOVED***
        ***REMOVED***

 ***REMOVED*****REMOVED***

        get: {
          ancillaryValue: function(rule) {
            if(!rule.type || (!rule.value && !module.is.bracketedRule(rule))) {
              return false;
          ***REMOVED***
            return (rule.value !== undefined)
              ? rule.value
              : rule.type.match(settings.regExp.bracket)[1] + ''
            ;
   ***REMOVED*****REMOVED***
          ruleName: function(rule) {
            if( module.is.bracketedRule(rule) ) {
              return rule.type.replace(rule.type.match(settings.regExp.bracket)[0], '');
          ***REMOVED***
            return rule.type;
   ***REMOVED*****REMOVED***
          changeEvent: function(type, $input) {
            if(type == 'checkbox' || type == 'radio' || type == 'hidden' || $input.is('select')) {
              return 'change';
          ***REMOVED***
            else {
              return module.get.inputEvent();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          inputEvent: function() {
            return (document.createElement('input').oninput !== undefined)
              ? 'input'
              : (document.createElement('input').onpropertychange !== undefined)
                ? 'propertychange'
                : 'keyup'
            ;
   ***REMOVED*****REMOVED***
          fieldsFromShorthand: function(fields) {
            var
              fullFields = {***REMOVED***
            ;
            $.each(fields, function(name, rules) {
              if(typeof rules == 'string') {
                rules = [rules];
            ***REMOVED***
              fullFields[name] = {
                rules: []
            ***REMOVED***;
              $.each(rules, function(index, rule) {
                fullFields[name].rules.push({ type: rule ***REMOVED***);
            ***REMOVED***);
          ***REMOVED***);
            return fullFields;
   ***REMOVED*****REMOVED***
          prompt: function(rule, field) {
            var
              ruleName      = module.get.ruleName(rule),
              ancillary     = module.get.ancillaryValue(rule),
              $field        = module.get.field(field.identifier),
              value         = $field.val(),
              prompt        = $.isFunction(rule.prompt)
                ? rule.prompt(value)
                : rule.prompt || settings.prompt[ruleName] || settings.text.unspecifiedRule,
              requiresValue = (prompt.search('{value***REMOVED***') !== -1),
              requiresName  = (prompt.search('{name***REMOVED***') !== -1),
              $label,
              name
            ;
            if(requiresValue) {
              prompt = prompt.replace(/\{value\***REMOVED***/g, $field.val());
          ***REMOVED***
            if(requiresName) {
              $label = $field.closest(selector.group).find('label').eq(0);
              name = ($label.length == 1)
                ? $label.text()
                : $field.prop('placeholder') || settings.text.unspecifiedField
              ;
              prompt = prompt.replace(/\{name\***REMOVED***/g, name);
          ***REMOVED***
            prompt = prompt.replace(/\{identifier\***REMOVED***/g, field.identifier);
            prompt = prompt.replace(/\{ruleValue\***REMOVED***/g, ancillary);
            if(!rule.prompt) {
              module.verbose('Using default validation prompt for type', prompt, ruleName);
          ***REMOVED***
            return prompt;
   ***REMOVED*****REMOVED***
          settings: function() {
            if($.isPlainObject(parameters)) {
              var
                keys     = Object.keys(parameters),
                isLegacySettings = (keys.length > 0)
                  ? (parameters[keys[0]].identifier !== undefined && parameters[keys[0]].rules !== undefined)
                  : false
              ;
              if(isLegacySettings) {
                // 1.x (ducktyped)
                settings   = $.extend(true, {***REMOVED***, $.fn.form.settings, legacyParameters);
                validation = $.extend({***REMOVED***, $.fn.form.settings.defaults, parameters);
                module.error(settings.error.oldSyntax, element);
                module.verbose('Extending settings from legacy parameters', validation, settings);
            ***REMOVED***
              else {
                // 2.x
                if(parameters.fields && module.is.shorthandFields(parameters.fields)) {
                  parameters.fields = module.get.fieldsFromShorthand(parameters.fields);
              ***REMOVED***
                settings   = $.extend(true, {***REMOVED***, $.fn.form.settings, parameters);
                validation = $.extend({***REMOVED***, $.fn.form.settings.defaults, settings.fields);
                module.verbose('Extending settings', validation, settings);
            ***REMOVED***
          ***REMOVED***
            else {
              settings   = $.fn.form.settings;
              validation = $.fn.form.settings.defaults;
              module.verbose('Using default form validation', validation, settings);
          ***REMOVED***

            // shorthand
            namespace       = settings.namespace;
            metadata        = settings.metadata;
            selector        = settings.selector;
            className       = settings.className;
            regExp          = settings.regExp;
            error           = settings.error;
            moduleNamespace = 'module-' + namespace;
            eventNamespace  = '.' + namespace;

            // grab instance
            instance = $module.data(moduleNamespace);

            // refresh selector cache
            module.refresh();
   ***REMOVED*****REMOVED***
          field: function(identifier) {
            module.verbose('Finding field with identifier', identifier);
            identifier = module.escape.string(identifier);
            var t;
            if((t=$field.filter('#' + identifier)).length > 0 ) {
              return t;
          ***REMOVED***
            if((t=$field.filter('[name="' + identifier +'"]')).length > 0 ) {
              return t;
          ***REMOVED***
            if((t=$field.filter('[name="' + identifier +'[]"]')).length > 0 ) {
              return t;
          ***REMOVED***
            if((t=$field.filter('[data-' + metadata.validate + '="'+ identifier +'"]')).length > 0 ) {
              return t;
          ***REMOVED***
            return $('<input/>');
   ***REMOVED*****REMOVED***
          fields: function(fields) {
            var
              $fields = $()
            ;
            $.each(fields, function(index, name) {
              $fields = $fields.add( module.get.field(name) );
          ***REMOVED***);
            return $fields;
   ***REMOVED*****REMOVED***
          validation: function($field) {
            var
              fieldValidation,
              identifier
            ;
            if(!validation) {
              return false;
          ***REMOVED***
            $.each(validation, function(fieldName, field) {
              identifier = field.identifier || fieldName;
              $.each(module.get.field(identifier), function(index, groupField) {
                if(groupField == $field[0]) {
                  field.identifier = identifier;
                  fieldValidation = field;
                  return false;
              ***REMOVED***
            ***REMOVED***);
          ***REMOVED***);
            return fieldValidation || false;
   ***REMOVED*****REMOVED***
          value: function (field) {
            var
              fields = [],
              results
            ;
            fields.push(field);
            results = module.get.values.call(element, fields);
            return results[field];
   ***REMOVED*****REMOVED***
          values: function (fields) {
            var
              $fields = Array.isArray(fields)
                ? module.get.fields(fields)
                : $field,
              values = {***REMOVED***
            ;
            $fields.each(function(index, field) {
              var
                $field       = $(field),
                $calendar    = $field.closest(selector.uiCalendar),
                name         = $field.prop('name'),
                value        = $field.val(),
                isCheckbox   = $field.is(selector.checkbox),
                isRadio      = $field.is(selector.radio),
                isMultiple   = (name.indexOf('[]') !== -1),
                isCalendar   = ($calendar.length > 0  && module.can.useElement('calendar')),
                isChecked    = (isCheckbox)
                  ? $field.is(':checked')
                  : false
              ;
              if(name) {
                if(isMultiple) {
                  name = name.replace('[]', '');
                  if(!values[name]) {
                    values[name] = [];
                ***REMOVED***
                  if(isCheckbox) {
                    if(isChecked) {
                      values[name].push(value || true);
                  ***REMOVED***
                    else {
                      values[name].push(false);
                  ***REMOVED***
                ***REMOVED***
                  else {
                    values[name].push(value);
                ***REMOVED***
              ***REMOVED***
                else {
                  if(isRadio) {
                    if(values[name] === undefined || values[name] === false) {
                      values[name] = (isChecked)
                        ? value || true
                        : false
                      ;
                  ***REMOVED***
                ***REMOVED***
                  else if(isCheckbox) {
                    if(isChecked) {
                      values[name] = value || true;
                  ***REMOVED***
                    else {
                      values[name] = false;
                  ***REMOVED***
                ***REMOVED***
                  else if(isCalendar) {
                    var date = $calendar.calendar('get date');

                    if (date !== null) {
                      if (settings.dateHandling == 'date') {
                        values[name] = date;
                    ***REMOVED*** else if(settings.dateHandling == 'input') {
                        values[name] = $calendar.calendar('get input date')
                    ***REMOVED*** else if (settings.dateHandling == 'formatter') {
                        var type = $calendar.calendar('setting', 'type');

                        switch(type) {
                          case 'date':
                          values[name] = settings.formatter.date(date);
                          break;

                          case 'datetime':
                          values[name] = settings.formatter.datetime(date);
                          break;

                          case 'time':
                          values[name] = settings.formatter.time(date);
                          break;

                          case 'month':
                          values[name] = settings.formatter.month(date);
                          break;

                          case 'year':
                          values[name] = settings.formatter.year(date);
                          break;

                          default:
                          module.debug('Wrong calendar mode', $calendar, type);
                          values[name] = '';
                      ***REMOVED***
                    ***REMOVED***
                  ***REMOVED*** else {
                      values[name] = '';
                  ***REMOVED***
                ***REMOVED*** else {
                    values[name] = value;
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***);
            return values;
   ***REMOVED*****REMOVED***
          dirtyFields: function() {
            return $field.filter(function(index, e) {
              return $(e).data(metadata.isDirty);
          ***REMOVED***);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        has: {

          field: function(identifier) {
            module.verbose('Checking for existence of a field with identifier', identifier);
            identifier = module.escape.string(identifier);
            if(typeof identifier !== 'string') {
              module.error(error.identifier, identifier);
          ***REMOVED***
            if($field.filter('#' + identifier).length > 0 ) {
              return true;
          ***REMOVED***
            else if( $field.filter('[name="' + identifier +'"]').length > 0 ) {
              return true;
          ***REMOVED***
            else if( $field.filter('[data-' + metadata.validate + '="'+ identifier +'"]').length > 0 ) {
              return true;
          ***REMOVED***
            return false;
        ***REMOVED***

 ***REMOVED*****REMOVED***

        can: {
            useElement: function(element){
               if ($.fn[element] !== undefined) {
                   return true;
             ***REMOVED***
               module.error(error.noElement.replace('{element***REMOVED***',element));
               return false;
          ***REMOVED***
 ***REMOVED*****REMOVED***

        escape: {
          string: function(text) {
            text =  String(text);
            return text.replace(regExp.escape, '\\$&');
        ***REMOVED***
 ***REMOVED*****REMOVED***

        add: {
          // alias
          rule: function(name, rules) {
            module.add.field(name, rules);
   ***REMOVED*****REMOVED***
          field: function(name, rules) {
            // Validation should have at least a standard format
            if(validation[name] === undefined || validation[name].rules === undefined) {
              validation[name] = {
                rules: []
            ***REMOVED***;
          ***REMOVED***
            var
              newValidation = {
                rules: []
            ***REMOVED***
            ;
            if(module.is.shorthandRules(rules)) {
              rules = Array.isArray(rules)
                ? rules
                : [rules]
              ;
              $.each(rules, function(_index, rule) {
                newValidation.rules.push({ type: rule ***REMOVED***);
            ***REMOVED***);
          ***REMOVED***
            else {
              newValidation.rules = rules.rules;
          ***REMOVED***
            // For each new rule, check if there's not already one with the same type
            $.each(newValidation.rules, function (_index, rule) {
              if ($.grep(validation[name].rules, function(item){ return item.type == rule.type; ***REMOVED***).length == 0) {
                validation[name].rules.push(rule);
            ***REMOVED***
          ***REMOVED***);
            module.debug('Adding rules', newValidation.rules, validation);
   ***REMOVED*****REMOVED***
          fields: function(fields) {
            var
              newValidation
            ;
            if(fields && module.is.shorthandFields(fields)) {
              newValidation = module.get.fieldsFromShorthand(fields);
          ***REMOVED***
            else {
              newValidation = fields;
          ***REMOVED***
            validation = $.extend({***REMOVED***, validation, newValidation);
   ***REMOVED*****REMOVED***
          prompt: function(identifier, errors, internal) {
            var
              $field       = module.get.field(identifier),
              $fieldGroup  = $field.closest($group),
              $prompt      = $fieldGroup.children(selector.prompt),
              promptExists = ($prompt.length !== 0)
            ;
            errors = (typeof errors == 'string')
              ? [errors]
              : errors
            ;
            module.verbose('Adding field error state', identifier);
            if(!internal) {
              $fieldGroup
                  .addClass(className.error)
              ;
          ***REMOVED***
            if(settings.inline) {
              if(!promptExists) {
                $prompt = settings.templates.prompt(errors, className.label);
                $prompt
                  .appendTo($fieldGroup)
                ;
            ***REMOVED***
              $prompt
                .html(errors[0])
              ;
              if(!promptExists) {
                if(settings.transition && module.can.useElement('transition') && $module.transition('is supported')) {
                  module.verbose('Displaying error with css transition', settings.transition);
                  $prompt.transition(settings.transition + ' in', settings.duration);
              ***REMOVED***
                else {
                  module.verbose('Displaying error with fallback javascript animation');
                  $prompt
                    .fadeIn(settings.duration)
                  ;
              ***REMOVED***
            ***REMOVED***
              else {
                module.verbose('Inline errors are disabled, no inline error added', identifier);
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***
          errors: function(errors) {
            module.debug('Adding form error messages', errors);
            module.set.error();
            $message
              .html( settings.templates.error(errors) )
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        remove: {
          rule: function(field, rule) {
            var
              rules = Array.isArray(rule)
                ? rule
                : [rule]
            ;
            if(validation[field] === undefined || !Array.isArray(validation[field].rules)) {
              return;
          ***REMOVED***
            if(rule === undefined) {
              module.debug('Removed all rules');
              validation[field].rules = [];
              return;
          ***REMOVED***
            $.each(validation[field].rules, function(index, rule) {
              if(rule && rules.indexOf(rule.type) !== -1) {
                module.debug('Removed rule', rule.type);
                validation[field].rules.splice(index, 1);
            ***REMOVED***
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          field: function(field) {
            var
              fields = Array.isArray(field)
                ? field
                : [field]
            ;
            $.each(fields, function(index, field) {
              module.remove.rule(field);
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          // alias
          rules: function(field, rules) {
            if(Array.isArray(field)) {
              $.each(field, function(index, field) {
                module.remove.rule(field, rules);
            ***REMOVED***);
          ***REMOVED***
            else {
              module.remove.rule(field, rules);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          fields: function(fields) {
            module.remove.field(fields);
   ***REMOVED*****REMOVED***
          prompt: function(identifier) {
            var
              $field      = module.get.field(identifier),
              $fieldGroup = $field.closest($group),
              $prompt     = $fieldGroup.children(selector.prompt)
            ;
            $fieldGroup
              .removeClass(className.error)
            ;
            if(settings.inline && $prompt.is(':visible')) {
              module.verbose('Removing prompt for field', identifier);
              if(settings.transition  && module.can.useElement('transition') && $module.transition('is supported')) {
                $prompt.transition(settings.transition + ' out', settings.duration, function() {
                  $prompt.remove();
              ***REMOVED***);
            ***REMOVED***
              else {
                $prompt
                  .fadeOut(settings.duration, function(){
                    $prompt.remove();
                ***REMOVED***)
                ;
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        set: {
          success: function() {
            $module
              .removeClass(className.error)
              .addClass(className.success)
            ;
   ***REMOVED*****REMOVED***
          defaults: function () {
            $field.each(function (index, el) {
              var
                $el        = $(el),
                $parent    = $el.parent(),
                isCheckbox = ($el.filter(selector.checkbox).length > 0),
                isDropdown = $parent.is(selector.uiDropdown) && module.can.useElement('dropdown'),
                $calendar   = $el.closest(selector.uiCalendar),
                isCalendar  = ($calendar.length > 0  && module.can.useElement('calendar')),
                value      = (isCheckbox)
                  ? $el.is(':checked')
                  : $el.val()
              ;
              if (isDropdown) {
                $parent.dropdown('save defaults');
            ***REMOVED***
              else if (isCalendar) {
                $calendar.calendar('refresh');
            ***REMOVED***
              $el.data(metadata.defaultValue, value);
              $el.data(metadata.isDirty, false);
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          error: function() {
            $module
              .removeClass(className.success)
              .addClass(className.error)
            ;
   ***REMOVED*****REMOVED***
          value: function (field, value) {
            var
              fields = {***REMOVED***
            ;
            fields[field] = value;
            return module.set.values.call(element, fields);
   ***REMOVED*****REMOVED***
          values: function (fields) {
            if($.isEmptyObject(fields)) {
              return;
          ***REMOVED***
            $.each(fields, function(key, value) {
              var
                $field      = module.get.field(key),
                $element    = $field.parent(),
                $calendar   = $field.closest(selector.uiCalendar),
                isMultiple  = Array.isArray(value),
                isCheckbox  = $element.is(selector.uiCheckbox)  && module.can.useElement('checkbox'),
                isDropdown  = $element.is(selector.uiDropdown) && module.can.useElement('dropdown'),
                isRadio     = ($field.is(selector.radio) && isCheckbox),
                isCalendar  = ($calendar.length > 0  && module.can.useElement('calendar')),
                fieldExists = ($field.length > 0),
                $multipleField
              ;
              if(fieldExists) {
                if(isMultiple && isCheckbox) {
                  module.verbose('Selecting multiple', value, $field);
                  $element.checkbox('uncheck');
                  $.each(value, function(index, value) {
                    $multipleField = $field.filter('[value="' + value + '"]');
                    $element       = $multipleField.parent();
                    if($multipleField.length > 0) {
                      $element.checkbox('check');
                  ***REMOVED***
                ***REMOVED***);
              ***REMOVED***
                else if(isRadio) {
                  module.verbose('Selecting radio value', value, $field);
                  $field.filter('[value="' + value + '"]')
                    .parent(selector.uiCheckbox)
                      .checkbox('check')
                  ;
              ***REMOVED***
                else if(isCheckbox) {
                  module.verbose('Setting checkbox value', value, $element);
                  if(value === true || value === 1) {
                    $element.checkbox('check');
                ***REMOVED***
                  else {
                    $element.checkbox('uncheck');
                ***REMOVED***
              ***REMOVED***
                else if(isDropdown) {
                  module.verbose('Setting dropdown value', value, $element);
                  $element.dropdown('set selected', value);
              ***REMOVED***
                else if (isCalendar) {
                  $calendar.calendar('set date',value);
              ***REMOVED***
                else {
                  module.verbose('Setting field value', value, $field);
                  $field.val(value);
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          dirty: function() {
            module.verbose('Setting state dirty');
            dirty = true;
            history[0] = history[1];
            history[1] = 'dirty';

            if (module.is.justClean()) {
              $module.trigger('dirty');
          ***REMOVED***
   ***REMOVED*****REMOVED***
          clean: function() {
            module.verbose('Setting state clean');
            dirty = false;
            history[0] = history[1];
            history[1] = 'clean';

            if (module.is.justDirty()) {
              $module.trigger('clean');
          ***REMOVED***
   ***REMOVED*****REMOVED***
          asClean: function() {
            module.set.defaults();
            module.set.clean();
   ***REMOVED*****REMOVED***
          asDirty: function() {
            module.set.defaults();
            module.set.dirty();
   ***REMOVED*****REMOVED***
          autoCheck: function() {
            module.debug('Enabling auto check on required fields');
            $field.each(function (_index, el) {
              var
                $el        = $(el),
                $elGroup   = $(el).closest($group),
                isCheckbox = ($el.filter(selector.checkbox).length > 0),
                isRequired = $el.prop('required') || $elGroup.hasClass(className.required) || $elGroup.parent().hasClass(className.required),
                isDisabled = $el.prop('disabled') || $elGroup.hasClass(className.disabled) || $elGroup.parent().hasClass(className.disabled),
                validation = module.get.validation($el),
                hasEmptyRule = validation
                  ? $.grep(validation.rules, function(rule) { return rule.type == "empty" ***REMOVED***) !== 0
                  : false,
                identifier = validation.identifier || $el.attr('id') || $el.attr('name') || $el.data(metadata.validate)
              ;
              if (isRequired && !isDisabled && !hasEmptyRule && identifier !== undefined) {
                if (isCheckbox) {
                  module.verbose("Adding 'checked' rule on field", identifier);
                  module.add.rule(identifier, "checked");
              ***REMOVED*** else {
                  module.verbose("Adding 'empty' rule on field", identifier);
                  module.add.rule(identifier, "empty");
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        validate: {

          form: function(event, ignoreCallbacks) {
            var values = module.get.values();

            // input keydown event will fire submit repeatedly by browser default
            if(keyHeldDown) {
              return false;
          ***REMOVED***

            // reset errors
            formErrors = [];
            if( module.determine.isValid() ) {
              module.debug('Form has no validation errors, submitting');
              module.set.success();
              if(ignoreCallbacks !== true) {
                return settings.onSuccess.call(element, event, values);
            ***REMOVED***
          ***REMOVED***
            else {
              module.debug('Form has errors');
              module.set.error();
              if(!settings.inline) {
                module.add.errors(formErrors);
            ***REMOVED***
              // prevent ajax submit
              if(event && $module.data('moduleApi') !== undefined) {
                event.stopImmediatePropagation();
            ***REMOVED***
              if(ignoreCallbacks !== true) {
                return settings.onFailure.call(element, formErrors, values);
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***

          // takes a validation object and returns whether field passes validation
          field: function(field, fieldName, showErrors) {
            showErrors = (showErrors !== undefined)
              ? showErrors
              : true
            ;
            if(typeof field == 'string') {
              module.verbose('Validating field', field);
              fieldName = field;
              field     = validation[field];
          ***REMOVED***
            var
              identifier    = field.identifier || fieldName,
              $field        = module.get.field(identifier),
              $dependsField = (field.depends)
                ? module.get.field(field.depends)
                : false,
              fieldValid  = true,
              fieldErrors = []
            ;
            if(!field.identifier) {
              module.debug('Using field name as identifier', identifier);
              field.identifier = identifier;
          ***REMOVED***
            var isDisabled = true;
            $.each($field, function(){
                if(!$(this).prop('disabled')) {
                  isDisabled = false;
                  return false;
              ***REMOVED***
          ***REMOVED***);
            if(isDisabled) {
              module.debug('Field is disabled. Skipping', identifier);
          ***REMOVED***
            else if(field.optional && module.is.blank($field)){
              module.debug('Field is optional and blank. Skipping', identifier);
          ***REMOVED***
            else if(field.depends && module.is.empty($dependsField)) {
              module.debug('Field depends on another value that is not present or empty. Skipping', $dependsField);
          ***REMOVED***
            else if(field.rules !== undefined) {
              $field.closest($group).removeClass(className.error);
              $.each(field.rules, function(index, rule) {
                if( module.has.field(identifier)) {
                  var invalidFields = module.validate.rule(field, rule,true) || [];
                  if (invalidFields.length>0){
                    module.debug('Field is invalid', identifier, rule.type);
                    fieldErrors.push(module.get.prompt(rule, field));
                    fieldValid = false;
                    if(showErrors){
                      $(invalidFields).closest($group).addClass(className.error);
                  ***REMOVED***
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***);
          ***REMOVED***
            if(fieldValid) {
              if(showErrors) {
                module.remove.prompt(identifier, fieldErrors);
                settings.onValid.call($field);
            ***REMOVED***
          ***REMOVED***
            else {
              if(showErrors) {
                formErrors = formErrors.concat(fieldErrors);
                module.add.prompt(identifier, fieldErrors, true);
                settings.onInvalid.call($field, fieldErrors);
            ***REMOVED***
              return false;
          ***REMOVED***
            return true;
   ***REMOVED*****REMOVED***

          // takes validation rule and returns whether field passes rule
          rule: function(field, rule, internal) {
            var
              $field       = module.get.field(field.identifier),
              ancillary    = module.get.ancillaryValue(rule),
              ruleName     = module.get.ruleName(rule),
              ruleFunction = settings.rules[ruleName],
              invalidFields = [],
              isCheckbox = $field.is(selector.checkbox),
              isValid = function(field){
                var value = (isCheckbox ? $(field).filter(':checked').val() : $(field).val());
                // cast to string avoiding encoding special values
                value = (value === undefined || value === '' || value === null)
                    ? ''
                    : (settings.shouldTrim) ? $.trim(value + '') : String(value + '')
                ;
                return ruleFunction.call(field, value, ancillary, $module);
            ***REMOVED***
            ;
            if( !$.isFunction(ruleFunction) ) {
              module.error(error.noRule, ruleName);
              return;
          ***REMOVED***
            if(isCheckbox) {
              if (!isValid($field)) {
                invalidFields = $field;
            ***REMOVED***
          ***REMOVED*** else {
              $.each($field, function (index, field) {
                if (!isValid(field)) {
                  invalidFields.push(field);
              ***REMOVED***
            ***REMOVED***);
          ***REMOVED***
            return internal ? invalidFields : !(invalidFields.length>0);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        setting: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            settings[name] = value;
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***
          if(Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***;
      module.initialize();
  ***REMOVED***)
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
***REMOVED***;

$.fn.form.settings = {

  name              : 'Form',
  namespace         : 'form',

  debug             : false,
  verbose           : false,
  performance       : true,

  fields            : false,

  keyboardShortcuts : true,
  on                : 'submit',
  inline            : false,

  delay             : 200,
  revalidate        : true,
  shouldTrim        : true,

  transition        : 'scale',
  duration          : 200,

  autoCheckRequired : false,
  preventLeaving    : false,
  dateHandling      : 'date', // 'date', 'input', 'formatter'

  onValid           : function() {***REMOVED***,
  onInvalid         : function() {***REMOVED***,
  onSuccess         : function() { return true; ***REMOVED***,
  onFailure         : function() { return false; ***REMOVED***,
  onDirty           : function() {***REMOVED***,
  onClean           : function() {***REMOVED***,

  metadata : {
    defaultValue : 'default',
    validate     : 'validate',
    isDirty      : 'isDirty'
***REMOVED***

  regExp: {
    htmlID  : /^[a-zA-Z][\w:.-]*$/g,
    bracket : /\[(.*)\]/i,
    decimal : /^\d+\.?\d*$/,
    email   : /^[a-z0-9!#$%&'*+\/=?^_`{|***REMOVED***~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,
    escape  : /[\-\[\]\/\{\***REMOVED***\(\)\*\+\?\.\\\^\$\|:,=@]/g,
    flags   : /^\/(.*)\/(.*)?/,
    integer : /^\-?\d+$/,
    number  : /^\-?\d*(\.\d+)?$/,
    url     : /(https?:\/\/(?:www\.|(?!www))[^\s\.]+\.[^\s]{2,***REMOVED***|www\.[^\s]+\.[^\s]{2,***REMOVED***)/i
***REMOVED***

  text: {
    unspecifiedRule  : 'Please enter a valid value',
    unspecifiedField : 'This field',
    leavingMessage   : 'There are unsaved changes on this page which will be discarded if you continue.'
***REMOVED***

  prompt: {
    empty                : '{name***REMOVED*** must have a value',
    checked              : '{name***REMOVED*** must be checked',
    email                : '{name***REMOVED*** must be a valid e-mail',
    url                  : '{name***REMOVED*** must be a valid url',
    regExp               : '{name***REMOVED*** is not formatted correctly',
    integer              : '{name***REMOVED*** must be an integer',
    decimal              : '{name***REMOVED*** must be a decimal number',
    number               : '{name***REMOVED*** must be set to a number',
    is                   : '{name***REMOVED*** must be "{ruleValue***REMOVED***"',
    isExactly            : '{name***REMOVED*** must be exactly "{ruleValue***REMOVED***"',
    not                  : '{name***REMOVED*** cannot be set to "{ruleValue***REMOVED***"',
    notExactly           : '{name***REMOVED*** cannot be set to exactly "{ruleValue***REMOVED***"',
    contain              : '{name***REMOVED*** must contain "{ruleValue***REMOVED***"',
    containExactly       : '{name***REMOVED*** must contain exactly "{ruleValue***REMOVED***"',
    doesntContain        : '{name***REMOVED*** cannot contain  "{ruleValue***REMOVED***"',
    doesntContainExactly : '{name***REMOVED*** cannot contain exactly "{ruleValue***REMOVED***"',
    minLength            : '{name***REMOVED*** must be at least {ruleValue***REMOVED*** characters',
    length               : '{name***REMOVED*** must be at least {ruleValue***REMOVED*** characters',
    exactLength          : '{name***REMOVED*** must be exactly {ruleValue***REMOVED*** characters',
    maxLength            : '{name***REMOVED*** cannot be longer than {ruleValue***REMOVED*** characters',
    match                : '{name***REMOVED*** must match {ruleValue***REMOVED*** field',
    different            : '{name***REMOVED*** must have a different value than {ruleValue***REMOVED*** field',
    creditCard           : '{name***REMOVED*** must be a valid credit card number',
    minCount             : '{name***REMOVED*** must have at least {ruleValue***REMOVED*** choices',
    exactCount           : '{name***REMOVED*** must have exactly {ruleValue***REMOVED*** choices',
    maxCount             : '{name***REMOVED*** must have {ruleValue***REMOVED*** or less choices'
***REMOVED***

  selector : {
    checkbox   : 'input[type="checkbox"], input[type="radio"]',
    clear      : '.clear',
    field      : 'input, textarea, select',
    group      : '.field',
    input      : 'input',
    message    : '.error.message',
    prompt     : '.prompt.label',
    radio      : 'input[type="radio"]',
    reset      : '.reset:not([type="reset"])',
    submit     : '.submit:not([type="submit"])',
    uiCheckbox : '.ui.checkbox',
    uiDropdown : '.ui.dropdown',
    uiCalendar : '.ui.calendar'
***REMOVED***

  className : {
    error    : 'error',
    label    : 'ui basic red pointing prompt label',
    pressed  : 'down',
    success  : 'success',
    required : 'required',
    disabled : 'disabled'
***REMOVED***

  error: {
    identifier : 'You must specify a string identifier for each field',
    method     : 'The method you called is not defined.',
    noRule     : 'There is no rule matching the one you specified',
    oldSyntax  : 'Starting in 2.0 forms now only take a single settings object. Validation settings converted to new syntax automatically.',
    noElement  : 'This module requires ui {element***REMOVED***'
***REMOVED***

  templates: {

    // template that produces error message
    error: function(errors) {
      var
        html = '<ul class="list">'
      ;
      $.each(errors, function(index, value) {
        html += '<li>' + value + '</li>';
    ***REMOVED***);
      html += '</ul>';
      return $(html);
  ***REMOVED***

    // template that produces label
    prompt: function(errors, labelClasses) {
      return $('<div/>')
        .addClass(labelClasses)
        .html(errors[0])
      ;
  ***REMOVED***
***REMOVED***

  formatter: {
    date: function(date) {
      return Intl.DateTimeFormat('en-GB').format(date);
  ***REMOVED***
    datetime: function(date) {
      return Intl.DateTimeFormat('en-GB', {
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    ***REMOVED***).format(date);
  ***REMOVED***
    time: function(date) {
      return Intl.DateTimeFormat('en-GB', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    ***REMOVED***).format(date);
  ***REMOVED***
    month: function(date) {
      return Intl.DateTimeFormat('en-GB', {
        month: '2-digit',
        year: 'numeric'
    ***REMOVED***).format(date);
  ***REMOVED***
    year: function(date) {
      return Intl.DateTimeFormat('en-GB', {
        year: 'numeric'
    ***REMOVED***).format(date);
  ***REMOVED***
***REMOVED***

  rules: {

    // is not empty or blank string
    empty: function(value) {
      return !(value === undefined || '' === value || Array.isArray(value) && value.length === 0);
  ***REMOVED***

    // checkbox checked
    checked: function() {
      return ($(this).filter(':checked').length > 0);
  ***REMOVED***

    // is most likely an email
    email: function(value){
      return $.fn.form.settings.regExp.email.test(value);
  ***REMOVED***

    // value is most likely url
    url: function(value) {
      return $.fn.form.settings.regExp.url.test(value);
  ***REMOVED***

    // matches specified regExp
    regExp: function(value, regExp) {
      if(regExp instanceof RegExp) {
        return value.match(regExp);
    ***REMOVED***
      var
        regExpParts = regExp.match($.fn.form.settings.regExp.flags),
        flags
      ;
      // regular expression specified as /baz/gi (flags)
      if(regExpParts) {
        regExp = (regExpParts.length >= 2)
          ? regExpParts[1]
          : regExp
        ;
        flags = (regExpParts.length >= 3)
          ? regExpParts[2]
          : ''
        ;
    ***REMOVED***
      return value.match( new RegExp(regExp, flags) );
  ***REMOVED***

    // is valid integer or matches range
    integer: function(value, range) {
      var
        intRegExp = $.fn.form.settings.regExp.integer,
        min,
        max,
        parts
      ;
      if( !range || ['', '..'].indexOf(range) !== -1) {
        // do nothing
    ***REMOVED***
      else if(range.indexOf('..') == -1) {
        if(intRegExp.test(range)) {
          min = max = range - 0;
      ***REMOVED***
    ***REMOVED***
      else {
        parts = range.split('..', 2);
        if(intRegExp.test(parts[0])) {
          min = parts[0] - 0;
      ***REMOVED***
        if(intRegExp.test(parts[1])) {
          max = parts[1] - 0;
      ***REMOVED***
    ***REMOVED***
      return (
        intRegExp.test(value) &&
        (min === undefined || value >= min) &&
        (max === undefined || value <= max)
      );
  ***REMOVED***

    // is valid number (with decimal)
    decimal: function(value) {
      return $.fn.form.settings.regExp.decimal.test(value);
  ***REMOVED***

    // is valid number
    number: function(value) {
      return $.fn.form.settings.regExp.number.test(value);
  ***REMOVED***

    // is value (case insensitive)
    is: function(value, text) {
      text = (typeof text == 'string')
        ? text.toLowerCase()
        : text
      ;
      value = (typeof value == 'string')
        ? value.toLowerCase()
        : value
      ;
      return (value == text);
  ***REMOVED***

    // is value
    isExactly: function(value, text) {
      return (value == text);
  ***REMOVED***

    // value is not another value (case insensitive)
    not: function(value, notValue) {
      value = (typeof value == 'string')
        ? value.toLowerCase()
        : value
      ;
      notValue = (typeof notValue == 'string')
        ? notValue.toLowerCase()
        : notValue
      ;
      return (value != notValue);
  ***REMOVED***

    // value is not another value (case sensitive)
    notExactly: function(value, notValue) {
      return (value != notValue);
  ***REMOVED***

    // value contains text (insensitive)
    contains: function(value, text) {
      // escape regex characters
      text = text.replace($.fn.form.settings.regExp.escape, "\\$&");
      return (value.search( new RegExp(text, 'i') ) !== -1);
  ***REMOVED***

    // value contains text (case sensitive)
    containsExactly: function(value, text) {
      // escape regex characters
      text = text.replace($.fn.form.settings.regExp.escape, "\\$&");
      return (value.search( new RegExp(text) ) !== -1);
  ***REMOVED***

    // value contains text (insensitive)
    doesntContain: function(value, text) {
      // escape regex characters
      text = text.replace($.fn.form.settings.regExp.escape, "\\$&");
      return (value.search( new RegExp(text, 'i') ) === -1);
  ***REMOVED***

    // value contains text (case sensitive)
    doesntContainExactly: function(value, text) {
      // escape regex characters
      text = text.replace($.fn.form.settings.regExp.escape, "\\$&");
      return (value.search( new RegExp(text) ) === -1);
  ***REMOVED***

    // is at least string length
    minLength: function(value, requiredLength) {
      return (value !== undefined)
        ? (value.length >= requiredLength)
        : false
      ;
  ***REMOVED***

    // see rls notes for 2.0.6 (this is a duplicate of minLength)
    length: function(value, requiredLength) {
      return (value !== undefined)
        ? (value.length >= requiredLength)
        : false
      ;
  ***REMOVED***

    // is exactly length
    exactLength: function(value, requiredLength) {
      return (value !== undefined)
        ? (value.length == requiredLength)
        : false
      ;
  ***REMOVED***

    // is less than length
    maxLength: function(value, maxLength) {
      return (value !== undefined)
        ? (value.length <= maxLength)
        : false
      ;
  ***REMOVED***

    // matches another field
    match: function(value, identifier, $module) {
      var
        matchingValue,
        matchingElement
      ;
      if((matchingElement = $module.find('[data-validate="'+ identifier +'"]')).length > 0 ) {
        matchingValue = matchingElement.val();
    ***REMOVED***
      else if((matchingElement = $module.find('#' + identifier)).length > 0) {
        matchingValue = matchingElement.val();
    ***REMOVED***
      else if((matchingElement = $module.find('[name="' + identifier +'"]')).length > 0) {
        matchingValue = matchingElement.val();
    ***REMOVED***
      else if((matchingElement = $module.find('[name="' + identifier +'[]"]')).length > 0 ) {
        matchingValue = matchingElement;
    ***REMOVED***
      return (matchingValue !== undefined)
        ? ( value.toString() == matchingValue.toString() )
        : false
      ;
  ***REMOVED***

    // different than another field
    different: function(value, identifier, $module) {
      // use either id or name of field
      var
        matchingValue,
        matchingElement
      ;
      if((matchingElement = $module.find('[data-validate="'+ identifier +'"]')).length > 0 ) {
        matchingValue = matchingElement.val();
    ***REMOVED***
      else if((matchingElement = $module.find('#' + identifier)).length > 0) {
        matchingValue = matchingElement.val();
    ***REMOVED***
      else if((matchingElement = $module.find('[name="' + identifier +'"]')).length > 0) {
        matchingValue = matchingElement.val();
    ***REMOVED***
      else if((matchingElement = $module.find('[name="' + identifier +'[]"]')).length > 0 ) {
        matchingValue = matchingElement;
    ***REMOVED***
      return (matchingValue !== undefined)
        ? ( value.toString() !== matchingValue.toString() )
        : false
      ;
  ***REMOVED***

    creditCard: function(cardNumber, cardTypes) {
      var
        cards = {
          visa: {
            pattern : /^4/,
            length  : [16]
   ***REMOVED*****REMOVED***
          amex: {
            pattern : /^3[47]/,
            length  : [15]
   ***REMOVED*****REMOVED***
          mastercard: {
            pattern : /^5[1-5]/,
            length  : [16]
   ***REMOVED*****REMOVED***
          discover: {
            pattern : /^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2***REMOVED***|9[0-1][0-9]|92[0-5]|64[4-9])|65)/,
            length  : [16]
   ***REMOVED*****REMOVED***
          unionPay: {
            pattern : /^(62|88)/,
            length  : [16, 17, 18, 19]
   ***REMOVED*****REMOVED***
          jcb: {
            pattern : /^35(2[89]|[3-8][0-9])/,
            length  : [16]
   ***REMOVED*****REMOVED***
          maestro: {
            pattern : /^(5018|5020|5038|6304|6759|676[1-3])/,
            length  : [12, 13, 14, 15, 16, 17, 18, 19]
   ***REMOVED*****REMOVED***
          dinersClub: {
            pattern : /^(30[0-5]|^36)/,
            length  : [14]
   ***REMOVED*****REMOVED***
          laser: {
            pattern : /^(6304|670[69]|6771)/,
            length  : [16, 17, 18, 19]
   ***REMOVED*****REMOVED***
          visaElectron: {
            pattern : /^(4026|417500|4508|4844|491(3|7))/,
            length  : [16]
        ***REMOVED***
 ***REMOVED*****REMOVED***
        valid         = {***REMOVED***,
        validCard     = false,
        requiredTypes = (typeof cardTypes == 'string')
          ? cardTypes.split(',')
          : false,
        unionPay,
        validation
      ;

      if(typeof cardNumber !== 'string' || cardNumber.length === 0) {
        return;
    ***REMOVED***

      // allow dashes in card
      cardNumber = cardNumber.replace(/[\-]/g, '');

      // verify card types
      if(requiredTypes) {
        $.each(requiredTypes, function(index, type){
          // verify each card type
          validation = cards[type];
          if(validation) {
            valid = {
              length  : ($.inArray(cardNumber.length, validation.length) !== -1),
              pattern : (cardNumber.search(validation.pattern) !== -1)
          ***REMOVED***;
            if(valid.length && valid.pattern) {
              validCard = true;
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***);

        if(!validCard) {
          return false;
      ***REMOVED***
    ***REMOVED***

      // skip luhn for UnionPay
      unionPay = {
        number  : ($.inArray(cardNumber.length, cards.unionPay.length) !== -1),
        pattern : (cardNumber.search(cards.unionPay.pattern) !== -1)
    ***REMOVED***;
      if(unionPay.number && unionPay.pattern) {
        return true;
    ***REMOVED***

      // verify luhn, adapted from  <https://gist.github.com/2134376>
      var
        length        = cardNumber.length,
        multiple      = 0,
        producedValue = [
          [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
          [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]
    ***REMOVED***,
        sum           = 0
      ;
      while (length--) {
        sum += producedValue[multiple][parseInt(cardNumber.charAt(length), 10)];
        multiple ^= 1;
    ***REMOVED***
      return (sum % 10 === 0 && sum > 0);
  ***REMOVED***

    minCount: function(value, minCount) {
      if(minCount == 0) {
        return true;
    ***REMOVED***
      if(minCount == 1) {
        return (value !== '');
    ***REMOVED***
      return (value.split(',').length >= minCount);
  ***REMOVED***

    exactCount: function(value, exactCount) {
      if(exactCount == 0) {
        return (value === '');
    ***REMOVED***
      if(exactCount == 1) {
        return (value !== '' && value.search(',') === -1);
    ***REMOVED***
      return (value.split(',').length == exactCount);
  ***REMOVED***

    maxCount: function(value, maxCount) {
      if(maxCount == 0) {
        return false;
    ***REMOVED***
      if(maxCount == 1) {
        return (value.search(',') === -1);
    ***REMOVED***
      return (value.split(',').length <= maxCount);
  ***REMOVED***
***REMOVED***

***REMOVED***;

***REMOVED***)( jQuery, window, document );

/*!
***REMOVED*** # Fomantic-UI - Accordion
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

***REMOVED***;

$.isFunction = $.isFunction || function(obj) {
  return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.accordion = function(parameters) {
  var
    $allModules     = $(this),

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    returnedValue
  ;
  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {***REMOVED***, $.fn.accordion.settings, parameters)
          : $.extend({***REMOVED***, $.fn.accordion.settings),

        className       = settings.className,
        namespace       = settings.namespace,
        selector        = settings.selector,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,
        moduleSelector  = $allModules.selector || '',

        $module  = $(this),
        $title   = $module.find(selector.title),
        $content = $module.find(selector.content),

        element  = this,
        instance = $module.data(moduleNamespace),
        observer,
        module
      ;

      module = {

        initialize: function() {
          module.debug('Initializing', $module);
          module.bind.events();
          if(settings.observeChanges) {
            module.observeChanges();
        ***REMOVED***
          module.instantiate();
 ***REMOVED*****REMOVED***

        instantiate: function() {
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
 ***REMOVED*****REMOVED***

        destroy: function() {
          module.debug('Destroying previous instance', $module);
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
 ***REMOVED*****REMOVED***

        refresh: function() {
          $title   = $module.find(selector.title);
          $content = $module.find(selector.content);
 ***REMOVED*****REMOVED***

        observeChanges: function() {
          if('MutationObserver' in window) {
            observer = new MutationObserver(function(mutations) {
              module.debug('DOM tree modified, updating selector cache');
              module.refresh();
          ***REMOVED***);
            observer.observe(element, {
              childList : true,
              subtree   : true
          ***REMOVED***);
            module.debug('Setting up mutation observer', observer);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        bind: {
          events: function() {
            module.debug('Binding delegated events');
            $module
              .on(settings.on + eventNamespace, selector.trigger, module.event.click)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        event: {
          click: function() {
            module.toggle.call(this);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        toggle: function(query) {
          var
            $activeTitle = (query !== undefined)
              ? (typeof query === 'number')
                ? $title.eq(query)
                : $(query).closest(selector.title)
              : $(this).closest(selector.title),
            $activeContent = $activeTitle.next($content),
            isAnimating = $activeContent.hasClass(className.animating),
            isActive    = $activeContent.hasClass(className.active),
            isOpen      = (isActive && !isAnimating),
            isOpening   = (!isActive && isAnimating)
          ;
          module.debug('Toggling visibility of content', $activeTitle);
          if(isOpen || isOpening) {
            if(settings.collapsible) {
              module.close.call($activeTitle);
          ***REMOVED***
            else {
              module.debug('Cannot close accordion content collapsing is disabled');
          ***REMOVED***
        ***REMOVED***
          else {
            module.open.call($activeTitle);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        open: function(query) {
          var
            $activeTitle = (query !== undefined)
              ? (typeof query === 'number')
                ? $title.eq(query)
                : $(query).closest(selector.title)
              : $(this).closest(selector.title),
            $activeContent = $activeTitle.next($content),
            isAnimating = $activeContent.hasClass(className.animating),
            isActive    = $activeContent.hasClass(className.active),
            isOpen      = (isActive || isAnimating)
          ;
          if(isOpen) {
            module.debug('Accordion already open, skipping', $activeContent);
            return;
        ***REMOVED***
          module.debug('Opening accordion content', $activeTitle);
          settings.onOpening.call($activeContent);
          settings.onChanging.call($activeContent);
          if(settings.exclusive) {
            module.closeOthers.call($activeTitle);
        ***REMOVED***
          $activeTitle
            .addClass(className.active)
          ;
          $activeContent
            .stop(true, true)
            .addClass(className.animating)
          ;
          if(settings.animateChildren) {
            if($.fn.transition !== undefined && $module.transition('is supported')) {
              $activeContent
                .children()
                  .transition({
                    animation        : 'fade in',
                    queue            : false,
                    useFailSafe      : true,
                    debug            : settings.debug,
                    verbose          : settings.verbose,
                    duration         : settings.duration,
                    skipInlineHidden : true,
                    onComplete: function() {
                      $activeContent.children().removeClass(className.transition);
                  ***REMOVED***
                ***REMOVED***)
              ;
          ***REMOVED***
            else {
              $activeContent
                .children()
                  .stop(true, true)
                  .animate({
                    opacity: 1
      ***REMOVED*****REMOVED*****REMOVED*** settings.duration, module.resetOpacity)
              ;
          ***REMOVED***
        ***REMOVED***
          $activeContent
            .slideDown(settings.duration, settings.easing, function() {
              $activeContent
                .removeClass(className.animating)
                .addClass(className.active)
              ;
              module.reset.display.call(this);
              settings.onOpen.call(this);
              settings.onChange.call(this);
          ***REMOVED***)
          ;
 ***REMOVED*****REMOVED***

        close: function(query) {
          var
            $activeTitle = (query !== undefined)
              ? (typeof query === 'number')
                ? $title.eq(query)
                : $(query).closest(selector.title)
              : $(this).closest(selector.title),
            $activeContent = $activeTitle.next($content),
            isAnimating    = $activeContent.hasClass(className.animating),
            isActive       = $activeContent.hasClass(className.active),
            isOpening      = (!isActive && isAnimating),
            isClosing      = (isActive && isAnimating)
          ;
          if((isActive || isOpening) && !isClosing) {
            module.debug('Closing accordion content', $activeContent);
            settings.onClosing.call($activeContent);
            settings.onChanging.call($activeContent);
            $activeTitle
              .removeClass(className.active)
            ;
            $activeContent
              .stop(true, true)
              .addClass(className.animating)
            ;
            if(settings.animateChildren) {
              if($.fn.transition !== undefined && $module.transition('is supported')) {
                $activeContent
                  .children()
                    .transition({
                      animation        : 'fade out',
                      queue            : false,
                      useFailSafe      : true,
                      debug            : settings.debug,
                      verbose          : settings.verbose,
                      duration         : settings.duration,
                      skipInlineHidden : true
                  ***REMOVED***)
                ;
            ***REMOVED***
              else {
                $activeContent
                  .children()
                    .stop(true, true)
                    .animate({
                      opacity: 0
        ***REMOVED*****REMOVED*****REMOVED*** settings.duration, module.resetOpacity)
                ;
            ***REMOVED***
          ***REMOVED***
            $activeContent
              .slideUp(settings.duration, settings.easing, function() {
                $activeContent
                  .removeClass(className.animating)
                  .removeClass(className.active)
                ;
                module.reset.display.call(this);
                settings.onClose.call(this);
                settings.onChange.call(this);
            ***REMOVED***)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        closeOthers: function(index) {
          var
            $activeTitle = (index !== undefined)
              ? $title.eq(index)
              : $(this).closest(selector.title),
            $parentTitles    = $activeTitle.parents(selector.content).prev(selector.title),
            $activeAccordion = $activeTitle.closest(selector.accordion),
            activeSelector   = selector.title + '.' + className.active + ':visible',
            activeContent    = selector.content + '.' + className.active + ':visible',
            $openTitles,
            $nestedTitles,
            $openContents
          ;
          if(settings.closeNested) {
            $openTitles   = $activeAccordion.find(activeSelector).not($parentTitles);
            $openContents = $openTitles.next($content);
        ***REMOVED***
          else {
            $openTitles   = $activeAccordion.find(activeSelector).not($parentTitles);
            $nestedTitles = $activeAccordion.find(activeContent).find(activeSelector).not($parentTitles);
            $openTitles   = $openTitles.not($nestedTitles);
            $openContents = $openTitles.next($content);
        ***REMOVED***
          if( ($openTitles.length > 0) ) {
            module.debug('Exclusive enabled, closing other content', $openTitles);
            $openTitles
              .removeClass(className.active)
            ;
            $openContents
              .removeClass(className.animating)
              .stop(true, true)
            ;
            if(settings.animateChildren) {
              if($.fn.transition !== undefined && $module.transition('is supported')) {
                $openContents
                  .children()
                    .transition({
                      animation        : 'fade out',
                      useFailSafe      : true,
                      debug            : settings.debug,
                      verbose          : settings.verbose,
                      duration         : settings.duration,
                      skipInlineHidden : true
                  ***REMOVED***)
                ;
            ***REMOVED***
              else {
                $openContents
                  .children()
                    .stop(true, true)
                    .animate({
                      opacity: 0
        ***REMOVED*****REMOVED*****REMOVED*** settings.duration, module.resetOpacity)
                ;
            ***REMOVED***
          ***REMOVED***
            $openContents
              .slideUp(settings.duration , settings.easing, function() {
                $(this).removeClass(className.active);
                module.reset.display.call(this);
            ***REMOVED***)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        reset: {

          display: function() {
            module.verbose('Removing inline display from element', this);
            $(this).css('display', '');
            if( $(this).attr('style') === '') {
              $(this)
                .attr('style', '')
                .removeAttr('style')
              ;
          ***REMOVED***
   ***REMOVED*****REMOVED***

          opacity: function() {
            module.verbose('Removing inline opacity from element', this);
            $(this).css('opacity', '');
            if( $(this).attr('style') === '') {
              $(this)
                .attr('style', '')
                .removeAttr('style')
              ;
          ***REMOVED***
   ***REMOVED*****REMOVED***

 ***REMOVED*****REMOVED***

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            if($.isPlainObject(settings[name])) {
              $.extend(true, settings[name], value);
          ***REMOVED***
            else {
              settings[name] = value;
          ***REMOVED***
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          module.debug('Changing internal', name, value);
          if(value !== undefined) {
            if( $.isPlainObject(name) ) {
              $.extend(true, module, name);
          ***REMOVED***
            else {
              module[name] = value;
          ***REMOVED***
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                module.error(error.method, query);
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***
          if(Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***;
      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
      ***REMOVED***
        module.invoke(query);
    ***REMOVED***
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
      ***REMOVED***
        module.initialize();
    ***REMOVED***
  ***REMOVED***)
  ;
  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
***REMOVED***;

$.fn.accordion.settings = {

  name            : 'Accordion',
  namespace       : 'accordion',

  silent          : false,
  debug           : false,
  verbose         : false,
  performance     : true,

  on              : 'click', // event on title that opens accordion

  observeChanges  : true,  // whether accordion should automatically refresh on DOM insertion

  exclusive       : true,  // whether a single accordion content panel should be open at once
  collapsible     : true,  // whether accordion content can be closed
  closeNested     : false, // whether nested content should be closed when a panel is closed
  animateChildren : true,  // whether children opacity should be animated

  duration        : 350, // duration of animation
  easing          : 'easeOutQuad', // easing equation for animation

  onOpening       : function(){***REMOVED***, // callback before open animation
  onClosing       : function(){***REMOVED***, // callback before closing animation
  onChanging      : function(){***REMOVED***, // callback before closing or opening animation

  onOpen          : function(){***REMOVED***, // callback after open animation
  onClose         : function(){***REMOVED***, // callback after closing animation
  onChange        : function(){***REMOVED***, // callback after closing or opening animation

  error: {
    method : 'The method you called is not defined'
***REMOVED***

  className   : {
    active    : 'active',
    animating : 'animating',
    transition: 'transition'
***REMOVED***

  selector    : {
    accordion : '.accordion',
    title     : '.title',
    trigger   : '.title',
    content   : '.content'
***REMOVED***

***REMOVED***;

// Adds easing
$.extend( $.easing, {
  easeOutQuad: function (x, t, b, c, d) {
    return -c***REMOVED***(t/=d)*(t-2) + b;
***REMOVED***
***REMOVED***);

***REMOVED***)( jQuery, window, document );


/*!
***REMOVED*** # Fomantic-UI - Calendar
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

***REMOVED***;

$.isFunction = $.isFunction || function(obj) {
  return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.calendar = function(parameters) {
  var
    $allModules    = $(this),

    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue,
    timeGapTable = {
      '5': {'row': 4, 'column': 3 ***REMOVED***,
      '10': {'row': 3, 'column': 2 ***REMOVED***,
      '15': {'row': 2, 'column': 2 ***REMOVED***,
      '20': {'row': 3, 'column': 1 ***REMOVED***,
      '30': {'row': 2, 'column': 1 ***REMOVED***
  ***REMOVED***
  ;

  $allModules
    .each(function () {
      var
        settings = ( $.isPlainObject(parameters) )
          ? $.extend(true, {***REMOVED***, $.fn.calendar.settings, parameters)
          : $.extend({***REMOVED***, $.fn.calendar.settings),

        className = settings.className,
        namespace = settings.namespace,
        selector = settings.selector,
        formatter = settings.formatter,
        parser = settings.parser,
        metadata = settings.metadata,
        timeGap = timeGapTable[settings.minTimeGap],
        error = settings.error,

        eventNamespace = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module = $(this),
        $input = $module.find(selector.input),
        $container = $module.find(selector.popup),
        $activator = $module.find(selector.activator),

        element = this,
        instance = $module.data(moduleNamespace),

        isTouch,
        isTouchDown = false,
        focusDateUsedForRange = false,
        module
      ;

      module = {

        initialize: function () {
          module.debug('Initializing calendar for', element, $module);

          isTouch = module.get.isTouch();
          module.setup.config();
          module.setup.popup();
          module.setup.inline();
          module.setup.input();
          module.setup.date();
          module.create.calendar();

          module.bind.events();
          module.instantiate();
 ***REMOVED*****REMOVED***

        instantiate: function () {
          module.verbose('Storing instance of calendar');
          instance = module;
          $module.data(moduleNamespace, instance);
 ***REMOVED*****REMOVED***

        destroy: function () {
          module.verbose('Destroying previous calendar for', element);
          $module.removeData(moduleNamespace);
          module.unbind.events();
 ***REMOVED*****REMOVED***

        setup: {
          config: function () {
            if (module.get.minDate() !== null) {
              module.set.minDate($module.data(metadata.minDate));
          ***REMOVED***
            if (module.get.maxDate() !== null) {
              module.set.maxDate($module.data(metadata.maxDate));
          ***REMOVED***
            module.setting('type', module.get.type());
   ***REMOVED*****REMOVED***
          popup: function () {
            if (settings.inline) {
              return;
          ***REMOVED***
            if (!$activator.length) {
              $activator = $module.children().first();
              if (!$activator.length) {
                return;
            ***REMOVED***
          ***REMOVED***
            if ($.fn.popup === undefined) {
              module.error(error.popup);
              return;
          ***REMOVED***
            if (!$container.length) {
              //prepend the popup element to the activator's parent so that it has less chance of messing with
              //the styling (eg input action button needs to be the last child to have correct border radius)
              var $activatorParent = $activator.parent(),
                  domPositionFunction = $activatorParent.closest(selector.append).length !== 0 ? 'appendTo' : 'prependTo';
              $container = $('<div/>').addClass(className.popup)[domPositionFunction]($activatorParent);
          ***REMOVED***
            $container.addClass(className.calendar);
            var onVisible = settings.onVisible;
            var onHidden = settings.onHidden;
            if (!$input.length) {
              //no input, $container has to handle focus/blur
              $container.attr('tabindex', '0');
              onVisible = function () {
                module.focus();
                return settings.onVisible.apply($container, arguments);
            ***REMOVED***;
              onHidden = function () {
                module.blur();
                return settings.onHidden.apply($container, arguments);
            ***REMOVED***;
          ***REMOVED***
            var onShow = function () {
              //reset the focus date onShow
              module.set.focusDate(module.get.date());
              module.set.mode(settings.startMode);
              return settings.onShow.apply($container, arguments);
          ***REMOVED***;
            var on = settings.on || ($input.length ? 'focus' : 'click');
            var options = $.extend({***REMOVED***, settings.popupOptions, {
              popup: $container,
              on: on,
              hoverable: on === 'hover',
              onShow: onShow,
              onVisible: onVisible,
              onHide: settings.onHide,
              onHidden: onHidden
          ***REMOVED***);
            module.popup(options);
   ***REMOVED*****REMOVED***
          inline: function () {
            if ($activator.length && !settings.inline) {
              return;
          ***REMOVED***
            $container = $('<div/>').addClass(className.calendar).appendTo($module);
            if (!$input.length) {
              $container.attr('tabindex', '0');
          ***REMOVED***
   ***REMOVED*****REMOVED***
          input: function () {
            if (settings.touchReadonly && $input.length && isTouch) {
              $input.prop('readonly', true);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          date: function () {
            var date;
            if (settings.initialDate) {
              date = parser.date(settings.initialDate, settings);
          ***REMOVED*** else if ($module.data(metadata.date) !== undefined) {
              date = parser.date($module.data(metadata.date), settings);
          ***REMOVED*** else if ($input.length) {
              date = parser.date($input.val(), settings);
          ***REMOVED***
            module.set.date(date, settings.formatInput, false);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        create: {
          calendar: function () {
            var i, r, c, p, row, cell, pageGrid;

            var mode = module.get.mode();
            var today = new Date();
            var date = module.get.date();
            var focusDate = module.get.focusDate();
            var display = focusDate || date || settings.initialDate || today;
            display = module.helper.dateInRange(display);

            if (!focusDate) {
              focusDate = display;
              module.set.focusDate(focusDate, false, false);
          ***REMOVED***

            var isYear = mode === 'year';
            var isMonth = mode === 'month';
            var isDay = mode === 'day';
            var isHour = mode === 'hour';
            var isMinute = mode === 'minute';
            var isTimeOnly = settings.type === 'time';

            var multiMonth = Math.max(settings.multiMonth, 1);
            var monthOffset = !isDay ? 0 : module.get.monthOffset();

            var minute = display.getMinutes();
            var hour = display.getHours();
            var day = display.getDate();
            var startMonth = display.getMonth() + monthOffset;
            var year = display.getFullYear();

            var columns = isDay ? settings.showWeekNumbers ? 8 : 7 : isHour ? 4 : timeGap['column'];
            var rows = isDay || isHour ? 6 : timeGap['row'];
            var pages = isDay ? multiMonth : 1;

            var container = $container;
            var tooltipPosition = container.hasClass("left") ? "right center" : "left center";
            container.empty();
            if (pages > 1) {
              pageGrid = $('<div/>').addClass(className.grid).appendTo(container);
          ***REMOVED***

            for (p = 0; p < pages; p++) {
              if (pages > 1) {
                var pageColumn = $('<div/>').addClass(className.column).appendTo(pageGrid);
                container = pageColumn;
            ***REMOVED***

              var month = startMonth + p;
              var firstMonthDayColumn = (new Date(year, month, 1).getDay() - settings.firstDayOfWeek % 7 + 7) % 7;
              if (!settings.constantHeight && isDay) {
                var requiredCells = new Date(year, month + 1, 0).getDate() + firstMonthDayColumn;
                rows = Math.ceil(requiredCells / 7);
            ***REMOVED***

              var yearChange = isYear ? 10 : isMonth ? 1 : 0;
              var monthChange = isDay ? 1 : 0;
              var dayChange = isHour || isMinute ? 1 : 0;
              var prevNextDay = isHour || isMinute ? day : 1;
              var prevDate = new Date(year - yearChange, month - monthChange, prevNextDay - dayChange, hour);
              var nextDate = new Date(year + yearChange, month + monthChange, prevNextDay + dayChange, hour);

              var prevLast = isYear ? new Date(Math.ceil(year / 10)***REMOVED*** 10 - 9, 0, 0) :
                isMonth ? new Date(year, 0, 0) : isDay ? new Date(year, month, 0) : new Date(year, month, day, -1);
              var nextFirst = isYear ? new Date(Math.ceil(year / 10)***REMOVED*** 10 + 1, 0, 1) :
                isMonth ? new Date(year + 1, 0, 1) : isDay ? new Date(year, month + 1, 1) : new Date(year, month, day + 1);

              var tempMode = mode;
              if (isDay && settings.showWeekNumbers){
                tempMode += ' andweek';
            ***REMOVED***
              var table = $('<table/>').addClass(className.table).addClass(tempMode).appendTo(container);
              var textColumns = columns;
              //no header for time-only mode
              if (!isTimeOnly) {
                var thead = $('<thead/>').appendTo(table);

                row = $('<tr/>').appendTo(thead);
                cell = $('<th/>').attr('colspan', '' + columns).appendTo(row);

                var headerDate = isYear || isMonth ? new Date(year, 0, 1) :
                  isDay ? new Date(year, month, 1) : new Date(year, month, day, hour, minute);
                var headerText = $('<span/>').addClass(className.link).appendTo(cell);
                headerText.text(formatter.header(headerDate, mode, settings));
                var newMode = isMonth ? (settings.disableYear ? 'day' : 'year') :
                  isDay ? (settings.disableMonth ? 'year' : 'month') : 'day';
                headerText.data(metadata.mode, newMode);

                if (p === 0) {
                  var prev = $('<span/>').addClass(className.prev).appendTo(cell);
                  prev.data(metadata.focusDate, prevDate);
                  prev.toggleClass(className.disabledCell, !module.helper.isDateInRange(prevLast, mode));
                  $('<i/>').addClass(className.prevIcon).appendTo(prev);
              ***REMOVED***

                if (p === pages - 1) {
                  var next = $('<span/>').addClass(className.next).appendTo(cell);
                  next.data(metadata.focusDate, nextDate);
                  next.toggleClass(className.disabledCell, !module.helper.isDateInRange(nextFirst, mode));
                  $('<i/>').addClass(className.nextIcon).appendTo(next);
              ***REMOVED***
                if (isDay) {
                  row = $('<tr/>').appendTo(thead);
                  if(settings.showWeekNumbers) {
                      cell = $('<th/>').appendTo(row);
                      cell.text(settings.text.weekNo);
                      cell.addClass(className.weekCell);
                      textColumns--;
                ***REMOVED***
                  for (i = 0; i < textColumns; i++) {
                    cell = $('<th/>').appendTo(row);
                    cell.text(formatter.dayColumnHeader((i + settings.firstDayOfWeek) % 7, settings));
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***

              var tbody = $('<tbody/>').appendTo(table);
              i = isYear ? Math.ceil(year / 10)***REMOVED*** 10 - 9 : isDay ? 1 - firstMonthDayColumn : 0;
              for (r = 0; r < rows; r++) {
                row = $('<tr/>').appendTo(tbody);
                if(isDay && settings.showWeekNumbers){
                    cell = $('<th/>').appendTo(row);
                    cell.text(module.get.weekOfYear(year,month,i+1-settings.firstDayOfWeek));
                    cell.addClass(className.weekCell);
              ***REMOVED***
                for (c = 0; c < textColumns; c++, i++) {
                  var cellDate = isYear ? new Date(i, month, 1, hour, minute) :
                    isMonth ? new Date(year, i, 1, hour, minute) : isDay ? new Date(year, month, i, hour, minute) :
                      isHour ? new Date(year, month, day, i) : new Date(year, month, day, hour, i***REMOVED*** settings.minTimeGap);
                  var cellText = isYear ? i :
                    isMonth ? settings.text.monthsShort[i] : isDay ? cellDate.getDate() :
                      formatter.time(cellDate, settings, true);
                  cell = $('<td/>').addClass(className.cell).appendTo(row);
                  cell.text(cellText);
                  cell.data(metadata.date, cellDate);
                  var adjacent = isDay && cellDate.getMonth() !== ((month + 12) % 12);
                  var disabled = (!settings.selectAdjacentDays && adjacent) || !module.helper.isDateInRange(cellDate, mode) || settings.isDisabled(cellDate, mode) || module.helper.isDisabled(cellDate, mode) || !module.helper.isEnabled(cellDate, mode);
                  if (disabled) {
                    var disabledDate = module.helper.findDayAsObject(cellDate, mode, settings.disabledDates);
                    if (disabledDate !== null && disabledDate[metadata.message]) {
                      cell.attr("data-tooltip", disabledDate[metadata.message]);
                      cell.attr("data-position", tooltipPosition);
                  ***REMOVED***
                ***REMOVED*** else {
                    var eventDate = module.helper.findDayAsObject(cellDate, mode, settings.eventDates);
                    if (eventDate !== null) {
                      cell.addClass(eventDate[metadata.class] || settings.eventClass);
                      if (eventDate[metadata.message]) {
                        cell.attr("data-tooltip", eventDate[metadata.message]);
                        cell.attr("data-position", tooltipPosition);
                    ***REMOVED***
                  ***REMOVED***
                ***REMOVED***
                  var active = module.helper.dateEqual(cellDate, date, mode);
                  var isToday = module.helper.dateEqual(cellDate, today, mode);
                  cell.toggleClass(className.adjacentCell, adjacent);
                  cell.toggleClass(className.disabledCell, disabled);
                  cell.toggleClass(className.activeCell, active && !adjacent);
                  if (!isHour && !isMinute) {
                    cell.toggleClass(className.todayCell, !adjacent && isToday);
                ***REMOVED***

                  // Allow for external modifications of each cell
                  var cellOptions = {
                    mode: mode,
                    adjacent: adjacent,
                    disabled: disabled,
                    active: active,
                    today: isToday
                ***REMOVED***;
                  formatter.cell(cell, cellDate, cellOptions);

                  if (module.helper.dateEqual(cellDate, focusDate, mode)) {
                    //ensure that the focus date is exactly equal to the cell date
                    //so that, if selected, the correct value is set
                    module.set.focusDate(cellDate, false, false);
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***

              if (settings.today) {
                var todayRow = $('<tr/>').appendTo(tbody);
                var todayButton = $('<td/>').attr('colspan', '' + columns).addClass(className.today).appendTo(todayRow);
                todayButton.text(formatter.today(settings));
                todayButton.data(metadata.date, today);
            ***REMOVED***

              module.update.focus(false, table);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        update: {
          focus: function (updateRange, container) {
            container = container || $container;
            var mode = module.get.mode();
            var date = module.get.date();
            var focusDate = module.get.focusDate();
            var startDate = module.get.startDate();
            var endDate = module.get.endDate();
            var rangeDate = (updateRange ? focusDate : null) || date || (!isTouch ? focusDate : null);

            container.find('td').each(function () {
              var cell = $(this);
              var cellDate = cell.data(metadata.date);
              if (!cellDate) {
                return;
            ***REMOVED***
              var disabled = cell.hasClass(className.disabledCell);
              var active = cell.hasClass(className.activeCell);
              var adjacent = cell.hasClass(className.adjacentCell);
              var focused = module.helper.dateEqual(cellDate, focusDate, mode);
              var inRange = !rangeDate ? false :
                ((!!startDate && module.helper.isDateInRange(cellDate, mode, startDate, rangeDate)) ||
                (!!endDate && module.helper.isDateInRange(cellDate, mode, rangeDate, endDate)));
              cell.toggleClass(className.focusCell, focused && (!isTouch || isTouchDown) && (!adjacent || (settings.selectAdjacentDays && adjacent)) && !disabled);

              if (module.helper.isTodayButton(cell)) {
                return;
            ***REMOVED***
              cell.toggleClass(className.rangeCell, inRange && !active && !disabled);
          ***REMOVED***);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        refresh: function () {
          module.create.calendar();
 ***REMOVED*****REMOVED***

        bind: {
          events: function () {
            module.debug('Binding events');
            $container.on('mousedown' + eventNamespace, module.event.mousedown);
            $container.on('touchstart' + eventNamespace, module.event.mousedown);
            $container.on('mouseup' + eventNamespace, module.event.mouseup);
            $container.on('touchend' + eventNamespace, module.event.mouseup);
            $container.on('mouseover' + eventNamespace, module.event.mouseover);
            if ($input.length) {
              $input.on('input' + eventNamespace, module.event.inputChange);
              $input.on('focus' + eventNamespace, module.event.inputFocus);
              $input.on('blur' + eventNamespace, module.event.inputBlur);
              $input.on('click' + eventNamespace, module.event.inputClick);
              $input.on('keydown' + eventNamespace, module.event.keydown);
          ***REMOVED*** else {
              $container.on('keydown' + eventNamespace, module.event.keydown);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        unbind: {
          events: function () {
            module.debug('Unbinding events');
            $container.off(eventNamespace);
            if ($input.length) {
              $input.off(eventNamespace);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        event: {
          mouseover: function (event) {
            var target = $(event.target);
            var date = target.data(metadata.date);
            var mousedown = event.buttons === 1;
            if (date) {
              module.set.focusDate(date, false, true, mousedown);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          mousedown: function (event) {
            if ($input.length) {
              //prevent the mousedown on the calendar causing the input to lose focus
              event.preventDefault();
          ***REMOVED***
            isTouchDown = event.type.indexOf('touch') >= 0;
            var target = $(event.target);
            var date = target.data(metadata.date);
            if (date) {
              module.set.focusDate(date, false, true, true);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          mouseup: function (event) {
            //ensure input has focus so that it receives keydown events for calendar navigation
            module.focus();
            event.preventDefault();
            event.stopPropagation();
            isTouchDown = false;
            var target = $(event.target);
            if (target.hasClass("disabled")) {
              return;
          ***REMOVED***
            var parent = target.parent();
            if (parent.data(metadata.date) || parent.data(metadata.focusDate) || parent.data(metadata.mode)) {
              //clicked on a child element, switch to parent (used when clicking directly on prev/next <i> icon element)
              target = parent;
          ***REMOVED***
            var date = target.data(metadata.date);
            var focusDate = target.data(metadata.focusDate);
            var mode = target.data(metadata.mode);
            if (date && settings.onSelect.call(element, date, module.get.mode()) !== false) {
              var forceSet = target.hasClass(className.today);
              module.selectDate(date, forceSet);
          ***REMOVED***
            else if (focusDate) {
              module.set.focusDate(focusDate);
          ***REMOVED***
            else if (mode) {
              module.set.mode(mode);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          keydown: function (event) {
            var keyCode = event.which;
            if (keyCode === 27 || keyCode === 9) {
              //esc || tab
              module.popup('hide');
          ***REMOVED***

            if (module.popup('is visible')) {
              if (keyCode === 37 || keyCode === 38 || keyCode === 39 || keyCode === 40) {
                //arrow keys
                var mode = module.get.mode();
                var bigIncrement = mode === 'day' ? 7 : mode === 'hour' ? 4 : mode === 'minute' ? timeGap['column'] : 3;
                var increment = keyCode === 37 ? -1 : keyCode === 38 ? -bigIncrement : keyCode == 39 ? 1 : bigIncrement;
                increment***REMOVED***= mode === 'minute' ? settings.minTimeGap : 1;
                var focusDate = module.get.focusDate() || module.get.date() || new Date();
                var year = focusDate.getFullYear() + (mode === 'year' ? increment : 0);
                var month = focusDate.getMonth() + (mode === 'month' ? increment : 0);
                var day = focusDate.getDate() + (mode === 'day' ? increment : 0);
                var hour = focusDate.getHours() + (mode === 'hour' ? increment : 0);
                var minute = focusDate.getMinutes() + (mode === 'minute' ? increment : 0);
                var newFocusDate = new Date(year, month, day, hour, minute);
                if (settings.type === 'time') {
                  newFocusDate = module.helper.mergeDateTime(focusDate, newFocusDate);
              ***REMOVED***
                if (module.helper.isDateInRange(newFocusDate, mode)) {
                  module.set.focusDate(newFocusDate);
              ***REMOVED***
            ***REMOVED*** else if (keyCode === 13) {
                //enter
                var mode = module.get.mode();
                var date = module.get.focusDate();
                if (date && !settings.isDisabled(date, mode) && !module.helper.isDisabled(date, mode) && module.helper.isEnabled(date, mode)) {
                  module.selectDate(date);
              ***REMOVED***
                //disable form submission:
                event.preventDefault();
                event.stopPropagation();
            ***REMOVED***
          ***REMOVED***

            if (keyCode === 38 || keyCode === 40) {
              //arrow-up || arrow-down
              event.preventDefault(); //don't scroll
              module.popup('show');
          ***REMOVED***
   ***REMOVED*****REMOVED***
          inputChange: function () {
            var val = $input.val();
            var date = parser.date(val, settings);
            module.set.date(date, false);
   ***REMOVED*****REMOVED***
          inputFocus: function () {
            $container.addClass(className.active);
   ***REMOVED*****REMOVED***
          inputBlur: function () {
            $container.removeClass(className.active);
            if (settings.formatInput) {
              var date = module.get.date();
              var text = formatter.datetime(date, settings);
              $input.val(text);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          inputClick: function () {
            module.popup('show');
        ***REMOVED***
 ***REMOVED*****REMOVED***

        get: {
          weekOfYear: function(weekYear,weekMonth,weekDay) {
              // adapted from http://www.merlyn.demon.co.uk/weekcalc.htm
              var ms1d = 864e5, // milliseconds in a day
                  ms7d = 7***REMOVED*** ms1d; // milliseconds in a week

              return function() { // return a closure so constants get calculated only once
                  var DC3 = Date.UTC(weekYear, weekMonth, weekDay + 3) / ms1d, // an Absolute Day Number
                      AWN = Math.floor(DC3 / 7), // an Absolute Week Number
                      Wyr = new Date(AWN***REMOVED*** ms7d).getUTCFullYear();

                  return AWN - Math.floor(Date.UTC(Wyr, 0, 7) / ms7d) + 1;
            ***REMOVED***();
   ***REMOVED*****REMOVED***
          date: function () {
            return module.helper.sanitiseDate($module.data(metadata.date)) || null;
   ***REMOVED*****REMOVED***
          inputDate: function() {
            return $input.val();
   ***REMOVED*****REMOVED***
          focusDate: function () {
            return $module.data(metadata.focusDate) || null;
   ***REMOVED*****REMOVED***
          startDate: function () {
            var startModule = module.get.calendarModule(settings.startCalendar);
            return (startModule ? startModule.get.date() : $module.data(metadata.startDate)) || null;
   ***REMOVED*****REMOVED***
          endDate: function () {
            var endModule = module.get.calendarModule(settings.endCalendar);
            return (endModule ? endModule.get.date() : $module.data(metadata.endDate)) || null;
   ***REMOVED*****REMOVED***
          minDate: function() {
            return $module.data(metadata.minDate) || null;
   ***REMOVED*****REMOVED***
          maxDate: function() {
            return $module.data(metadata.maxDate) || null;
   ***REMOVED*****REMOVED***
          monthOffset: function () {
            return $module.data(metadata.monthOffset) || 0;
   ***REMOVED*****REMOVED***
          mode: function () {
            //only returns valid modes for the current settings
            var mode = $module.data(metadata.mode) || settings.startMode;
            var validModes = module.get.validModes();
            if ($.inArray(mode, validModes) >= 0) {
              return mode;
          ***REMOVED***
            return settings.type === 'time' ? 'hour' :
              settings.type === 'month' ? 'month' :
                settings.type === 'year' ? 'year' : 'day';
   ***REMOVED*****REMOVED***
          type: function() {
            return $module.data(metadata.type) || settings.type;
   ***REMOVED*****REMOVED***
          validModes: function () {
            var validModes = [];
            if (settings.type !== 'time') {
              if (!settings.disableYear || settings.type === 'year') {
                validModes.push('year');
            ***REMOVED***
              if (!(settings.disableMonth || settings.type === 'year') || settings.type === 'month') {
                validModes.push('month');
            ***REMOVED***
              if (settings.type.indexOf('date') >= 0) {
                validModes.push('day');
            ***REMOVED***
          ***REMOVED***
            if (settings.type.indexOf('time') >= 0) {
              validModes.push('hour');
              if (!settings.disableMinute) {
                validModes.push('minute');
            ***REMOVED***
          ***REMOVED***
            return validModes;
   ***REMOVED*****REMOVED***
          isTouch: function () {
            try {
              document.createEvent('TouchEvent');
              return true;
          ***REMOVED***
            catch (e) {
              return false;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          calendarModule: function (selector) {
            if (!selector) {
              return null;
          ***REMOVED***
            if (!(selector instanceof $)) {
              selector = $(selector).first();
          ***REMOVED***
            //assume range related calendars are using the same namespace
            return selector.data(moduleNamespace);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        set: {
          date: function (date, updateInput, fireChange) {
            updateInput = updateInput !== false;
            fireChange = fireChange !== false;
            date = module.helper.sanitiseDate(date);
            date = module.helper.dateInRange(date);

            var mode = module.get.mode();
            var text = formatter.datetime(date, settings);

            if (fireChange && settings.onBeforeChange.call(element, date, text, mode) === false) {
              return false;
          ***REMOVED***

            module.set.focusDate(date);

            if (settings.isDisabled(date, mode)) {
              return false;
          ***REMOVED***

            var endDate = module.get.endDate();
            if (!!endDate && !!date && date > endDate) {
              //selected date is greater than end date in range, so clear end date
              module.set.endDate(undefined);
          ***REMOVED***
            module.set.dataKeyValue(metadata.date, date);

            if (updateInput && $input.length) {
              $input.val(text);
          ***REMOVED***

            if (fireChange) {
              settings.onChange.call(element, date, text, mode);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          startDate: function (date, refreshCalendar) {
            date = module.helper.sanitiseDate(date);
            var startModule = module.get.calendarModule(settings.startCalendar);
            if (startModule) {
              startModule.set.date(date);
          ***REMOVED***
            module.set.dataKeyValue(metadata.startDate, date, refreshCalendar);
   ***REMOVED*****REMOVED***
          endDate: function (date, refreshCalendar) {
            date = module.helper.sanitiseDate(date);
            var endModule = module.get.calendarModule(settings.endCalendar);
            if (endModule) {
              endModule.set.date(date);
          ***REMOVED***
            module.set.dataKeyValue(metadata.endDate, date, refreshCalendar);
   ***REMOVED*****REMOVED***
          focusDate: function (date, refreshCalendar, updateFocus, updateRange) {
            date = module.helper.sanitiseDate(date);
            date = module.helper.dateInRange(date);
            var isDay = module.get.mode() === 'day';
            var oldFocusDate = module.get.focusDate();
            if (isDay && date && oldFocusDate) {
              var yearDelta = date.getFullYear() - oldFocusDate.getFullYear();
              var monthDelta = yearDelta***REMOVED*** 12 + date.getMonth() - oldFocusDate.getMonth();
              if (monthDelta) {
                var monthOffset = module.get.monthOffset() - monthDelta;
                module.set.monthOffset(monthOffset, false);
            ***REMOVED***
          ***REMOVED***
            var changed = module.set.dataKeyValue(metadata.focusDate, date, refreshCalendar);
            updateFocus = (updateFocus !== false && changed && refreshCalendar === false) || focusDateUsedForRange != updateRange;
            focusDateUsedForRange = updateRange;
            if (updateFocus) {
              module.update.focus(updateRange);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          minDate: function (date) {
            date = module.helper.sanitiseDate(date);
            if (settings.maxDate !== null && settings.maxDate <= date) {
              module.verbose('Unable to set minDate variable bigger that maxDate variable', date, settings.maxDate);
          ***REMOVED*** else {
              module.setting('minDate', date);
              module.set.dataKeyValue(metadata.minDate, date);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          maxDate: function (date) {
            date = module.helper.sanitiseDate(date);
            if (settings.minDate !== null && settings.minDate >= date) {
              module.verbose('Unable to set maxDate variable lower that minDate variable', date, settings.minDate);
          ***REMOVED*** else {
              module.setting('maxDate', date);
              module.set.dataKeyValue(metadata.maxDate, date);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          monthOffset: function (monthOffset, refreshCalendar) {
            var multiMonth = Math.max(settings.multiMonth, 1);
            monthOffset = Math.max(1 - multiMonth, Math.min(0, monthOffset));
            module.set.dataKeyValue(metadata.monthOffset, monthOffset, refreshCalendar);
   ***REMOVED*****REMOVED***
          mode: function (mode, refreshCalendar) {
            module.set.dataKeyValue(metadata.mode, mode, refreshCalendar);
   ***REMOVED*****REMOVED***
          dataKeyValue: function (key, value, refreshCalendar) {
            var oldValue = $module.data(key);
            var equal = oldValue === value || (oldValue <= value && oldValue >= value); //equality test for dates and string objects
            if (value) {
              $module.data(key, value);
          ***REMOVED*** else {
              $module.removeData(key);
          ***REMOVED***
            refreshCalendar = refreshCalendar !== false && !equal;
            if (refreshCalendar) {
              module.refresh();
          ***REMOVED***
            return !equal;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        selectDate: function (date, forceSet) {
          module.verbose('New date selection', date);
          var mode = module.get.mode();
          var complete = forceSet || mode === 'minute' ||
            (settings.disableMinute && mode === 'hour') ||
            (settings.type === 'date' && mode === 'day') ||
            (settings.type === 'month' && mode === 'month') ||
            (settings.type === 'year' && mode === 'year');
          if (complete) {
            var canceled = module.set.date(date) === false;
            if (!canceled && settings.closable) {
              module.popup('hide');
              //if this is a range calendar, show the end date calendar popup and focus the input
              var endModule = module.get.calendarModule(settings.endCalendar);
              if (endModule) {
                endModule.popup('show');
                endModule.focus();
            ***REMOVED***
          ***REMOVED***
        ***REMOVED*** else {
            var newMode = mode === 'year' ? (!settings.disableMonth ? 'month' : 'day') :
              mode === 'month' ? 'day' : mode === 'day' ? 'hour' : 'minute';
            module.set.mode(newMode);
            if (mode === 'hour' || (mode === 'day' && module.get.date())) {
              //the user has chosen enough to consider a valid date/time has been chosen
              module.set.date(date);
          ***REMOVED*** else {
              module.set.focusDate(date);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        changeDate: function (date) {
          module.set.date(date);
 ***REMOVED*****REMOVED***

        clear: function () {
          module.set.date(undefined);
 ***REMOVED*****REMOVED***

        popup: function () {
          return $activator.popup.apply($activator, arguments);
 ***REMOVED*****REMOVED***

        focus: function () {
          if ($input.length) {
            $input.focus();
        ***REMOVED*** else {
            $container.focus();
        ***REMOVED***
 ***REMOVED*****REMOVED***
        blur: function () {
          if ($input.length) {
            $input.blur();
        ***REMOVED*** else {
            $container.blur();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        helper: {
          isDisabled: function(date, mode) {
            return (mode === 'day' || mode === 'month' || mode === 'year') && ((settings.disabledDaysOfWeek.indexOf(date.getDay()) !== -1) || settings.disabledDates.some(function(d){
              if(typeof d === 'string') {
                d = module.helper.sanitiseDate(d);
            ***REMOVED***
              if (d instanceof Date) {
                return module.helper.dateEqual(date, d, mode);
            ***REMOVED***
              if (d !== null && typeof d === 'object') {
                if (d[metadata.year]) {
                  if (typeof d[metadata.year] === 'number') {
                    return date.getFullYear() == d[metadata.year];
                ***REMOVED*** else if (Array.isArray(d[metadata.year])) {
                    return d[metadata.year].indexOf(date.getFullYear()) > -1;
                ***REMOVED***
              ***REMOVED*** else if (d[metadata.month]) {
                  if (typeof d[metadata.month] === 'number') {
                    return date.getMonth() == d[metadata.month];
                ***REMOVED*** else if (Array.isArray(d[metadata.month])) {
                    return d[metadata.month].indexOf(date.getMonth()) > -1;
                ***REMOVED*** else if (d[metadata.month] instanceof Date) {
                    var sdate = module.helper.sanitiseDate(d[metadata.month]);
                    return (date.getMonth() == sdate.getMonth()) && (date.getFullYear() == sdate.getFullYear())
                ***REMOVED***
              ***REMOVED*** else if (d[metadata.date] && mode === 'day') {
                  if (d[metadata.date] instanceof Date) {
                    return module.helper.dateEqual(date, module.helper.sanitiseDate(d[metadata.date]), mode);
                ***REMOVED*** else if (Array.isArray(d[metadata.date])) {
                    return d[metadata.date].some(function(idate) {
                      return module.helper.dateEqual(date, idate, mode);
                  ***REMOVED***);
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***));
   ***REMOVED*****REMOVED***
          isEnabled: function(date, mode) {
            if (mode === 'day') {
              return settings.enabledDates.length === 0 || settings.enabledDates.some(function(d){
                if(typeof d === 'string') {
                  d = module.helper.sanitiseDate(d);
              ***REMOVED***
                if (d instanceof Date) {
                  return module.helper.dateEqual(date, d, mode);
              ***REMOVED***
                if (d !== null && typeof d === 'object' && d[metadata.date]) {
                  return module.helper.dateEqual(date, module.helper.sanitiseDate(d[metadata.date]), mode);
              ***REMOVED***
            ***REMOVED***);
          ***REMOVED*** else {
              return true;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          findDayAsObject: function(date, mode, dates) {
            if (mode === 'day' || mode === 'month' || mode === 'year') {
              var d;
              for (var i = 0; i < dates.length; i++) {
                d = dates[i];
                if(typeof d === 'string') {
                  d = module.helper.sanitiseDate(d);
              ***REMOVED***
                if (d instanceof Date && module.helper.dateEqual(date, d, mode)) {
                  var dateObject = {***REMOVED***;
                  dateObject[metadata.date] = d;
                  return dateObject;
              ***REMOVED***
                else if (d !== null && typeof d === 'object') {
                  if (d[metadata.year]) {
                    if (typeof d[metadata.year] === 'number' && date.getFullYear() == d[metadata.year]) {
                      return d;
                  ***REMOVED*** else if (Array.isArray(d[metadata.year])) {
                      if (d[metadata.year].indexOf(date.getFullYear()) > -1) {
                        return d;
                    ***REMOVED***
                  ***REMOVED***
                ***REMOVED*** else if (d[metadata.month]) {
                    if (typeof d[metadata.month] === 'number' && date.getMonth() == d[metadata.month]) {
                      return d;
                  ***REMOVED*** else if (Array.isArray(d[metadata.month])) {
                      if (d[metadata.month].indexOf(date.getMonth()) > -1) {
                        return d;
                    ***REMOVED***
                  ***REMOVED*** else if (d[metadata.month] instanceof Date) {
                      var sdate = module.helper.sanitiseDate(d[metadata.month]);
                      if ((date.getMonth() == sdate.getMonth()) && (date.getFullYear() == sdate.getFullYear())) {
                        return d;
                    ***REMOVED***
                  ***REMOVED***
                ***REMOVED*** else if (d[metadata.date] && mode === 'day') {
                    if (d[metadata.date] instanceof Date && module.helper.dateEqual(date, module.helper.sanitiseDate(d[metadata.date]), mode)) {
                      return d;
                  ***REMOVED*** else if (Array.isArray(d[metadata.date])) {
                      if(d[metadata.date].some(function(idate) { return module.helper.dateEqual(date, idate, mode); ***REMOVED***)) {
                        return d;
                    ***REMOVED***
                  ***REMOVED***
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
            return null;
   ***REMOVED*****REMOVED***
          sanitiseDate: function (date) {
            if (!date) {
              return undefined;
          ***REMOVED***
            if (!(date instanceof Date)) {
              date = parser.date('' + date, settings);
          ***REMOVED***
            if (!date || date === null || isNaN(date.getTime())) {
              return undefined;
          ***REMOVED***
            return date;
   ***REMOVED*****REMOVED***
          dateDiff: function (date1, date2, mode) {
            mode = mode || 'day';
            var isTimeOnly = settings.type === 'time';
            var isYear = mode === 'year';
            var isYearOrMonth = isYear || mode === 'month';
            var isMinute = mode === 'minute';
            var isHourOrMinute = isMinute || mode === 'hour';
            //only care about a minute accuracy of settings.minTimeGap
            date1 = new Date(
              isTimeOnly ? 2000 : date1.getFullYear(),
              isTimeOnly ? 0 : isYear ? 0 : date1.getMonth(),
              isTimeOnly ? 1 : isYearOrMonth ? 1 : date1.getDate(),
              !isHourOrMinute ? 0 : date1.getHours(),
              !isMinute ? 0 : settings.minTimeGap***REMOVED*** Math.floor(date1.getMinutes() / settings.minTimeGap));
            date2 = new Date(
              isTimeOnly ? 2000 : date2.getFullYear(),
              isTimeOnly ? 0 : isYear ? 0 : date2.getMonth(),
              isTimeOnly ? 1 : isYearOrMonth ? 1 : date2.getDate(),
              !isHourOrMinute ? 0 : date2.getHours(),
              !isMinute ? 0 : settings.minTimeGap***REMOVED*** Math.floor(date2.getMinutes() / settings.minTimeGap));
            return date2.getTime() - date1.getTime();
   ***REMOVED*****REMOVED***
          dateEqual: function (date1, date2, mode) {
            return !!date1 && !!date2 && module.helper.dateDiff(date1, date2, mode) === 0;
   ***REMOVED*****REMOVED***
          isDateInRange: function (date, mode, minDate, maxDate) {
            if (!minDate && !maxDate) {
              var startDate = module.get.startDate();
              minDate = startDate && settings.minDate ? new Date(Math.max(startDate, settings.minDate)) : startDate || settings.minDate;
              maxDate = settings.maxDate;
          ***REMOVED***
            minDate = minDate && new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate(), minDate.getHours(), settings.minTimeGap***REMOVED*** Math.ceil(minDate.getMinutes() / settings.minTimeGap));
            return !(!date ||
            (minDate && module.helper.dateDiff(date, minDate, mode) > 0) ||
            (maxDate && module.helper.dateDiff(maxDate, date, mode) > 0));
   ***REMOVED*****REMOVED***
          dateInRange: function (date, minDate, maxDate) {
            if (!minDate && !maxDate) {
              var startDate = module.get.startDate();
              minDate = startDate && settings.minDate ? new Date(Math.max(startDate, settings.minDate)) : startDate || settings.minDate;
              maxDate = settings.maxDate;
          ***REMOVED***
            minDate = minDate && new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate(), minDate.getHours(), settings.minTimeGap***REMOVED*** Math.ceil(minDate.getMinutes() / settings.minTimeGap));
            var isTimeOnly = settings.type === 'time';
            return !date ? date :
              (minDate && module.helper.dateDiff(date, minDate, 'minute') > 0) ?
                (isTimeOnly ? module.helper.mergeDateTime(date, minDate) : minDate) :
                (maxDate && module.helper.dateDiff(maxDate, date, 'minute') > 0) ?
                  (isTimeOnly ? module.helper.mergeDateTime(date, maxDate) : maxDate) :
                  date;
   ***REMOVED*****REMOVED***
          mergeDateTime: function (date, time) {
            return (!date || !time) ? time :
              new Date(date.getFullYear(), date.getMonth(), date.getDate(), time.getHours(), time.getMinutes());
   ***REMOVED*****REMOVED***
          isTodayButton: function(element) {
            return element.text() === settings.text.today;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        setting: function (name, value) {
          module.debug('Changing setting', name, value);
          if ($.isPlainObject(name)) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if (value !== undefined) {
            if ($.isPlainObject(settings[name])) {
              $.extend(true, settings[name], value);
          ***REMOVED***
            else {
              settings[name] = value;
          ***REMOVED***
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function (name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function () {
          if (!settings.silent && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function () {
          if (!settings.silent && settings.verbose && settings.debug) {
            if (settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function () {
          if (!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function (message) {
            var
              currentTime,
              executionTime,
              previousTime
              ;
            if (settings.performance) {
              currentTime = new Date().getTime();
              previousTime = time || currentTime;
              executionTime = currentTime - previousTime;
              time = currentTime;
              performance.push({
                'Name': message[0],
                'Arguments': [].slice.call(message, 1) || '',
                'Element': element,
                'Execution Time': executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function () {
            var
              title = settings.name + ':',
              totalTime = 0
              ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function (index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if (moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if ((console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if (console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function (index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time'] + 'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        invoke: function (query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
            ;
          passedArguments = passedArguments || queryArguments;
          context = element || context;
          if (typeof query == 'string' && object !== undefined) {
            query = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function (depth, value) {
              var camelCaseValue = (depth != maxDepth)
                  ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                  : query
                ;
              if ($.isPlainObject(object[camelCaseValue]) && (depth != maxDepth)) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if (object[camelCaseValue] !== undefined) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if ($.isPlainObject(object[value]) && (depth != maxDepth)) {
                object = object[value];
            ***REMOVED***
              else if (object[value] !== undefined) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                module.error(error.method, query);
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if ($.isFunction(found)) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if (found !== undefined) {
            response = found;
        ***REMOVED***
          if (Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if (returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if (response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***;

      if (methodInvoked) {
        if (instance === undefined) {
          module.initialize();
      ***REMOVED***
        module.invoke(query);
    ***REMOVED***
      else {
        if (instance !== undefined) {
          instance.invoke('destroy');
      ***REMOVED***
        module.initialize();
    ***REMOVED***
  ***REMOVED***)
  ;
  return (returnedValue !== undefined)
    ? returnedValue
    : this
    ;
***REMOVED***;

$.fn.calendar.settings = {

  name            : 'Calendar',
  namespace       : 'calendar',

  silent: false,
  debug: false,
  verbose: false,
  performance: false,

  type               : 'datetime', // picker type, can be 'datetime', 'date', 'time', 'month', or 'year'
  firstDayOfWeek     : 0,          // day for first day column (0 = Sunday)
  constantHeight     : true,       // add rows to shorter months to keep day calendar height consistent (6 rows)
  today              : false,      // show a 'today/now' button at the bottom of the calendar
  closable           : true,       // close the popup after selecting a date/time
  monthFirst         : true,       // month before day when parsing/converting date from/to text
  touchReadonly      : true,       // set input to readonly on touch devices
  inline             : false,      // create the calendar inline instead of inside a popup
  on                 : null,       // when to show the popup (defaults to 'focus' for input, 'click' for others)
  initialDate        : null,       // date to display initially when no date is selected (null = now)
  startMode          : false,      // display mode to start in, can be 'year', 'month', 'day', 'hour', 'minute' (false = 'day')
  minDate            : null,       // minimum date/time that can be selected, dates/times before are disabled
  maxDate            : null,       // maximum date/time that can be selected, dates/times after are disabled
  ampm               : true,       // show am/pm in time mode
  disableYear        : false,      // disable year selection mode
  disableMonth       : false,      // disable month selection mode
  disableMinute      : false,      // disable minute selection mode
  formatInput        : true,       // format the input text upon input blur and module creation
  startCalendar      : null,       // jquery object or selector for another calendar that represents the start date of a date range
  endCalendar        : null,       // jquery object or selector for another calendar that represents the end date of a date range
  multiMonth         : 1,          // show multiple months when in 'day' mode
  minTimeGap         : 5,
  showWeekNumbers    : null,       // show Number of Week at the very first column of a dayView
  disabledDates      : [],         // specific day(s) which won't be selectable and contain additional information.
  disabledDaysOfWeek : [],         // day(s) which won't be selectable(s) (0 = Sunday)
  enabledDates       : [],         // specific day(s) which will be selectable, all other days will be disabled
  eventDates         : [],         // specific day(s) which will be shown in a different color and using tooltips
  centuryBreak       : 60,         // starting short year until 99 where it will be assumed to belong to the last century
  currentCentury     : 2000,       // century to be added to 2-digit years (00 to {centuryBreak***REMOVED***-1)
  selectAdjacentDays : false,     // The calendar can show dates from adjacent month. These adjacent month dates can also be made selectable.
  // popup options ('popup', 'on', 'hoverable', and show/hide callbacks are overridden)
  popupOptions: {
    position: 'bottom left',
    lastResort: 'bottom left',
    prefer: 'opposite',
    hideOnScroll: false
***REMOVED***

  text: {
    days: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
    months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
    monthsShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    today: 'Today',
    now: 'Now',
    am: 'AM',
    pm: 'PM',
    weekNo: 'Week'
***REMOVED***

  formatter: {
    header: function (date, mode, settings) {
      return mode === 'year' ? settings.formatter.yearHeader(date, settings) :
        mode === 'month' ? settings.formatter.monthHeader(date, settings) :
          mode === 'day' ? settings.formatter.dayHeader(date, settings) :
            mode === 'hour' ? settings.formatter.hourHeader(date, settings) :
              settings.formatter.minuteHeader(date, settings);
  ***REMOVED***
    yearHeader: function (date, settings) {
      var decadeYear = Math.ceil(date.getFullYear() / 10)***REMOVED*** 10;
      return (decadeYear - 9) + ' - ' + (decadeYear + 2);
  ***REMOVED***
    monthHeader: function (date, settings) {
      return date.getFullYear();
  ***REMOVED***
    dayHeader: function (date, settings) {
      var month = settings.text.months[date.getMonth()];
      var year = date.getFullYear();
      return month + ' ' + year;
  ***REMOVED***
    hourHeader: function (date, settings) {
      return settings.formatter.date(date, settings);
  ***REMOVED***
    minuteHeader: function (date, settings) {
      return settings.formatter.date(date, settings);
  ***REMOVED***
    dayColumnHeader: function (day, settings) {
      return settings.text.days[day];
  ***REMOVED***
    datetime: function (date, settings) {
      if (!date) {
        return '';
    ***REMOVED***
      var day = settings.type === 'time' ? '' : settings.formatter.date(date, settings);
      var time = settings.type.indexOf('time') < 0 ? '' : settings.formatter.time(date, settings, false);
      var separator = settings.type === 'datetime' ? ' ' : '';
      return day + separator + time;
  ***REMOVED***
    date: function (date, settings) {
      if (!date) {
        return '';
    ***REMOVED***
      var day = date.getDate();
      var month = settings.text.months[date.getMonth()];
      var year = date.getFullYear();
      return settings.type === 'year' ? year :
        settings.type === 'month' ? month + ' ' + year :
        (settings.monthFirst ? month + ' ' + day : day + ' ' + month) + ', ' + year;
  ***REMOVED***
    time: function (date, settings, forCalendar) {
      if (!date) {
        return '';
    ***REMOVED***
      var hour = date.getHours();
      var minute = date.getMinutes();
      var ampm = '';
      if (settings.ampm) {
        ampm = ' ' + (hour < 12 ? settings.text.am : settings.text.pm);
        hour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;
    ***REMOVED***
      return hour + ':' + (minute < 10 ? '0' : '') + minute + ampm;
  ***REMOVED***
    today: function (settings) {
      return settings.type === 'date' ? settings.text.today : settings.text.now;
  ***REMOVED***
    cell: function (cell, date, cellOptions) {
  ***REMOVED***
***REMOVED***

  parser: {
    date: function (text, settings) {
      if (text instanceof Date) {
        return text;
    ***REMOVED***
      if (!text) {
        return null;
    ***REMOVED***
      text = ('' + text).trim().toLowerCase();
      if (text.length === 0) {
        return null;
    ***REMOVED***
      // Reverse date and month in some cases
      text = settings.monthFirst ? text : text.replace(/[\/\-\.]/g,'/').replace(/([0-9]+)\/([0-9]+)/,'$2/$1');
      var textDate = new Date(text);
      if(!isNaN(textDate.getDate())) {
        return textDate;
    ***REMOVED***

      var i, j, k;
      var minute = -1, hour = -1, day = -1, month = -1, year = -1;
      var isAm = undefined;

      var isTimeOnly = settings.type === 'time';
      var isDateOnly = settings.type.indexOf('time') < 0;

      var words = text.split(settings.regExp.dateWords), word;
      var numbers = text.split(settings.regExp.dateNumbers), number;

      var parts;
      var monthString;

      if (!isDateOnly) {
        //am/pm
        isAm = $.inArray(settings.text.am.toLowerCase(), words) >= 0 ? true :
          $.inArray(settings.text.pm.toLowerCase(), words) >= 0 ? false : undefined;

        //time with ':'
        for (i = 0; i < numbers.length; i++) {
          number = numbers[i];
          if (number.indexOf(':') >= 0) {
            if (hour < 0 || minute < 0) {
              parts = number.split(':');
              for (k = 0; k < Math.min(2, parts.length); k++) {
                j = parseInt(parts[k]);
                if (isNaN(j)) {
                  j = 0;
              ***REMOVED***
                if (k === 0) {
                  hour = j % 24;
              ***REMOVED*** else {
                  minute = j % 60;
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
            numbers.splice(i, 1);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***

      if (!isTimeOnly) {
        //textual month
        for (i = 0; i < words.length; i++) {
          word = words[i];
          if (word.length <= 0) {
            continue;
        ***REMOVED***
          for (j = 0; j < settings.text.months.length; j++) {
            monthString = settings.text.months[j];
            monthString = monthString.substring(0, word.length).toLowerCase();
            if (monthString === word) {
              month = j + 1;
              break;
          ***REMOVED***
        ***REMOVED***
          if (month >= 0) {
            break;
        ***REMOVED***
      ***REMOVED***

        //year > settings.centuryBreak
        for (i = 0; i < numbers.length; i++) {
          j = parseInt(numbers[i]);
          if (isNaN(j)) {
            continue;
        ***REMOVED***
          if (j >= settings.centuryBreak && i === numbers.length-1) {
            if (j <= 99) {
              j += settings.currentCentury - 100;
          ***REMOVED***
            year = j;
            numbers.splice(i, 1);
            break;
        ***REMOVED***
      ***REMOVED***

        //numeric month
        if (month < 0) {
          for (i = 0; i < numbers.length; i++) {
            k = i > 1 || settings.monthFirst ? i : i === 1 ? 0 : 1;
            j = parseInt(numbers[k]);
            if (isNaN(j)) {
              continue;
          ***REMOVED***
            if (1 <= j && j <= 12) {
              month = j;
              numbers.splice(k, 1);
              break;
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***

        //day
        for (i = 0; i < numbers.length; i++) {
          j = parseInt(numbers[i]);
          if (isNaN(j)) {
            continue;
        ***REMOVED***
          if (1 <= j && j <= 31) {
            day = j;
            numbers.splice(i, 1);
            break;
        ***REMOVED***
      ***REMOVED***

        //year <= settings.centuryBreak
        if (year < 0) {
          for (i = numbers.length - 1; i >= 0; i--) {
            j = parseInt(numbers[i]);
            if (isNaN(j)) {
              continue;
          ***REMOVED***
            if (j <= 99) {
              j += settings.currentCentury;
          ***REMOVED***
            year = j;
            numbers.splice(i, 1);
            break;
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***

      if (!isDateOnly) {
        //hour
        if (hour < 0) {
          for (i = 0; i < numbers.length; i++) {
            j = parseInt(numbers[i]);
            if (isNaN(j)) {
              continue;
          ***REMOVED***
            if (0 <= j && j <= 23) {
              hour = j;
              numbers.splice(i, 1);
              break;
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***

        //minute
        if (minute < 0) {
          for (i = 0; i < numbers.length; i++) {
            j = parseInt(numbers[i]);
            if (isNaN(j)) {
              continue;
          ***REMOVED***
            if (0 <= j && j <= 59) {
              minute = j;
              numbers.splice(i, 1);
              break;
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***

      if (minute < 0 && hour < 0 && day < 0 && month < 0 && year < 0) {
        return null;
    ***REMOVED***

      if (minute < 0) {
        minute = 0;
    ***REMOVED***
      if (hour < 0) {
        hour = 0;
    ***REMOVED***
      if (day < 0) {
        day = 1;
    ***REMOVED***
      if (month < 0) {
        month = 1;
    ***REMOVED***
      if (year < 0) {
        year = new Date().getFullYear();
    ***REMOVED***

      if (isAm !== undefined) {
        if (isAm) {
          if (hour === 12) {
            hour = 0;
        ***REMOVED***
      ***REMOVED*** else if (hour < 12) {
          hour += 12;
      ***REMOVED***
    ***REMOVED***

      var date = new Date(year, month - 1, day, hour, minute);
      if (date.getMonth() !== month - 1 || date.getFullYear() !== year) {
        //month or year don't match up, switch to last day of the month
        date = new Date(year, month, 0, hour, minute);
    ***REMOVED***
      return isNaN(date.getTime()) ? null : date;
  ***REMOVED***
***REMOVED***

  // callback before date is changed, return false to cancel the change
  onBeforeChange: function (date, text, mode) {
    return true;
***REMOVED***

  // callback when date changes
  onChange: function (date, text, mode) {
***REMOVED***

  // callback before show animation, return false to prevent show
  onShow: function () {
***REMOVED***

  // callback after show animation
  onVisible: function () {
***REMOVED***

  // callback before hide animation, return false to prevent hide
  onHide: function () {
***REMOVED***

  // callback after hide animation
  onHidden: function () {
***REMOVED***

  // callback before item is selected, return false to prevent selection
  onSelect: function (date, mode) {
***REMOVED***

  // is the given date disabled?
  isDisabled: function (date, mode) {
    return false;
***REMOVED***

  selector: {
    popup: '.ui.popup',
    input: 'input',
    activator: 'input',
    append: '.inline.field,.inline.fields'
***REMOVED***

  regExp: {
    dateWords: /[^A-Za-z\u00C0-\u024F]+/g,
    dateNumbers: /[^\d:]+/g
***REMOVED***

  error: {
    popup: 'UI Popup, a required component is not included in this page',
    method: 'The method you called is not defined.'
***REMOVED***

  className: {
    calendar: 'calendar',
    active: 'active',
    popup: 'ui popup',
    grid: 'ui equal width grid',
    column: 'column',
    table: 'ui celled center aligned unstackable table',
    prev: 'prev link',
    next: 'next link',
    prevIcon: 'chevron left icon',
    nextIcon: 'chevron right icon',
    link: 'link',
    cell: 'link',
    disabledCell: 'disabled',
    weekCell: 'disabled',
    adjacentCell: 'adjacent',
    activeCell: 'active',
    rangeCell: 'range',
    focusCell: 'focus',
    todayCell: 'today',
    today: 'today link'
***REMOVED***

  metadata: {
    date: 'date',
    focusDate: 'focusDate',
    startDate: 'startDate',
    endDate: 'endDate',
    minDate: 'minDate',
    maxDate: 'maxDate',
    mode: 'mode',
    type: 'type',
    monthOffset: 'monthOffset',
    message: 'message',
    class: 'class',
    month: 'month',
    year: 'year'
***REMOVED***

  eventClass: 'blue'
***REMOVED***;

***REMOVED***)(jQuery, window, document);

/*!
***REMOVED*** # Fomantic-UI - Checkbox
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

***REMOVED***;

$.isFunction = $.isFunction || function(obj) {
  return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.checkbox = function(parameters) {
  var
    $allModules    = $(this),
    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings        = $.extend(true, {***REMOVED***, $.fn.checkbox.settings, parameters),

        className       = settings.className,
        namespace       = settings.namespace,
        selector        = settings.selector,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $label          = $(this).children(selector.label),
        $input          = $(this).children(selector.input),
        input           = $input[0],

        initialLoad     = false,
        shortcutPressed = false,
        instance        = $module.data(moduleNamespace),

        observer,
        element         = this,
        module
      ;

      module      = {

        initialize: function() {
          module.verbose('Initializing checkbox', settings);

          module.create.label();
          module.bind.events();

          module.set.tabbable();
          module.hide.input();

          module.observeChanges();
          module.instantiate();
          module.setup();
 ***REMOVED*****REMOVED***

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
 ***REMOVED*****REMOVED***

        destroy: function() {
          module.verbose('Destroying module');
          module.unbind.events();
          module.show.input();
          $module.removeData(moduleNamespace);
 ***REMOVED*****REMOVED***

        fix: {
          reference: function() {
            if( $module.is(selector.input) ) {
              module.debug('Behavior called on <input> adjusting invoked element');
              $module = $module.closest(selector.checkbox);
              module.refresh();
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        setup: function() {
          module.set.initialLoad();
          if( module.is.indeterminate() ) {
            module.debug('Initial value is indeterminate');
            module.indeterminate();
        ***REMOVED***
          else if( module.is.checked() ) {
            module.debug('Initial value is checked');
            module.check();
        ***REMOVED***
          else {
            module.debug('Initial value is unchecked');
            module.uncheck();
        ***REMOVED***
          module.remove.initialLoad();
 ***REMOVED*****REMOVED***

        refresh: function() {
          $label = $module.children(selector.label);
          $input = $module.children(selector.input);
          input  = $input[0];
 ***REMOVED*****REMOVED***

        hide: {
          input: function() {
            module.verbose('Modifying <input> z-index to be unselectable');
            $input.addClass(className.hidden);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        show: {
          input: function() {
            module.verbose('Modifying <input> z-index to be selectable');
            $input.removeClass(className.hidden);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        observeChanges: function() {
          if('MutationObserver' in window) {
            observer = new MutationObserver(function(mutations) {
              module.debug('DOM tree modified, updating selector cache');
              module.refresh();
          ***REMOVED***);
            observer.observe(element, {
              childList : true,
              subtree   : true
          ***REMOVED***);
            module.debug('Setting up mutation observer', observer);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        attachEvents: function(selector, event) {
          var
            $element = $(selector)
          ;
          event = $.isFunction(module[event])
            ? module[event]
            : module.toggle
          ;
          if($element.length > 0) {
            module.debug('Attaching checkbox events to element', selector, event);
            $element
              .on('click' + eventNamespace, event)
            ;
        ***REMOVED***
          else {
            module.error(error.notFound);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        preventDefaultOnInputTarget: function() {
          if(typeof event !== 'undefined' && event !== null && $(event.target).is(selector.input)) {
            module.verbose('Preventing default check action after manual check action');
            event.preventDefault();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        event: {
          change: function(event) {
            if( !module.should.ignoreCallbacks() ) {
              settings.onChange.call(input);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          click: function(event) {
            var
              $target = $(event.target)
            ;
            if( $target.is(selector.input) ) {
              module.verbose('Using default check action on initialized checkbox');
              return;
          ***REMOVED***
            if( $target.is(selector.link) ) {
              module.debug('Clicking link inside checkbox, skipping toggle');
              return;
          ***REMOVED***
            module.toggle();
            $input.focus();
            event.preventDefault();
   ***REMOVED*****REMOVED***
          keydown: function(event) {
            var
              key     = event.which,
              keyCode = {
                enter  : 13,
                space  : 32,
                escape : 27,
                left   : 37,
                up     : 38,
                right  : 39,
                down   : 40
            ***REMOVED***
            ;

            var r = module.get.radios(),
                rIndex = r.index($module),
                rLen = r.length,
                checkIndex = false;

            if(key == keyCode.left || key == keyCode.up) {
              checkIndex = (rIndex === 0 ? rLen : rIndex) - 1;
          ***REMOVED*** else if(key == keyCode.right || key == keyCode.down) {
              checkIndex = rIndex === rLen-1 ? 0 : rIndex+1;
          ***REMOVED***

            if (!module.should.ignoreCallbacks() && checkIndex !== false) {
              if(settings.beforeUnchecked.apply(input)===false) {
                module.verbose('Option not allowed to be unchecked, cancelling key navigation');
                return false;
            ***REMOVED***
              if (settings.beforeChecked.apply($(r[checkIndex]).children(selector.input)[0])===false) {
                module.verbose('Next option should not allow check, cancelling key navigation');
                return false;
            ***REMOVED***
          ***REMOVED***

            if(key == keyCode.escape) {
              module.verbose('Escape key pressed blurring field');
              $input.blur();
              shortcutPressed = true;
          ***REMOVED***
            else if(!event.ctrlKey && ( key == keyCode.space || (key == keyCode.enter && settings.enableEnterKey)) ) {
              module.verbose('Enter/space key pressed, toggling checkbox');
              module.toggle();
              shortcutPressed = true;
          ***REMOVED***
            else {
              shortcutPressed = false;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          keyup: function(event) {
            if(shortcutPressed) {
              event.preventDefault();
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        check: function() {
          if( !module.should.allowCheck() ) {
            return;
        ***REMOVED***
          module.debug('Checking checkbox', $input);
          module.set.checked();
          if( !module.should.ignoreCallbacks() ) {
            settings.onChecked.call(input);
            module.trigger.change();
        ***REMOVED***
          module.preventDefaultOnInputTarget();
 ***REMOVED*****REMOVED***

        uncheck: function() {
          if( !module.should.allowUncheck() ) {
            return;
        ***REMOVED***
          module.debug('Unchecking checkbox');
          module.set.unchecked();
          if( !module.should.ignoreCallbacks() ) {
            settings.onUnchecked.call(input);
            module.trigger.change();
        ***REMOVED***
          module.preventDefaultOnInputTarget();
 ***REMOVED*****REMOVED***

        indeterminate: function() {
          if( module.should.allowIndeterminate() ) {
            module.debug('Checkbox is already indeterminate');
            return;
        ***REMOVED***
          module.debug('Making checkbox indeterminate');
          module.set.indeterminate();
          if( !module.should.ignoreCallbacks() ) {
            settings.onIndeterminate.call(input);
            module.trigger.change();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        determinate: function() {
          if( module.should.allowDeterminate() ) {
            module.debug('Checkbox is already determinate');
            return;
        ***REMOVED***
          module.debug('Making checkbox determinate');
          module.set.determinate();
          if( !module.should.ignoreCallbacks() ) {
            settings.onDeterminate.call(input);
            module.trigger.change();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        enable: function() {
          if( module.is.enabled() ) {
            module.debug('Checkbox is already enabled');
            return;
        ***REMOVED***
          module.debug('Enabling checkbox');
          module.set.enabled();
          if( !module.should.ignoreCallbacks() ) {
            settings.onEnable.call(input);
            // preserve legacy callbacks
            settings.onEnabled.call(input);
            module.trigger.change();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        disable: function() {
          if( module.is.disabled() ) {
            module.debug('Checkbox is already disabled');
            return;
        ***REMOVED***
          module.debug('Disabling checkbox');
          module.set.disabled();
          if( !module.should.ignoreCallbacks() ) {
            settings.onDisable.call(input);
            // preserve legacy callbacks
            settings.onDisabled.call(input);
            module.trigger.change();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        get: {
          radios: function() {
            var
              name = module.get.name()
            ;
            return $('input[name="' + name + '"]').closest(selector.checkbox);
   ***REMOVED*****REMOVED***
          otherRadios: function() {
            return module.get.radios().not($module);
   ***REMOVED*****REMOVED***
          name: function() {
            return $input.attr('name');
        ***REMOVED***
 ***REMOVED*****REMOVED***

        is: {
          initialLoad: function() {
            return initialLoad;
   ***REMOVED*****REMOVED***
          radio: function() {
            return ($input.hasClass(className.radio) || $input.attr('type') == 'radio');
   ***REMOVED*****REMOVED***
          indeterminate: function() {
            return $input.prop('indeterminate') !== undefined && $input.prop('indeterminate');
   ***REMOVED*****REMOVED***
          checked: function() {
            return $input.prop('checked') !== undefined && $input.prop('checked');
   ***REMOVED*****REMOVED***
          disabled: function() {
            return $input.prop('disabled') !== undefined && $input.prop('disabled');
   ***REMOVED*****REMOVED***
          enabled: function() {
            return !module.is.disabled();
   ***REMOVED*****REMOVED***
          determinate: function() {
            return !module.is.indeterminate();
   ***REMOVED*****REMOVED***
          unchecked: function() {
            return !module.is.checked();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        should: {
          allowCheck: function() {
            if(module.is.determinate() && module.is.checked() && !module.is.initialLoad() ) {
              module.debug('Should not allow check, checkbox is already checked');
              return false;
          ***REMOVED***
            if(!module.should.ignoreCallbacks() && settings.beforeChecked.apply(input) === false) {
              module.debug('Should not allow check, beforeChecked cancelled');
              return false;
          ***REMOVED***
            return true;
   ***REMOVED*****REMOVED***
          allowUncheck: function() {
            if(module.is.determinate() && module.is.unchecked() && !module.is.initialLoad() ) {
              module.debug('Should not allow uncheck, checkbox is already unchecked');
              return false;
          ***REMOVED***
            if(!module.should.ignoreCallbacks() && settings.beforeUnchecked.apply(input) === false) {
              module.debug('Should not allow uncheck, beforeUnchecked cancelled');
              return false;
          ***REMOVED***
            return true;
   ***REMOVED*****REMOVED***
          allowIndeterminate: function() {
            if(module.is.indeterminate() && !module.is.initialLoad() ) {
              module.debug('Should not allow indeterminate, checkbox is already indeterminate');
              return false;
          ***REMOVED***
            if(!module.should.ignoreCallbacks() && settings.beforeIndeterminate.apply(input) === false) {
              module.debug('Should not allow indeterminate, beforeIndeterminate cancelled');
              return false;
          ***REMOVED***
            return true;
   ***REMOVED*****REMOVED***
          allowDeterminate: function() {
            if(module.is.determinate() && !module.is.initialLoad() ) {
              module.debug('Should not allow determinate, checkbox is already determinate');
              return false;
          ***REMOVED***
            if(!module.should.ignoreCallbacks() && settings.beforeDeterminate.apply(input) === false) {
              module.debug('Should not allow determinate, beforeDeterminate cancelled');
              return false;
          ***REMOVED***
            return true;
   ***REMOVED*****REMOVED***
          ignoreCallbacks: function() {
            return (initialLoad && !settings.fireOnInit);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        can: {
          change: function() {
            return !( $module.hasClass(className.disabled) || $module.hasClass(className.readOnly) || $input.prop('disabled') || $input.prop('readonly') );
   ***REMOVED*****REMOVED***
          uncheck: function() {
            return (typeof settings.uncheckable === 'boolean')
              ? settings.uncheckable
              : !module.is.radio()
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        set: {
          initialLoad: function() {
            initialLoad = true;
   ***REMOVED*****REMOVED***
          checked: function() {
            module.verbose('Setting class to checked');
            $module
              .removeClass(className.indeterminate)
              .addClass(className.checked)
            ;
            if( module.is.radio() ) {
              module.uncheckOthers();
          ***REMOVED***
            if(!module.is.indeterminate() && module.is.checked()) {
              module.debug('Input is already checked, skipping input property change');
              return;
          ***REMOVED***
            module.verbose('Setting state to checked', input);
            $input
              .prop('indeterminate', false)
              .prop('checked', true)
            ;
   ***REMOVED*****REMOVED***
          unchecked: function() {
            module.verbose('Removing checked class');
            $module
              .removeClass(className.indeterminate)
              .removeClass(className.checked)
            ;
            if(!module.is.indeterminate() &&  module.is.unchecked() ) {
              module.debug('Input is already unchecked');
              return;
          ***REMOVED***
            module.debug('Setting state to unchecked');
            $input
              .prop('indeterminate', false)
              .prop('checked', false)
            ;
   ***REMOVED*****REMOVED***
          indeterminate: function() {
            module.verbose('Setting class to indeterminate');
            $module
              .addClass(className.indeterminate)
            ;
            if( module.is.indeterminate() ) {
              module.debug('Input is already indeterminate, skipping input property change');
              return;
          ***REMOVED***
            module.debug('Setting state to indeterminate');
            $input
              .prop('indeterminate', true)
            ;
   ***REMOVED*****REMOVED***
          determinate: function() {
            module.verbose('Removing indeterminate class');
            $module
              .removeClass(className.indeterminate)
            ;
            if( module.is.determinate() ) {
              module.debug('Input is already determinate, skipping input property change');
              return;
          ***REMOVED***
            module.debug('Setting state to determinate');
            $input
              .prop('indeterminate', false)
            ;
   ***REMOVED*****REMOVED***
          disabled: function() {
            module.verbose('Setting class to disabled');
            $module
              .addClass(className.disabled)
            ;
            if( module.is.disabled() ) {
              module.debug('Input is already disabled, skipping input property change');
              return;
          ***REMOVED***
            module.debug('Setting state to disabled');
            $input
              .prop('disabled', 'disabled')
            ;
   ***REMOVED*****REMOVED***
          enabled: function() {
            module.verbose('Removing disabled class');
            $module.removeClass(className.disabled);
            if( module.is.enabled() ) {
              module.debug('Input is already enabled, skipping input property change');
              return;
          ***REMOVED***
            module.debug('Setting state to enabled');
            $input
              .prop('disabled', false)
            ;
   ***REMOVED*****REMOVED***
          tabbable: function() {
            module.verbose('Adding tabindex to checkbox');
            if( $input.attr('tabindex') === undefined) {
              $input.attr('tabindex', 0);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        remove: {
          initialLoad: function() {
            initialLoad = false;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        trigger: {
          change: function() {
            var
              events       = document.createEvent('HTMLEvents'),
              inputElement = $input[0]
            ;
            if(inputElement) {
              module.verbose('Triggering native change event');
              events.initEvent('change', true, false);
              inputElement.dispatchEvent(events);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***


        create: {
          label: function() {
            if($input.prevAll(selector.label).length > 0) {
              $input.prev(selector.label).detach().insertAfter($input);
              module.debug('Moving existing label', $label);
          ***REMOVED***
            else if( !module.has.label() ) {
              $label = $('<label>').insertAfter($input);
              module.debug('Creating label', $label);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        has: {
          label: function() {
            return ($label.length > 0);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        bind: {
          events: function() {
            module.verbose('Attaching checkbox events');
            $module
              .on('click'   + eventNamespace, module.event.click)
              .on('change'  + eventNamespace, module.event.change)
              .on('keydown' + eventNamespace, selector.input, module.event.keydown)
              .on('keyup'   + eventNamespace, selector.input, module.event.keyup)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        unbind: {
          events: function() {
            module.debug('Removing events');
            $module
              .off(eventNamespace)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        uncheckOthers: function() {
          var
            $radios = module.get.otherRadios()
          ;
          module.debug('Unchecking other radios', $radios);
          $radios.removeClass(className.checked);
 ***REMOVED*****REMOVED***

        toggle: function() {
          if( !module.can.change() ) {
            if(!module.is.radio()) {
              module.debug('Checkbox is read-only or disabled, ignoring toggle');
          ***REMOVED***
            return;
        ***REMOVED***
          if( module.is.indeterminate() || module.is.unchecked() ) {
            module.debug('Currently unchecked');
            module.check();
        ***REMOVED***
          else if( module.is.checked() && module.can.uncheck() ) {
            module.debug('Currently checked');
            module.uncheck();
        ***REMOVED***
 ***REMOVED*****REMOVED***
        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            if($.isPlainObject(settings[name])) {
              $.extend(true, settings[name], value);
          ***REMOVED***
            else {
              settings[name] = value;
          ***REMOVED***
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                module.error(error.method, query);
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***
          if(Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***;

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
      ***REMOVED***
        module.invoke(query);
    ***REMOVED***
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
      ***REMOVED***
        module.initialize();
    ***REMOVED***
  ***REMOVED***)
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
***REMOVED***;

$.fn.checkbox.settings = {

  name                : 'Checkbox',
  namespace           : 'checkbox',

  silent              : false,
  debug               : false,
  verbose             : true,
  performance         : true,

  // delegated event context
  uncheckable         : 'auto',
  fireOnInit          : false,
  enableEnterKey      : true,

  onChange            : function(){***REMOVED***,

  beforeChecked       : function(){***REMOVED***,
  beforeUnchecked     : function(){***REMOVED***,
  beforeDeterminate   : function(){***REMOVED***,
  beforeIndeterminate : function(){***REMOVED***,

  onChecked           : function(){***REMOVED***,
  onUnchecked         : function(){***REMOVED***,

  onDeterminate       : function() {***REMOVED***,
  onIndeterminate     : function() {***REMOVED***,

  onEnable            : function(){***REMOVED***,
  onDisable           : function(){***REMOVED***,

  // preserve misspelled callbacks (will be removed in 3.0)
  onEnabled           : function(){***REMOVED***,
  onDisabled          : function(){***REMOVED***,

  className       : {
    checked       : 'checked',
    indeterminate : 'indeterminate',
    disabled      : 'disabled',
    hidden        : 'hidden',
    radio         : 'radio',
    readOnly      : 'read-only'
***REMOVED***

  error     : {
    method       : 'The method you called is not defined'
***REMOVED***

  selector : {
    checkbox : '.ui.checkbox',
    label    : 'label, .box',
    input    : 'input[type="checkbox"], input[type="radio"]',
    link     : 'a[href]'
***REMOVED***

***REMOVED***;

***REMOVED***)( jQuery, window, document );

/*!
***REMOVED*** # Fomantic-UI - Dimmer
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

***REMOVED***;

$.isFunction = $.isFunction || function(obj) {
  return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.dimmer = function(parameters) {
  var
    $allModules     = $(this),

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {***REMOVED***, $.fn.dimmer.settings, parameters)
          : $.extend({***REMOVED***, $.fn.dimmer.settings),

        selector        = settings.selector,
        namespace       = settings.namespace,
        className       = settings.className,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,
        moduleSelector  = $allModules.selector || '',

        clickEvent      = ('ontouchstart' in document.documentElement)
          ? 'touchstart'
          : 'click',

        $module = $(this),
        $dimmer,
        $dimmable,

        element   = this,
        instance  = $module.data(moduleNamespace),
        module
      ;

      module = {

        preinitialize: function() {
          if( module.is.dimmer() ) {

            $dimmable = $module.parent();
            $dimmer   = $module;
        ***REMOVED***
          else {
            $dimmable = $module;
            if( module.has.dimmer() ) {
              if(settings.dimmerName) {
                $dimmer = $dimmable.find(selector.dimmer).filter('.' + settings.dimmerName);
            ***REMOVED***
              else {
                $dimmer = $dimmable.find(selector.dimmer);
            ***REMOVED***
          ***REMOVED***
            else {
              $dimmer = module.create();
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        initialize: function() {
          module.debug('Initializing dimmer', settings);

          module.bind.events();
          module.set.dimmable();
          module.instantiate();
 ***REMOVED*****REMOVED***

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
 ***REMOVED*****REMOVED***

        destroy: function() {
          module.verbose('Destroying previous module', $dimmer);
          module.unbind.events();
          module.remove.variation();
          $dimmable
            .off(eventNamespace)
          ;
 ***REMOVED*****REMOVED***

        bind: {
          events: function() {
            if(settings.on == 'hover') {
              $dimmable
                .on('mouseenter' + eventNamespace, module.show)
                .on('mouseleave' + eventNamespace, module.hide)
              ;
          ***REMOVED***
            else if(settings.on == 'click') {
              $dimmable
                .on(clickEvent + eventNamespace, module.toggle)
              ;
          ***REMOVED***
            if( module.is.page() ) {
              module.debug('Setting as a page dimmer', $dimmable);
              module.set.pageDimmer();
          ***REMOVED***

            if( module.is.closable() ) {
              module.verbose('Adding dimmer close event', $dimmer);
              $dimmable
                .on(clickEvent + eventNamespace, selector.dimmer, module.event.click)
              ;
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        unbind: {
          events: function() {
            $module
              .removeData(moduleNamespace)
            ;
            $dimmable
              .off(eventNamespace)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        event: {
          click: function(event) {
            module.verbose('Determining if event occured on dimmer', event);
            if( $dimmer.find(event.target).length === 0 || $(event.target).is(selector.content) ) {
              module.hide();
              event.stopImmediatePropagation();
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        addContent: function(element) {
          var
            $content = $(element)
          ;
          module.debug('Add content to dimmer', $content);
          if($content.parent()[0] !== $dimmer[0]) {
            $content.detach().appendTo($dimmer);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        create: function() {
          var
            $element = $( settings.template.dimmer(settings) )
          ;
          if(settings.dimmerName) {
            module.debug('Creating named dimmer', settings.dimmerName);
            $element.addClass(settings.dimmerName);
        ***REMOVED***
          $element
            .appendTo($dimmable)
          ;
          return $element;
 ***REMOVED*****REMOVED***

        show: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){***REMOVED***
          ;
          module.debug('Showing dimmer', $dimmer, settings);
          module.set.variation();
          if( (!module.is.dimmed() || module.is.animating()) && module.is.enabled() ) {
            module.animate.show(callback);
            settings.onShow.call(element);
            settings.onChange.call(element);
        ***REMOVED***
          else {
            module.debug('Dimmer is already shown or disabled');
        ***REMOVED***
 ***REMOVED*****REMOVED***

        hide: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){***REMOVED***
          ;
          if( module.is.dimmed() || module.is.animating() ) {
            module.debug('Hiding dimmer', $dimmer);
            module.animate.hide(callback);
            settings.onHide.call(element);
            settings.onChange.call(element);
        ***REMOVED***
          else {
            module.debug('Dimmer is not visible');
        ***REMOVED***
 ***REMOVED*****REMOVED***

        toggle: function() {
          module.verbose('Toggling dimmer visibility', $dimmer);
          if( !module.is.dimmed() ) {
            module.show();
        ***REMOVED***
          else {
            if ( module.is.closable() ) {
              module.hide();
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        animate: {
          show: function(callback) {
            callback = $.isFunction(callback)
              ? callback
              : function(){***REMOVED***
            ;
            if(settings.useCSS && $.fn.transition !== undefined && $dimmer.transition('is supported')) {
              if(settings.useFlex) {
                module.debug('Using flex dimmer');
                module.remove.legacy();
            ***REMOVED***
              else {
                module.debug('Using legacy non-flex dimmer');
                module.set.legacy();
            ***REMOVED***
              if(settings.opacity !== 'auto') {
                module.set.opacity();
            ***REMOVED***
              $dimmer
                .transition({
                  displayType : settings.useFlex
                    ? 'flex'
                    : 'block',
                  animation   : settings.transition + ' in',
                  queue       : false,
                  duration    : module.get.duration(),
                  useFailSafe : true,
                  onStart     : function() {
                    module.set.dimmed();
      ***REMOVED*****REMOVED*****REMOVED***
                  onComplete  : function() {
                    module.set.active();
                    callback();
                ***REMOVED***
              ***REMOVED***)
              ;
          ***REMOVED***
            else {
              module.verbose('Showing dimmer animation with javascript');
              module.set.dimmed();
              if(settings.opacity == 'auto') {
                settings.opacity = 0.8;
            ***REMOVED***
              $dimmer
                .stop()
                .css({
                  opacity : 0,
                  width   : '100%',
                  height  : '100%'
              ***REMOVED***)
                .fadeTo(module.get.duration(), settings.opacity, function() {
                  $dimmer.removeAttr('style');
                  module.set.active();
                  callback();
              ***REMOVED***)
              ;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          hide: function(callback) {
            callback = $.isFunction(callback)
              ? callback
              : function(){***REMOVED***
            ;
            if(settings.useCSS && $.fn.transition !== undefined && $dimmer.transition('is supported')) {
              module.verbose('Hiding dimmer with css');
              $dimmer
                .transition({
                  displayType : settings.useFlex
                    ? 'flex'
                    : 'block',
                  animation   : settings.transition + ' out',
                  queue       : false,
                  duration    : module.get.duration(),
                  useFailSafe : true,
                  onComplete  : function() {
                    module.remove.dimmed();
                    module.remove.variation();
                    module.remove.active();
                    callback();
                ***REMOVED***
              ***REMOVED***)
              ;
          ***REMOVED***
            else {
              module.verbose('Hiding dimmer with javascript');
              $dimmer
                .stop()
                .fadeOut(module.get.duration(), function() {
                  module.remove.dimmed();
                  module.remove.active();
                  $dimmer.removeAttr('style');
                  callback();
              ***REMOVED***)
              ;
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        get: {
          dimmer: function() {
            return $dimmer;
   ***REMOVED*****REMOVED***
          duration: function() {
            if(typeof settings.duration == 'object') {
              if( module.is.active() ) {
                return settings.duration.hide;
            ***REMOVED***
              else {
                return settings.duration.show;
            ***REMOVED***
          ***REMOVED***
            return settings.duration;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        has: {
          dimmer: function() {
            if(settings.dimmerName) {
              return ($module.find(selector.dimmer).filter('.' + settings.dimmerName).length > 0);
          ***REMOVED***
            else {
              return ( $module.find(selector.dimmer).length > 0 );
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        is: {
          active: function() {
            return $dimmer.hasClass(className.active);
   ***REMOVED*****REMOVED***
          animating: function() {
            return ( $dimmer.is(':animated') || $dimmer.hasClass(className.animating) );
   ***REMOVED*****REMOVED***
          closable: function() {
            if(settings.closable == 'auto') {
              if(settings.on == 'hover') {
                return false;
            ***REMOVED***
              return true;
          ***REMOVED***
            return settings.closable;
   ***REMOVED*****REMOVED***
          dimmer: function() {
            return $module.hasClass(className.dimmer);
   ***REMOVED*****REMOVED***
          dimmable: function() {
            return $module.hasClass(className.dimmable);
   ***REMOVED*****REMOVED***
          dimmed: function() {
            return $dimmable.hasClass(className.dimmed);
   ***REMOVED*****REMOVED***
          disabled: function() {
            return $dimmable.hasClass(className.disabled);
   ***REMOVED*****REMOVED***
          enabled: function() {
            return !module.is.disabled();
   ***REMOVED*****REMOVED***
          page: function () {
            return $dimmable.is('body');
   ***REMOVED*****REMOVED***
          pageDimmer: function() {
            return $dimmer.hasClass(className.pageDimmer);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        can: {
          show: function() {
            return !$dimmer.hasClass(className.disabled);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        set: {
          opacity: function(opacity) {
            var
              color      = $dimmer.css('background-color'),
              colorArray = color.split(','),
              isRGB      = (colorArray && colorArray.length == 3),
              isRGBA     = (colorArray && colorArray.length == 4)
            ;
            opacity    = settings.opacity === 0 ? 0 : settings.opacity || opacity;
            if(isRGB || isRGBA) {
              colorArray[3] = opacity + ')';
              color         = colorArray.join(',');
          ***REMOVED***
            else {
              color = 'rgba(0, 0, 0, ' + opacity + ')';
          ***REMOVED***
            module.debug('Setting opacity to', opacity);
            $dimmer.css('background-color', color);
   ***REMOVED*****REMOVED***
          legacy: function() {
            $dimmer.addClass(className.legacy);
   ***REMOVED*****REMOVED***
          active: function() {
            $dimmer.addClass(className.active);
   ***REMOVED*****REMOVED***
          dimmable: function() {
            $dimmable.addClass(className.dimmable);
   ***REMOVED*****REMOVED***
          dimmed: function() {
            $dimmable.addClass(className.dimmed);
   ***REMOVED*****REMOVED***
          pageDimmer: function() {
            $dimmer.addClass(className.pageDimmer);
   ***REMOVED*****REMOVED***
          disabled: function() {
            $dimmer.addClass(className.disabled);
   ***REMOVED*****REMOVED***
          variation: function(variation) {
            variation = variation || settings.variation;
            if(variation) {
              $dimmer.addClass(variation);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        remove: {
          active: function() {
            $dimmer
              .removeClass(className.active)
            ;
   ***REMOVED*****REMOVED***
          legacy: function() {
            $dimmer.removeClass(className.legacy);
   ***REMOVED*****REMOVED***
          dimmed: function() {
            $dimmable.removeClass(className.dimmed);
   ***REMOVED*****REMOVED***
          disabled: function() {
            $dimmer.removeClass(className.disabled);
   ***REMOVED*****REMOVED***
          variation: function(variation) {
            variation = variation || settings.variation;
            if(variation) {
              $dimmer.removeClass(variation);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            if($.isPlainObject(settings[name])) {
              $.extend(true, settings[name], value);
          ***REMOVED***
            else {
              settings[name] = value;
          ***REMOVED***
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                module.error(error.method, query);
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***
          if(Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***;

      module.preinitialize();

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
      ***REMOVED***
        module.invoke(query);
    ***REMOVED***
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
      ***REMOVED***
        module.initialize();
    ***REMOVED***
  ***REMOVED***)
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
***REMOVED***;

$.fn.dimmer.settings = {

  name        : 'Dimmer',
  namespace   : 'dimmer',

  silent      : false,
  debug       : false,
  verbose     : false,
  performance : true,

  // whether should use flex layout
  useFlex     : true,

  // name to distinguish between multiple dimmers in context
  dimmerName  : false,

  // whether to add a variation type
  variation   : false,

  // whether to bind close events
  closable    : 'auto',

  // whether to use css animations
  useCSS      : true,

  // css animation to use
  transition  : 'fade',

  // event to bind to
  on          : false,

  // overriding opacity value
  opacity     : 'auto',

  // transition durations
  duration    : {
    show : 500,
    hide : 500
***REMOVED***
// whether the dynamically created dimmer should have a loader
  displayLoader: false,
  loaderText  : false,
  loaderVariation : '',

  onChange    : function(){***REMOVED***,
  onShow      : function(){***REMOVED***,
  onHide      : function(){***REMOVED***,

  error   : {
    method   : 'The method you called is not defined.'
***REMOVED***

  className : {
    active     : 'active',
    animating  : 'animating',
    dimmable   : 'dimmable',
    dimmed     : 'dimmed',
    dimmer     : 'dimmer',
    disabled   : 'disabled',
    hide       : 'hide',
    legacy     : 'legacy',
    pageDimmer : 'page',
    show       : 'show',
    loader     : 'ui loader'
***REMOVED***

  selector: {
    dimmer   : '> .ui.dimmer',
    content  : '.ui.dimmer > .content, .ui.dimmer > .content > .center'
***REMOVED***

  template: {
    dimmer: function(settings) {
        var d = $('<div/>').addClass('ui dimmer'),l;
        if(settings.displayLoader) {
          l = $('<div/>')
              .addClass(settings.className.loader)
              .addClass(settings.loaderVariation);
          if(!!settings.loaderText){
            l.text(settings.loaderText);
            l.addClass('text');
        ***REMOVED***
          d.append(l);
      ***REMOVED***
        return d;
  ***REMOVED***
***REMOVED***

***REMOVED***;

***REMOVED***)( jQuery, window, document );

/*!
***REMOVED*** # Fomantic-UI - Dropdown
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

***REMOVED***;

$.isFunction = $.isFunction || function(obj) {
  return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.dropdown = function(parameters) {
  var
    $allModules    = $(this),
    $document      = $(document),

    moduleSelector = $allModules.selector || '',

    hasTouch       = ('ontouchstart' in document.documentElement),
    clickEvent      = hasTouch
        ? 'touchstart'
        : 'click',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue
  ;

  $allModules
    .each(function(elementIndex) {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {***REMOVED***, $.fn.dropdown.settings, parameters)
          : $.extend({***REMOVED***, $.fn.dropdown.settings),

        className       = settings.className,
        message         = settings.message,
        fields          = settings.fields,
        keys            = settings.keys,
        metadata        = settings.metadata,
        namespace       = settings.namespace,
        regExp          = settings.regExp,
        selector        = settings.selector,
        error           = settings.error,
        templates       = settings.templates,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $context        = $(settings.context),
        $text           = $module.find(selector.text),
        $search         = $module.find(selector.search),
        $sizer          = $module.find(selector.sizer),
        $input          = $module.find(selector.input),
        $icon           = $module.find(selector.icon),
        $clear          = $module.find(selector.clearIcon),

        $combo = ($module.prev().find(selector.text).length > 0)
          ? $module.prev().find(selector.text)
          : $module.prev(),

        $menu           = $module.children(selector.menu),
        $item           = $menu.find(selector.item),
        $divider        = settings.hideDividers ? $item.parent().children(selector.divider) : $(),

        activated       = false,
        itemActivated   = false,
        internalChange  = false,
        iconClicked     = false,
        element         = this,
        instance        = $module.data(moduleNamespace),

        selectActionActive,
        initialLoad,
        pageLostFocus,
        willRefocus,
        elementNamespace,
        id,
        selectObserver,
        menuObserver,
        module
      ;

      module = {

        initialize: function() {
          module.debug('Initializing dropdown', settings);

          if( module.is.alreadySetup() ) {
            module.setup.reference();
        ***REMOVED***
          else {
            if (settings.ignoreDiacritics && !String.prototype.normalize) {
              settings.ignoreDiacritics = false;
              module.error(error.noNormalize, element);
          ***REMOVED***

            module.setup.layout();

            if(settings.values) {
              module.change.values(settings.values);
          ***REMOVED***

            module.refreshData();

            module.save.defaults();
            module.restore.selected();

            module.create.id();
            module.bind.events();

            module.observeChanges();
            module.instantiate();
        ***REMOVED***

 ***REMOVED*****REMOVED***

        instantiate: function() {
          module.verbose('Storing instance of dropdown', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
 ***REMOVED*****REMOVED***

        destroy: function() {
          module.verbose('Destroying previous dropdown', $module);
          module.remove.tabbable();
          module.remove.active();
          $menu.transition('stop all');
          $menu.removeClass(className.visible).addClass(className.hidden);
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
          $menu
            .off(eventNamespace)
          ;
          $document
            .off(elementNamespace)
          ;
          module.disconnect.menuObserver();
          module.disconnect.selectObserver();
 ***REMOVED*****REMOVED***

        observeChanges: function() {
          if('MutationObserver' in window) {
            selectObserver = new MutationObserver(module.event.select.mutation);
            menuObserver   = new MutationObserver(module.event.menu.mutation);
            module.debug('Setting up mutation observer', selectObserver, menuObserver);
            module.observe.select();
            module.observe.menu();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        disconnect: {
          menuObserver: function() {
            if(menuObserver) {
              menuObserver.disconnect();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          selectObserver: function() {
            if(selectObserver) {
              selectObserver.disconnect();
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        observe: {
          select: function() {
            if(module.has.input() && selectObserver) {
              selectObserver.observe($module[0], {
                childList : true,
                subtree   : true
            ***REMOVED***);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          menu: function() {
            if(module.has.menu() && menuObserver) {
              menuObserver.observe($menu[0], {
                childList : true,
                subtree   : true
            ***REMOVED***);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        create: {
          id: function() {
            id = (Math.random().toString(16) + '000000000').substr(2, 8);
            elementNamespace = '.' + id;
            module.verbose('Creating unique id for element', id);
   ***REMOVED*****REMOVED***
          userChoice: function(values) {
            var
              $userChoices,
              $userChoice,
              isUserValue,
              html
            ;
            values = values || module.get.userValues();
            if(!values) {
              return false;
          ***REMOVED***
            values = Array.isArray(values)
              ? values
              : [values]
            ;
            $.each(values, function(index, value) {
              if(module.get.item(value) === false) {
                html         = settings.templates.addition( module.add.variables(message.addResult, value) );
                $userChoice  = $('<div />')
                  .html(html)
                  .attr('data-' + metadata.value, value)
                  .attr('data-' + metadata.text, value)
                  .addClass(className.addition)
                  .addClass(className.item)
                ;
                if(settings.hideAdditions) {
                  $userChoice.addClass(className.hidden);
              ***REMOVED***
                $userChoices = ($userChoices === undefined)
                  ? $userChoice
                  : $userChoices.add($userChoice)
                ;
                module.verbose('Creating user choices for value', value, $userChoice);
            ***REMOVED***
          ***REMOVED***);
            return $userChoices;
   ***REMOVED*****REMOVED***
          userLabels: function(value) {
            var
              userValues = module.get.userValues()
            ;
            if(userValues) {
              module.debug('Adding user labels', userValues);
              $.each(userValues, function(index, value) {
                module.verbose('Adding custom user value');
                module.add.label(value, value);
            ***REMOVED***);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          menu: function() {
            $menu = $('<div />')
              .addClass(className.menu)
              .appendTo($module)
            ;
   ***REMOVED*****REMOVED***
          sizer: function() {
            $sizer = $('<span />')
              .addClass(className.sizer)
              .insertAfter($search)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        search: function(query) {
          query = (query !== undefined)
            ? query
            : module.get.query()
          ;
          module.verbose('Searching for query', query);
          if(module.has.minCharacters(query)) {
            module.filter(query);
        ***REMOVED***
          else {
            module.hide(null,true);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        select: {
          firstUnfiltered: function() {
            module.verbose('Selecting first non-filtered element');
            module.remove.selectedItem();
            $item
              .not(selector.unselectable)
              .not(selector.addition + selector.hidden)
                .eq(0)
                .addClass(className.selected)
            ;
   ***REMOVED*****REMOVED***
          nextAvailable: function($selected) {
            $selected = $selected.eq(0);
            var
              $nextAvailable = $selected.nextAll(selector.item).not(selector.unselectable).eq(0),
              $prevAvailable = $selected.prevAll(selector.item).not(selector.unselectable).eq(0),
              hasNext        = ($nextAvailable.length > 0)
            ;
            if(hasNext) {
              module.verbose('Moving selection to', $nextAvailable);
              $nextAvailable.addClass(className.selected);
          ***REMOVED***
            else {
              module.verbose('Moving selection to', $prevAvailable);
              $prevAvailable.addClass(className.selected);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        setup: {
          api: function() {
            var
              apiSettings = {
                debug   : settings.debug,
                urlData : {
                  value : module.get.value(),
                  query : module.get.query()
    ***REMOVED*****REMOVED*****REMOVED***
                on    : false
            ***REMOVED***
            ;
            module.verbose('First request, initializing API');
            $module
              .api(apiSettings)
            ;
   ***REMOVED*****REMOVED***
          layout: function() {
            if( $module.is('select') ) {
              module.setup.select();
              module.setup.returnedObject();
          ***REMOVED***
            if( !module.has.menu() ) {
              module.create.menu();
          ***REMOVED***
            if ( module.is.selection() && module.is.clearable() && !module.has.clearItem() ) {
              module.verbose('Adding clear icon');
              $clear = $('<i />')
                .addClass('remove icon')
                .insertBefore($text)
              ;
          ***REMOVED***
            if( module.is.search() && !module.has.search() ) {
              module.verbose('Adding search input');
              $search = $('<input />')
                .addClass(className.search)
                .prop('autocomplete', 'off')
                .insertBefore($text)
              ;
          ***REMOVED***
            if( module.is.multiple() && module.is.searchSelection() && !module.has.sizer()) {
              module.create.sizer();
          ***REMOVED***
            if(settings.allowTab) {
              module.set.tabbable();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          select: function() {
            var
              selectValues  = module.get.selectValues()
            ;
            module.debug('Dropdown initialized on a select', selectValues);
            if( $module.is('select') ) {
              $input = $module;
          ***REMOVED***
            // see if select is placed correctly already
            if($input.parent(selector.dropdown).length > 0) {
              module.debug('UI dropdown already exists. Creating dropdown menu only');
              $module = $input.closest(selector.dropdown);
              if( !module.has.menu() ) {
                module.create.menu();
            ***REMOVED***
              $menu = $module.children(selector.menu);
              module.setup.menu(selectValues);
          ***REMOVED***
            else {
              module.debug('Creating entire dropdown from select');
              $module = $('<div />')
                .attr('class', $input.attr('class') )
                .addClass(className.selection)
                .addClass(className.dropdown)
                .html( templates.dropdown(selectValues, fields, settings.preserveHTML, settings.className) )
                .insertBefore($input)
              ;
              if($input.hasClass(className.multiple) && $input.prop('multiple') === false) {
                module.error(error.missingMultiple);
                $input.prop('multiple', true);
            ***REMOVED***
              if($input.is('[multiple]')) {
                module.set.multiple();
            ***REMOVED***
              if ($input.prop('disabled')) {
                module.debug('Disabling dropdown');
                $module.addClass(className.disabled);
            ***REMOVED***
              $input
                .removeAttr('required')
                .removeAttr('class')
                .detach()
                .prependTo($module)
              ;
          ***REMOVED***
            module.refresh();
   ***REMOVED*****REMOVED***
          menu: function(values) {
            $menu.html( templates.menu(values, fields,settings.preserveHTML,settings.className));
            $item    = $menu.find(selector.item);
            $divider = settings.hideDividers ? $item.parent().children(selector.divider) : $();
   ***REMOVED*****REMOVED***
          reference: function() {
            module.debug('Dropdown behavior was called on select, replacing with closest dropdown');
            // replace module reference
            $module  = $module.parent(selector.dropdown);
            instance = $module.data(moduleNamespace);
            element  = $module.get(0);
            module.refresh();
            module.setup.returnedObject();
   ***REMOVED*****REMOVED***
          returnedObject: function() {
            var
              $firstModules = $allModules.slice(0, elementIndex),
              $lastModules  = $allModules.slice(elementIndex + 1)
            ;
            // adjust all modules to use correct reference
            $allModules = $firstModules.add($module).add($lastModules);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        refresh: function() {
          module.refreshSelectors();
          module.refreshData();
 ***REMOVED*****REMOVED***

        refreshItems: function() {
          $item    = $menu.find(selector.item);
          $divider = settings.hideDividers ? $item.parent().children(selector.divider) : $();
 ***REMOVED*****REMOVED***

        refreshSelectors: function() {
          module.verbose('Refreshing selector cache');
          $text   = $module.find(selector.text);
          $search = $module.find(selector.search);
          $input  = $module.find(selector.input);
          $icon   = $module.find(selector.icon);
          $combo  = ($module.prev().find(selector.text).length > 0)
            ? $module.prev().find(selector.text)
            : $module.prev()
          ;
          $menu    = $module.children(selector.menu);
          $item    = $menu.find(selector.item);
          $divider = settings.hideDividers ? $item.parent().children(selector.divider) : $();
 ***REMOVED*****REMOVED***

        refreshData: function() {
          module.verbose('Refreshing cached metadata');
          $item
            .removeData(metadata.text)
            .removeData(metadata.value)
          ;
 ***REMOVED*****REMOVED***

        clearData: function() {
          module.verbose('Clearing metadata');
          $item
            .removeData(metadata.text)
            .removeData(metadata.value)
          ;
          $module
            .removeData(metadata.defaultText)
            .removeData(metadata.defaultValue)
            .removeData(metadata.placeholderText)
          ;
 ***REMOVED*****REMOVED***

        toggle: function() {
          module.verbose('Toggling menu visibility');
          if( !module.is.active() ) {
            module.show();
        ***REMOVED***
          else {
            module.hide();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        show: function(callback, preventFocus) {
          callback = $.isFunction(callback)
            ? callback
            : function(){***REMOVED***
          ;
          if(!module.can.show() && module.is.remote()) {
            module.debug('No API results retrieved, searching before show');
            module.queryRemote(module.get.query(), module.show);
        ***REMOVED***
          if( module.can.show() && !module.is.active() ) {
            module.debug('Showing dropdown');
            if(module.has.message() && !(module.has.maxSelections() || module.has.allResultsFiltered()) ) {
              module.remove.message();
          ***REMOVED***
            if(module.is.allFiltered()) {
              return true;
          ***REMOVED***
            if(settings.onShow.call(element) !== false) {
              module.animate.show(function() {
                if( module.can.click() ) {
                  module.bind.intent();
              ***REMOVED***
                if(module.has.search() && !preventFocus) {
                  module.focusSearch();
              ***REMOVED***
                module.set.visible();
                callback.call(element);
            ***REMOVED***);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        hide: function(callback, preventBlur) {
          callback = $.isFunction(callback)
            ? callback
            : function(){***REMOVED***
          ;
          if( module.is.active() && !module.is.animatingOutward() ) {
            module.debug('Hiding dropdown');
            if(settings.onHide.call(element) !== false) {
              module.animate.hide(function() {
                module.remove.visible();
                // hidding search focus
                if ( module.is.focusedOnSearch() && preventBlur !== true ) {
                  $search.blur();
              ***REMOVED***
                callback.call(element);
            ***REMOVED***);
          ***REMOVED***
        ***REMOVED*** else if( module.can.click() ) {
              module.unbind.intent();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        hideOthers: function() {
          module.verbose('Finding other dropdowns to hide');
          $allModules
            .not($module)
              .has(selector.menu + '.' + className.visible)
                .dropdown('hide')
          ;
 ***REMOVED*****REMOVED***

        hideMenu: function() {
          module.verbose('Hiding menu  instantaneously');
          module.remove.active();
          module.remove.visible();
          $menu.transition('hide');
 ***REMOVED*****REMOVED***

        hideSubMenus: function() {
          var
            $subMenus = $menu.children(selector.item).find(selector.menu)
          ;
          module.verbose('Hiding sub menus', $subMenus);
          $subMenus.transition('hide');
 ***REMOVED*****REMOVED***

        bind: {
          events: function() {
            module.bind.keyboardEvents();
            module.bind.inputEvents();
            module.bind.mouseEvents();
   ***REMOVED*****REMOVED***
          keyboardEvents: function() {
            module.verbose('Binding keyboard events');
            $module
              .on('keydown' + eventNamespace, module.event.keydown)
            ;
            if( module.has.search() ) {
              $module
                .on(module.get.inputEvent() + eventNamespace, selector.search, module.event.input)
              ;
          ***REMOVED***
            if( module.is.multiple() ) {
              $document
                .on('keydown' + elementNamespace, module.event.document.keydown)
              ;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          inputEvents: function() {
            module.verbose('Binding input change events');
            $module
              .on('change' + eventNamespace, selector.input, module.event.change)
            ;
   ***REMOVED*****REMOVED***
          mouseEvents: function() {
            module.verbose('Binding mouse events');
            if(module.is.multiple()) {
              $module
                .on(clickEvent   + eventNamespace, selector.label,  module.event.label.click)
                .on(clickEvent   + eventNamespace, selector.remove, module.event.remove.click)
              ;
          ***REMOVED***
            if( module.is.searchSelection() ) {
              $module
                .on('mousedown' + eventNamespace, module.event.mousedown)
                .on('mouseup'   + eventNamespace, module.event.mouseup)
                .on('mousedown' + eventNamespace, selector.menu,   module.event.menu.mousedown)
                .on('mouseup'   + eventNamespace, selector.menu,   module.event.menu.mouseup)
                .on(clickEvent  + eventNamespace, selector.icon,   module.event.icon.click)
                .on(clickEvent  + eventNamespace, selector.clearIcon, module.event.clearIcon.click)
                .on('focus'     + eventNamespace, selector.search, module.event.search.focus)
                .on(clickEvent  + eventNamespace, selector.search, module.event.search.focus)
                .on('blur'      + eventNamespace, selector.search, module.event.search.blur)
                .on(clickEvent  + eventNamespace, selector.text,   module.event.text.focus)
              ;
              if(module.is.multiple()) {
                $module
                  .on(clickEvent + eventNamespace, module.event.click)
                ;
            ***REMOVED***
          ***REMOVED***
            else {
              if(settings.on == 'click') {
                $module
                  .on(clickEvent + eventNamespace, selector.icon, module.event.icon.click)
                  .on(clickEvent + eventNamespace, module.event.test.toggle)
                ;
            ***REMOVED***
              else if(settings.on == 'hover') {
                $module
                  .on('mouseenter' + eventNamespace, module.delay.show)
                  .on('mouseleave' + eventNamespace, module.delay.hide)
                ;
            ***REMOVED***
              else {
                $module
                  .on(settings.on + eventNamespace, module.toggle)
                ;
            ***REMOVED***
              $module
                .on('mousedown' + eventNamespace, module.event.mousedown)
                .on('mouseup'   + eventNamespace, module.event.mouseup)
                .on('focus'     + eventNamespace, module.event.focus)
                .on(clickEvent  + eventNamespace, selector.clearIcon, module.event.clearIcon.click)
              ;
              if(module.has.menuSearch() ) {
                $module
                  .on('blur' + eventNamespace, selector.search, module.event.search.blur)
                ;
            ***REMOVED***
              else {
                $module
                  .on('blur' + eventNamespace, module.event.blur)
                ;
            ***REMOVED***
          ***REMOVED***
            $menu
              .on((hasTouch ? 'touchstart' : 'mouseenter') + eventNamespace, selector.item, module.event.item.mouseenter)
              .on('mouseleave' + eventNamespace, selector.item, module.event.item.mouseleave)
              .on('click'      + eventNamespace, selector.item, module.event.item.click)
            ;
   ***REMOVED*****REMOVED***
          intent: function() {
            module.verbose('Binding hide intent event to document');
            if(hasTouch) {
              $document
                .on('touchstart' + elementNamespace, module.event.test.touch)
                .on('touchmove'  + elementNamespace, module.event.test.touch)
              ;
          ***REMOVED***
            $document
              .on(clickEvent + elementNamespace, module.event.test.hide)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        unbind: {
          intent: function() {
            module.verbose('Removing hide intent event from document');
            if(hasTouch) {
              $document
                .off('touchstart' + elementNamespace)
                .off('touchmove' + elementNamespace)
              ;
          ***REMOVED***
            $document
              .off(clickEvent + elementNamespace)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        filter: function(query) {
          var
            searchTerm = (query !== undefined)
              ? query
              : module.get.query(),
            afterFiltered = function() {
              if(module.is.multiple()) {
                module.filterActive();
            ***REMOVED***
              if(query || (!query && module.get.activeItem().length == 0)) {
                module.select.firstUnfiltered();
            ***REMOVED***
              if( module.has.allResultsFiltered() ) {
                if( settings.onNoResults.call(element, searchTerm) ) {
                  if(settings.allowAdditions) {
                    if(settings.hideAdditions) {
                      module.verbose('User addition with no menu, setting empty style');
                      module.set.empty();
                      module.hideMenu();
                  ***REMOVED***
                ***REMOVED***
                  else {
                    module.verbose('All items filtered, showing message', searchTerm);
                    module.add.message(message.noResults);
                ***REMOVED***
              ***REMOVED***
                else {
                  module.verbose('All items filtered, hiding dropdown', searchTerm);
                  module.hideMenu();
              ***REMOVED***
            ***REMOVED***
              else {
                module.remove.empty();
                module.remove.message();
            ***REMOVED***
              if(settings.allowAdditions) {
                module.add.userSuggestion(module.escape.htmlEntities(query));
            ***REMOVED***
              if(module.is.searchSelection() && module.can.show() && module.is.focusedOnSearch() ) {
                module.show();
            ***REMOVED***
          ***REMOVED***
          ;
          if(settings.useLabels && module.has.maxSelections()) {
            return;
        ***REMOVED***
          if(settings.apiSettings) {
            if( module.can.useAPI() ) {
              module.queryRemote(searchTerm, function() {
                if(settings.filterRemoteData) {
                  module.filterItems(searchTerm);
              ***REMOVED***
                var preSelected = $input.val();
                if(!Array.isArray(preSelected)) {
                    preSelected = preSelected && preSelected!=="" ? preSelected.split(settings.delimiter) : [];
              ***REMOVED***
                $.each(preSelected,function(index,value){
                  $item.filter('[data-value="'+value+'"]')
                      .addClass(className.filtered)
                  ;
              ***REMOVED***);
                afterFiltered();
            ***REMOVED***);
          ***REMOVED***
            else {
              module.error(error.noAPI);
          ***REMOVED***
        ***REMOVED***
          else {
            module.filterItems(searchTerm);
            afterFiltered();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        queryRemote: function(query, callback) {
          var
            apiSettings = {
              errorDuration : false,
              cache         : 'local',
              throttle      : settings.throttle,
              urlData       : {
                query: query
  ***REMOVED*****REMOVED*****REMOVED***
              onError: function() {
                module.add.message(message.serverError);
                callback();
  ***REMOVED*****REMOVED*****REMOVED***
              onFailure: function() {
                module.add.message(message.serverError);
                callback();
  ***REMOVED*****REMOVED*****REMOVED***
              onSuccess : function(response) {
                var
                  values          = response[fields.remoteValues]
                ;
                if (!Array.isArray(values)){
                    values = [];
              ***REMOVED***
                module.remove.message();
                module.setup.menu({
                  values: values
              ***REMOVED***);

                if(values.length===0 && !settings.allowAdditions) {
                  module.add.message(message.noResults);
              ***REMOVED***
                callback();
            ***REMOVED***
          ***REMOVED***
          ;
          if( !$module.api('get request') ) {
            module.setup.api();
        ***REMOVED***
          apiSettings = $.extend(true, {***REMOVED***, apiSettings, settings.apiSettings);
          $module
            .api('setting', apiSettings)
            .api('query')
          ;
 ***REMOVED*****REMOVED***

        filterItems: function(query) {
          var
            searchTerm = module.remove.diacritics(query !== undefined
              ? query
              : module.get.query()
            ),
            results          =  null,
            escapedTerm      = module.escape.string(searchTerm),
            regExpFlags      = (settings.ignoreSearchCase ? 'i' : '') + 'gm',
            beginsWithRegExp = new RegExp('^' + escapedTerm, regExpFlags)
          ;
          // avoid loop if we're matching nothing
          if( module.has.query() ) {
            results = [];

            module.verbose('Searching for matching values', searchTerm);
            $item
              .each(function(){
                var
                  $choice = $(this),
                  text,
                  value
                ;
                if($choice.hasClass(className.unfilterable)) {
                  results.push(this);
                  return true;
              ***REMOVED***
                if(settings.match === 'both' || settings.match === 'text') {
                  text = module.remove.diacritics(String(module.get.choiceText($choice, false)));
                  if(text.search(beginsWithRegExp) !== -1) {
                    results.push(this);
                    return true;
                ***REMOVED***
                  else if (settings.fullTextSearch === 'exact' && module.exactSearch(searchTerm, text)) {
                    results.push(this);
                    return true;
                ***REMOVED***
                  else if (settings.fullTextSearch === true && module.fuzzySearch(searchTerm, text)) {
                    results.push(this);
                    return true;
                ***REMOVED***
              ***REMOVED***
                if(settings.match === 'both' || settings.match === 'value') {
                  value = module.remove.diacritics(String(module.get.choiceValue($choice, text)));
                  if(value.search(beginsWithRegExp) !== -1) {
                    results.push(this);
                    return true;
                ***REMOVED***
                  else if (settings.fullTextSearch === 'exact' && module.exactSearch(searchTerm, value)) {
                    results.push(this);
                    return true;
                ***REMOVED***
                  else if (settings.fullTextSearch === true && module.fuzzySearch(searchTerm, value)) {
                    results.push(this);
                    return true;
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***)
            ;
        ***REMOVED***
          module.debug('Showing only matched items', searchTerm);
          module.remove.filteredItem();
          if(results) {
            $item
              .not(results)
              .addClass(className.filtered)
            ;
        ***REMOVED***

          if(!module.has.query()) {
            $divider
              .removeClass(className.hidden);
        ***REMOVED*** else if(settings.hideDividers === true) {
            $divider
              .addClass(className.hidden);
        ***REMOVED*** else if(settings.hideDividers === 'empty') {
            $divider
              .removeClass(className.hidden)
              .filter(function() {
                // First find the last divider in this divider group
                // Dividers which are direct siblings are considered a group
                var lastDivider = $(this).nextUntil(selector.item);

                return (lastDivider.length ? lastDivider : $(this))
                // Count all non-filtered items until the next divider (or end of the dropdown)
                  .nextUntil(selector.divider)
                  .filter(selector.item + ":not(." + className.filtered + ")")
                  // Hide divider if no items are found
                  .length === 0;
            ***REMOVED***)
              .addClass(className.hidden);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        fuzzySearch: function(query, term) {
          var
            termLength  = term.length,
            queryLength = query.length
          ;
          query = (settings.ignoreSearchCase ? query.toLowerCase() : query);
          term  = (settings.ignoreSearchCase ? term.toLowerCase() : term);
          if(queryLength > termLength) {
            return false;
        ***REMOVED***
          if(queryLength === termLength) {
            return (query === term);
        ***REMOVED***
          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {
            var
              queryCharacter = query.charCodeAt(characterIndex)
            ;
            while(nextCharacterIndex < termLength) {
              if(term.charCodeAt(nextCharacterIndex++) === queryCharacter) {
                continue search;
            ***REMOVED***
          ***REMOVED***
            return false;
        ***REMOVED***
          return true;
 ***REMOVED*****REMOVED***
        exactSearch: function (query, term) {
          query = (settings.ignoreSearchCase ? query.toLowerCase() : query);
          term  = (settings.ignoreSearchCase ? term.toLowerCase() : term);
          return term.indexOf(query) > -1;

 ***REMOVED*****REMOVED***
        filterActive: function() {
          if(settings.useLabels) {
            $item.filter('.' + className.active)
              .addClass(className.filtered)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        focusSearch: function(skipHandler) {
          if( module.has.search() && !module.is.focusedOnSearch() ) {
            if(skipHandler) {
              $module.off('focus' + eventNamespace, selector.search);
              $search.focus();
              $module.on('focus'  + eventNamespace, selector.search, module.event.search.focus);
          ***REMOVED***
            else {
              $search.focus();
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        blurSearch: function() {
          if( module.has.search() ) {
            $search.blur();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        forceSelection: function() {
          var
            $currentlySelected = $item.not(className.filtered).filter('.' + className.selected).eq(0),
            $activeItem        = $item.not(className.filtered).filter('.' + className.active).eq(0),
            $selectedItem      = ($currentlySelected.length > 0)
              ? $currentlySelected
              : $activeItem,
            hasSelected = ($selectedItem.length > 0)
          ;
          if(settings.allowAdditions || (hasSelected && !module.is.multiple())) {
            module.debug('Forcing partial selection to selected item', $selectedItem);
            module.event.item.click.call($selectedItem, {***REMOVED***, true);
        ***REMOVED***
          else {
            module.remove.searchTerm();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        change: {
          values: function(values) {
            if(!settings.allowAdditions) {
              module.clear();
          ***REMOVED***
            module.debug('Creating dropdown with specified values', values);
            module.setup.menu({values: values***REMOVED***);
            $.each(values, function(index, item) {
              if(item.selected == true) {
                module.debug('Setting initial selection to', item[fields.value]);
                module.set.selected(item[fields.value]);
                if(!module.is.multiple()) {
                  return false;
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***);

            if(module.has.selectInput()) {
              module.disconnect.selectObserver();
              $input.html('');
              $input.append('<option disabled selected value></option>');
              $.each(values, function(index, item) {
                var
                  value = settings.templates.deQuote(item[fields.value]),
                  name = settings.templates.escape(
                    item[fields.name] || '',
                    settings.preserveHTML
                  )
                ;
                $input.append('<option value="' + value + '">' + name + '</option>');
            ***REMOVED***);
              module.observe.select();
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        event: {
          change: function() {
            if(!internalChange) {
              module.debug('Input changed, updating selection');
              module.set.selected();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          focus: function() {
            if(settings.showOnFocus && !activated && module.is.hidden() && !pageLostFocus) {
              module.show();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          blur: function(event) {
            pageLostFocus = (document.activeElement === this);
            if(!activated && !pageLostFocus) {
              module.remove.activeLabel();
              module.hide();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          mousedown: function() {
            if(module.is.searchSelection()) {
              // prevent menu hiding on immediate re-focus
              willRefocus = true;
          ***REMOVED***
            else {
              // prevents focus callback from occurring on mousedown
              activated = true;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          mouseup: function() {
            if(module.is.searchSelection()) {
              // prevent menu hiding on immediate re-focus
              willRefocus = false;
          ***REMOVED***
            else {
              activated = false;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          click: function(event) {
            var
              $target = $(event.target)
            ;
            // focus search
            if($target.is($module)) {
              if(!module.is.focusedOnSearch()) {
                module.focusSearch();
            ***REMOVED***
              else {
                module.show();
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***
          search: {
            focus: function(event) {
              activated = true;
              if(module.is.multiple()) {
                module.remove.activeLabel();
            ***REMOVED***
              if(settings.showOnFocus || (event.type !== 'focus' && event.type !== 'focusin')) {
                module.search();
            ***REMOVED***
***REMOVED*****REMOVED*****REMOVED***
            blur: function(event) {
              pageLostFocus = (document.activeElement === this);
              if(module.is.searchSelection() && !willRefocus) {
                if(!itemActivated && !pageLostFocus) {
                  if(settings.forceSelection) {
                    module.forceSelection();
                ***REMOVED*** else if(!settings.allowAdditions){
                    module.remove.searchTerm();
                ***REMOVED***
                  module.hide();
              ***REMOVED***
            ***REMOVED***
              willRefocus = false;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          clearIcon: {
            click: function(event) {
              module.clear();
              if(module.is.searchSelection()) {
                module.remove.searchTerm();
            ***REMOVED***
              module.hide();
              event.stopPropagation();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          icon: {
            click: function(event) {
              iconClicked=true;
              if(module.has.search()) {
                if(!module.is.active()) {
                    if(settings.showOnFocus){
                      module.focusSearch();
                  ***REMOVED*** else {
                      module.toggle();
                  ***REMOVED***
              ***REMOVED*** else {
                  module.blurSearch();
              ***REMOVED***
            ***REMOVED*** else {
                module.toggle();
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***
          text: {
            focus: function(event) {
              activated = true;
              module.focusSearch();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          input: function(event) {
            if(module.is.multiple() || module.is.searchSelection()) {
              module.set.filtered();
          ***REMOVED***
            clearTimeout(module.timer);
            module.timer = setTimeout(module.search, settings.delay.search);
   ***REMOVED*****REMOVED***
          label: {
            click: function(event) {
              var
                $label        = $(this),
                $labels       = $module.find(selector.label),
                $activeLabels = $labels.filter('.' + className.active),
                $nextActive   = $label.nextAll('.' + className.active),
                $prevActive   = $label.prevAll('.' + className.active),
                $range = ($nextActive.length > 0)
                  ? $label.nextUntil($nextActive).add($activeLabels).add($label)
                  : $label.prevUntil($prevActive).add($activeLabels).add($label)
              ;
              if(event.shiftKey) {
                $activeLabels.removeClass(className.active);
                $range.addClass(className.active);
            ***REMOVED***
              else if(event.ctrlKey) {
                $label.toggleClass(className.active);
            ***REMOVED***
              else {
                $activeLabels.removeClass(className.active);
                $label.addClass(className.active);
            ***REMOVED***
              settings.onLabelSelect.apply(this, $labels.filter('.' + className.active));
          ***REMOVED***
   ***REMOVED*****REMOVED***
          remove: {
            click: function() {
              var
                $label = $(this).parent()
              ;
              if( $label.hasClass(className.active) ) {
                // remove all selected labels
                module.remove.activeLabels();
            ***REMOVED***
              else {
                // remove this label only
                module.remove.activeLabels( $label );
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***
          test: {
            toggle: function(event) {
              var
                toggleBehavior = (module.is.multiple())
                  ? module.show
                  : module.toggle
              ;
              if(module.is.bubbledLabelClick(event) || module.is.bubbledIconClick(event)) {
                return;
            ***REMOVED***
              if( module.determine.eventOnElement(event, toggleBehavior) ) {
                event.preventDefault();
            ***REMOVED***
***REMOVED*****REMOVED*****REMOVED***
            touch: function(event) {
              module.determine.eventOnElement(event, function() {
                if(event.type == 'touchstart') {
                  module.timer = setTimeout(function() {
                    module.hide();
      ***REMOVED*****REMOVED*****REMOVED*** settings.delay.touch);
              ***REMOVED***
                else if(event.type == 'touchmove') {
                  clearTimeout(module.timer);
              ***REMOVED***
            ***REMOVED***);
              event.stopPropagation();
***REMOVED*****REMOVED*****REMOVED***
            hide: function(event) {
              if(module.determine.eventInModule(event, module.hide)){
                if(element.id && $(event.target).attr('for') === element.id){
                  event.preventDefault();
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***
          select: {
            mutation: function(mutations) {
              module.debug('<select> modified, recreating menu');
              if(module.is.selectMutation(mutations)) {
                module.disconnect.selectObserver();
                module.refresh();
                module.setup.select();
                module.set.selected();
                module.observe.select();
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***
          menu: {
            mutation: function(mutations) {
              var
                mutation   = mutations[0],
                $addedNode = mutation.addedNodes
                  ? $(mutation.addedNodes[0])
                  : $(false),
                $removedNode = mutation.removedNodes
                  ? $(mutation.removedNodes[0])
                  : $(false),
                $changedNodes  = $addedNode.add($removedNode),
                isUserAddition = $changedNodes.is(selector.addition) || $changedNodes.closest(selector.addition).length > 0,
                isMessage      = $changedNodes.is(selector.message)  || $changedNodes.closest(selector.message).length > 0
              ;
              if(isUserAddition || isMessage) {
                module.debug('Updating item selector cache');
                module.refreshItems();
            ***REMOVED***
              else {
                module.debug('Menu modified, updating selector cache');
                module.refresh();
            ***REMOVED***
***REMOVED*****REMOVED*****REMOVED***
            mousedown: function() {
              itemActivated = true;
***REMOVED*****REMOVED*****REMOVED***
            mouseup: function() {
              itemActivated = false;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          item: {
            mouseenter: function(event) {
              var
                $target        = $(event.target),
                $item          = $(this),
                $subMenu       = $item.children(selector.menu),
                $otherMenus    = $item.siblings(selector.item).children(selector.menu),
                hasSubMenu     = ($subMenu.length > 0),
                isBubbledEvent = ($subMenu.find($target).length > 0)
              ;
              if( !isBubbledEvent && hasSubMenu ) {
                clearTimeout(module.itemTimer);
                module.itemTimer = setTimeout(function() {
                  module.verbose('Showing sub-menu', $subMenu);
                  $.each($otherMenus, function() {
                    module.animate.hide(false, $(this));
                ***REMOVED***);
                  module.animate.show(false, $subMenu);
    ***REMOVED*****REMOVED*****REMOVED*** settings.delay.show);
                event.preventDefault();
            ***REMOVED***
***REMOVED*****REMOVED*****REMOVED***
            mouseleave: function(event) {
              var
                $subMenu = $(this).children(selector.menu)
              ;
              if($subMenu.length > 0) {
                clearTimeout(module.itemTimer);
                module.itemTimer = setTimeout(function() {
                  module.verbose('Hiding sub-menu', $subMenu);
                  module.animate.hide(false, $subMenu);
    ***REMOVED*****REMOVED*****REMOVED*** settings.delay.hide);
            ***REMOVED***
***REMOVED*****REMOVED*****REMOVED***
            click: function (event, skipRefocus) {
              var
                $choice        = $(this),
                $target        = (event)
                  ? $(event.target)
                  : $(''),
                $subMenu       = $choice.find(selector.menu),
                text           = module.get.choiceText($choice),
                value          = module.get.choiceValue($choice, text),
                hasSubMenu     = ($subMenu.length > 0),
                isBubbledEvent = ($subMenu.find($target).length > 0)
              ;
              // prevents IE11 bug where menu receives focus even though `tabindex=-1`
              if (document.activeElement.tagName.toLowerCase() !== 'input') {
                $(document.activeElement).blur();
            ***REMOVED***
              if(!isBubbledEvent && (!hasSubMenu || settings.allowCategorySelection)) {
                if(module.is.searchSelection()) {
                  if(settings.allowAdditions) {
                    module.remove.userAddition();
                ***REMOVED***
                  module.remove.searchTerm();
                  if(!module.is.focusedOnSearch() && !(skipRefocus == true)) {
                    module.focusSearch(true);
                ***REMOVED***
              ***REMOVED***
                if(!settings.useLabels) {
                  module.remove.filteredItem();
                  module.set.scrollPosition($choice);
              ***REMOVED***
                module.determine.selectAction.call(this, text, value);
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***

          document: {
            // label selection should occur even when element has no focus
            keydown: function(event) {
              var
                pressedKey    = event.which,
                isShortcutKey = module.is.inObject(pressedKey, keys)
              ;
              if(isShortcutKey) {
                var
                  $label            = $module.find(selector.label),
                  $activeLabel      = $label.filter('.' + className.active),
                  activeValue       = $activeLabel.data(metadata.value),
                  labelIndex        = $label.index($activeLabel),
                  labelCount        = $label.length,
                  hasActiveLabel    = ($activeLabel.length > 0),
                  hasMultipleActive = ($activeLabel.length > 1),
                  isFirstLabel      = (labelIndex === 0),
                  isLastLabel       = (labelIndex + 1 == labelCount),
                  isSearch          = module.is.searchSelection(),
                  isFocusedOnSearch = module.is.focusedOnSearch(),
                  isFocused         = module.is.focused(),
                  caretAtStart      = (isFocusedOnSearch && module.get.caretPosition(false) === 0),
                  isSelectedSearch  = (caretAtStart && module.get.caretPosition(true) !== 0),
                  $nextLabel
                ;
                if(isSearch && !hasActiveLabel && !isFocusedOnSearch) {
                  return;
              ***REMOVED***

                if(pressedKey == keys.leftArrow) {
                  // activate previous label
                  if((isFocused || caretAtStart) && !hasActiveLabel) {
                    module.verbose('Selecting previous label');
                    $label.last().addClass(className.active);
                ***REMOVED***
                  else if(hasActiveLabel) {
                    if(!event.shiftKey) {
                      module.verbose('Selecting previous label');
                      $label.removeClass(className.active);
                  ***REMOVED***
                    else {
                      module.verbose('Adding previous label to selection');
                  ***REMOVED***
                    if(isFirstLabel && !hasMultipleActive) {
                      $activeLabel.addClass(className.active);
                  ***REMOVED***
                    else {
                      $activeLabel.prev(selector.siblingLabel)
                        .addClass(className.active)
                        .end()
                      ;
                  ***REMOVED***
                    event.preventDefault();
                ***REMOVED***
              ***REMOVED***
                else if(pressedKey == keys.rightArrow) {
                  // activate first label
                  if(isFocused && !hasActiveLabel) {
                    $label.first().addClass(className.active);
                ***REMOVED***
                  // activate next label
                  if(hasActiveLabel) {
                    if(!event.shiftKey) {
                      module.verbose('Selecting next label');
                      $label.removeClass(className.active);
                  ***REMOVED***
                    else {
                      module.verbose('Adding next label to selection');
                  ***REMOVED***
                    if(isLastLabel) {
                      if(isSearch) {
                        if(!isFocusedOnSearch) {
                          module.focusSearch();
                      ***REMOVED***
                        else {
                          $label.removeClass(className.active);
                      ***REMOVED***
                    ***REMOVED***
                      else if(hasMultipleActive) {
                        $activeLabel.next(selector.siblingLabel).addClass(className.active);
                    ***REMOVED***
                      else {
                        $activeLabel.addClass(className.active);
                    ***REMOVED***
                  ***REMOVED***
                    else {
                      $activeLabel.next(selector.siblingLabel).addClass(className.active);
                  ***REMOVED***
                    event.preventDefault();
                ***REMOVED***
              ***REMOVED***
                else if(pressedKey == keys.deleteKey || pressedKey == keys.backspace) {
                  if(hasActiveLabel) {
                    module.verbose('Removing active labels');
                    if(isLastLabel) {
                      if(isSearch && !isFocusedOnSearch) {
                        module.focusSearch();
                    ***REMOVED***
                  ***REMOVED***
                    $activeLabel.last().next(selector.siblingLabel).addClass(className.active);
                    module.remove.activeLabels($activeLabel);
                    event.preventDefault();
                ***REMOVED***
                  else if(caretAtStart && !isSelectedSearch && !hasActiveLabel && pressedKey == keys.backspace) {
                    module.verbose('Removing last label on input backspace');
                    $activeLabel = $label.last().addClass(className.active);
                    module.remove.activeLabels($activeLabel);
                ***REMOVED***
              ***REMOVED***
                else {
                  $activeLabel.removeClass(className.active);
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***

          keydown: function(event) {
            var
              pressedKey    = event.which,
              isShortcutKey = module.is.inObject(pressedKey, keys)
            ;
            if(isShortcutKey) {
              var
                $currentlySelected = $item.not(selector.unselectable).filter('.' + className.selected).eq(0),
                $activeItem        = $menu.children('.' + className.active).eq(0),
                $selectedItem      = ($currentlySelected.length > 0)
                  ? $currentlySelected
                  : $activeItem,
                $visibleItems = ($selectedItem.length > 0)
                  ? $selectedItem.siblings(':not(.' + className.filtered +')').addBack()
                  : $menu.children(':not(.' + className.filtered +')'),
                $subMenu              = $selectedItem.children(selector.menu),
                $parentMenu           = $selectedItem.closest(selector.menu),
                inVisibleMenu         = ($parentMenu.hasClass(className.visible) || $parentMenu.hasClass(className.animating) || $parentMenu.parent(selector.menu).length > 0),
                hasSubMenu            = ($subMenu.length> 0),
                hasSelectedItem       = ($selectedItem.length > 0),
                selectedIsSelectable  = ($selectedItem.not(selector.unselectable).length > 0),
                delimiterPressed      = (pressedKey == keys.delimiter && settings.allowAdditions && module.is.multiple()),
                isAdditionWithoutMenu = (settings.allowAdditions && settings.hideAdditions && (pressedKey == keys.enter || delimiterPressed) && selectedIsSelectable),
                $nextItem,
                isSubMenuItem,
                newIndex
              ;
              // allow selection with menu closed
              if(isAdditionWithoutMenu) {
                module.verbose('Selecting item from keyboard shortcut', $selectedItem);
                module.event.item.click.call($selectedItem, event);
                if(module.is.searchSelection()) {
                  module.remove.searchTerm();
              ***REMOVED***
                if(module.is.multiple()){
                    event.preventDefault();
              ***REMOVED***
            ***REMOVED***

              // visible menu keyboard shortcuts
              if( module.is.visible() ) {

                // enter (select or open sub-menu)
                if(pressedKey == keys.enter || delimiterPressed) {
                  if(pressedKey == keys.enter && hasSelectedItem && hasSubMenu && !settings.allowCategorySelection) {
                    module.verbose('Pressed enter on unselectable category, opening sub menu');
                    pressedKey = keys.rightArrow;
                ***REMOVED***
                  else if(selectedIsSelectable) {
                    module.verbose('Selecting item from keyboard shortcut', $selectedItem);
                    module.event.item.click.call($selectedItem, event);
                    if(module.is.searchSelection()) {
                      module.remove.searchTerm();
                      if(module.is.multiple()) {
                          $search.focus();
                    ***REMOVED***
                  ***REMOVED***
                ***REMOVED***
                  event.preventDefault();
              ***REMOVED***

                // sub-menu actions
                if(hasSelectedItem) {

                  if(pressedKey == keys.leftArrow) {

                    isSubMenuItem = ($parentMenu[0] !== $menu[0]);

                    if(isSubMenuItem) {
                      module.verbose('Left key pressed, closing sub-menu');
                      module.animate.hide(false, $parentMenu);
                      $selectedItem
                        .removeClass(className.selected)
                      ;
                      $parentMenu
                        .closest(selector.item)
                          .addClass(className.selected)
                      ;
                      event.preventDefault();
                  ***REMOVED***
                ***REMOVED***

                  // right arrow (show sub-menu)
                  if(pressedKey == keys.rightArrow) {
                    if(hasSubMenu) {
                      module.verbose('Right key pressed, opening sub-menu');
                      module.animate.show(false, $subMenu);
                      $selectedItem
                        .removeClass(className.selected)
                      ;
                      $subMenu
                        .find(selector.item).eq(0)
                          .addClass(className.selected)
                      ;
                      event.preventDefault();
                  ***REMOVED***
                ***REMOVED***
              ***REMOVED***

                // up arrow (traverse menu up)
                if(pressedKey == keys.upArrow) {
                  $nextItem = (hasSelectedItem && inVisibleMenu)
                    ? $selectedItem.prevAll(selector.item + ':not(' + selector.unselectable + ')').eq(0)
                    : $item.eq(0)
                  ;
                  if($visibleItems.index( $nextItem ) < 0) {
                    module.verbose('Up key pressed but reached top of current menu');
                    event.preventDefault();
                    return;
                ***REMOVED***
                  else {
                    module.verbose('Up key pressed, changing active item');
                    $selectedItem
                      .removeClass(className.selected)
                    ;
                    $nextItem
                      .addClass(className.selected)
                    ;
                    module.set.scrollPosition($nextItem);
                    if(settings.selectOnKeydown && module.is.single()) {
                      module.set.selectedItem($nextItem);
                  ***REMOVED***
                ***REMOVED***
                  event.preventDefault();
              ***REMOVED***

                // down arrow (traverse menu down)
                if(pressedKey == keys.downArrow) {
                  $nextItem = (hasSelectedItem && inVisibleMenu)
                    ? $nextItem = $selectedItem.nextAll(selector.item + ':not(' + selector.unselectable + ')').eq(0)
                    : $item.eq(0)
                  ;
                  if($nextItem.length === 0) {
                    module.verbose('Down key pressed but reached bottom of current menu');
                    event.preventDefault();
                    return;
                ***REMOVED***
                  else {
                    module.verbose('Down key pressed, changing active item');
                    $item
                      .removeClass(className.selected)
                    ;
                    $nextItem
                      .addClass(className.selected)
                    ;
                    module.set.scrollPosition($nextItem);
                    if(settings.selectOnKeydown && module.is.single()) {
                      module.set.selectedItem($nextItem);
                  ***REMOVED***
                ***REMOVED***
                  event.preventDefault();
              ***REMOVED***

                // page down (show next page)
                if(pressedKey == keys.pageUp) {
                  module.scrollPage('up');
                  event.preventDefault();
              ***REMOVED***
                if(pressedKey == keys.pageDown) {
                  module.scrollPage('down');
                  event.preventDefault();
              ***REMOVED***

                // escape (close menu)
                if(pressedKey == keys.escape) {
                  module.verbose('Escape key pressed, closing dropdown');
                  module.hide();
              ***REMOVED***

            ***REMOVED***
              else {
                // delimiter key
                if(delimiterPressed) {
                  event.preventDefault();
              ***REMOVED***
                // down arrow (open menu)
                if(pressedKey == keys.downArrow && !module.is.visible()) {
                  module.verbose('Down key pressed, showing dropdown');
                  module.show();
                  event.preventDefault();
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
            else {
              if( !module.has.search() ) {
                module.set.selectedLetter( String.fromCharCode(pressedKey) );
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        trigger: {
          change: function() {
            var
              events       = document.createEvent('HTMLEvents'),
              inputElement = $input[0]
            ;
            if(inputElement) {
              module.verbose('Triggering native change event');
              events.initEvent('change', true, false);
              inputElement.dispatchEvent(events);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        determine: {
          selectAction: function(text, value) {
            selectActionActive = true;
            module.verbose('Determining action', settings.action);
            if( $.isFunction( module.action[settings.action] ) ) {
              module.verbose('Triggering preset action', settings.action, text, value);
              module.action[ settings.action ].call(element, text, value, this);
          ***REMOVED***
            else if( $.isFunction(settings.action) ) {
              module.verbose('Triggering user action', settings.action, text, value);
              settings.action.call(element, text, value, this);
          ***REMOVED***
            else {
              module.error(error.action, settings.action);
          ***REMOVED***
            selectActionActive = false;
   ***REMOVED*****REMOVED***
          eventInModule: function(event, callback) {
            var
              $target    = $(event.target),
              inDocument = ($target.closest(document.documentElement).length > 0),
              inModule   = ($target.closest($module).length > 0)
            ;
            callback = $.isFunction(callback)
              ? callback
              : function(){***REMOVED***
            ;
            if(inDocument && !inModule) {
              module.verbose('Triggering event', callback);
              callback();
              return true;
          ***REMOVED***
            else {
              module.verbose('Event occurred in dropdown, canceling callback');
              return false;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          eventOnElement: function(event, callback) {
            var
              $target      = $(event.target),
              $label       = $target.closest(selector.siblingLabel),
              inVisibleDOM = document.body.contains(event.target),
              notOnLabel   = ($module.find($label).length === 0 || !(module.is.multiple() && settings.useLabels)),
              notInMenu    = ($target.closest($menu).length === 0)
            ;
            callback = $.isFunction(callback)
              ? callback
              : function(){***REMOVED***
            ;
            if(inVisibleDOM && notOnLabel && notInMenu) {
              module.verbose('Triggering event', callback);
              callback();
              return true;
          ***REMOVED***
            else {
              module.verbose('Event occurred in dropdown menu, canceling callback');
              return false;
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        action: {

          nothing: function() {***REMOVED***,

          activate: function(text, value, element) {
            value = (value !== undefined)
              ? value
              : text
            ;
            if( module.can.activate( $(element) ) ) {
              module.set.selected(value, $(element));
              if(!module.is.multiple()) {
                module.hideAndClear();
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***

          select: function(text, value, element) {
            value = (value !== undefined)
              ? value
              : text
            ;
            if( module.can.activate( $(element) ) ) {
              module.set.value(value, text, $(element));
              if(!module.is.multiple()) {
                module.hideAndClear();
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***

          combo: function(text, value, element) {
            value = (value !== undefined)
              ? value
              : text
            ;
            module.set.selected(value, $(element));
            module.hideAndClear();
   ***REMOVED*****REMOVED***

          hide: function(text, value, element) {
            module.set.value(value, text, $(element));
            module.hideAndClear();
        ***REMOVED***

 ***REMOVED*****REMOVED***

        get: {
          id: function() {
            return id;
   ***REMOVED*****REMOVED***
          defaultText: function() {
            return $module.data(metadata.defaultText);
   ***REMOVED*****REMOVED***
          defaultValue: function() {
            return $module.data(metadata.defaultValue);
   ***REMOVED*****REMOVED***
          placeholderText: function() {
            if(settings.placeholder != 'auto' && typeof settings.placeholder == 'string') {
              return settings.placeholder;
          ***REMOVED***
            return $module.data(metadata.placeholderText) || '';
   ***REMOVED*****REMOVED***
          text: function() {
            return $text.text();
   ***REMOVED*****REMOVED***
          query: function() {
            return $.trim($search.val());
   ***REMOVED*****REMOVED***
          searchWidth: function(value) {
            value = (value !== undefined)
              ? value
              : $search.val()
            ;
            $sizer.text(value);
            // prevent rounding issues
            return Math.ceil( $sizer.width() + 1);
   ***REMOVED*****REMOVED***
          selectionCount: function() {
            var
              values = module.get.values(),
              count
            ;
            count = ( module.is.multiple() )
              ? Array.isArray(values)
                ? values.length
                : 0
              : (module.get.value() !== '')
                ? 1
                : 0
            ;
            return count;
   ***REMOVED*****REMOVED***
          transition: function($subMenu) {
            return (settings.transition == 'auto')
              ? module.is.upward($subMenu)
                ? 'slide up'
                : 'slide down'
              : settings.transition
            ;
   ***REMOVED*****REMOVED***
          userValues: function() {
            var
              values = module.get.values()
            ;
            if(!values) {
              return false;
          ***REMOVED***
            values = Array.isArray(values)
              ? values
              : [values]
            ;
            return $.grep(values, function(value) {
              return (module.get.item(value) === false);
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          uniqueArray: function(array) {
            return $.grep(array, function (value, index) {
                return $.inArray(value, array) === index;
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          caretPosition: function(returnEndPos) {
            var
              input = $search.get(0),
              range,
              rangeLength
            ;
            if(returnEndPos && 'selectionEnd' in input){
              return input.selectionEnd;
          ***REMOVED***
            else if(!returnEndPos && 'selectionStart' in input) {
              return input.selectionStart;
          ***REMOVED***
            if (document.selection) {
              input.focus();
              range       = document.selection.createRange();
              rangeLength = range.text.length;
              if(returnEndPos) {
                return rangeLength;
            ***REMOVED***
              range.moveStart('character', -input.value.length);
              return range.text.length - rangeLength;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          value: function() {
            var
              value = ($input.length > 0)
                ? $input.val()
                : $module.data(metadata.value),
              isEmptyMultiselect = (Array.isArray(value) && value.length === 1 && value[0] === '')
            ;
            // prevents placeholder element from being selected when multiple
            return (value === undefined || isEmptyMultiselect)
              ? ''
              : value
            ;
   ***REMOVED*****REMOVED***
          values: function() {
            var
              value = module.get.value()
            ;
            if(value === '') {
              return '';
          ***REMOVED***
            return ( !module.has.selectInput() && module.is.multiple() )
              ? (typeof value == 'string') // delimited string
                ? module.escape.htmlEntities(value).split(settings.delimiter)
                : ''
              : value
            ;
   ***REMOVED*****REMOVED***
          remoteValues: function() {
            var
              values = module.get.values(),
              remoteValues = false
            ;
            if(values) {
              if(typeof values == 'string') {
                values = [values];
            ***REMOVED***
              $.each(values, function(index, value) {
                var
                  name = module.read.remoteData(value)
                ;
                module.verbose('Restoring value from session data', name, value);
                if(name) {
                  if(!remoteValues) {
                    remoteValues = {***REMOVED***;
                ***REMOVED***
                  remoteValues[value] = name;
              ***REMOVED***
            ***REMOVED***);
          ***REMOVED***
            return remoteValues;
   ***REMOVED*****REMOVED***
          choiceText: function($choice, preserveHTML) {
            preserveHTML = (preserveHTML !== undefined)
              ? preserveHTML
              : settings.preserveHTML
            ;
            if($choice) {
              if($choice.find(selector.menu).length > 0) {
                module.verbose('Retrieving text of element with sub-menu');
                $choice = $choice.clone();
                $choice.find(selector.menu).remove();
                $choice.find(selector.menuIcon).remove();
            ***REMOVED***
              return ($choice.data(metadata.text) !== undefined)
                ? $choice.data(metadata.text)
                : (preserveHTML)
                  ? $.trim($choice.html())
                  : $.trim($choice.text())
              ;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          choiceValue: function($choice, choiceText) {
            choiceText = choiceText || module.get.choiceText($choice);
            if(!$choice) {
              return false;
          ***REMOVED***
            return ($choice.data(metadata.value) !== undefined)
              ? String( $choice.data(metadata.value) )
              : (typeof choiceText === 'string')
                ? $.trim(
                  settings.ignoreSearchCase
                  ? choiceText.toLowerCase()
                  : choiceText
                )
                : String(choiceText)
            ;
   ***REMOVED*****REMOVED***
          inputEvent: function() {
            var
              input = $search[0]
            ;
            if(input) {
              return (input.oninput !== undefined)
                ? 'input'
                : (input.onpropertychange !== undefined)
                  ? 'propertychange'
                  : 'keyup'
              ;
          ***REMOVED***
            return false;
   ***REMOVED*****REMOVED***
          selectValues: function() {
            var
              select = {***REMOVED***,
              oldGroup = []
            ;
            select.values = [];
            $module
              .find('option')
                .each(function() {
                  var
                    $option  = $(this),
                    name     = $option.html(),
                    disabled = $option.attr('disabled'),
                    value    = ( $option.attr('value') !== undefined )
                      ? $option.attr('value')
                      : name,
                    text     = ( $option.data(metadata.text) !== undefined )
                      ? $option.data(metadata.text)
                      : name,
                    group = $option.parent('optgroup')
                  ;
                  if(settings.placeholder === 'auto' && value === '') {
                    select.placeholder = name;
                ***REMOVED***
                  else {
                    if(group.length !== oldGroup.length || group[0] !== oldGroup[0]) {
                      select.values.push({
                        type: 'header',
                        divider: settings.headerDivider,
                        name: group.attr('label') || ''
                    ***REMOVED***);
                      oldGroup = group;
                  ***REMOVED***
                    select.values.push({
                      name     : name,
                      value    : value,
                      text     : text,
                      disabled : disabled
                  ***REMOVED***);
                ***REMOVED***
              ***REMOVED***)
            ;
            if(settings.placeholder && settings.placeholder !== 'auto') {
              module.debug('Setting placeholder value to', settings.placeholder);
              select.placeholder = settings.placeholder;
          ***REMOVED***
            if(settings.sortSelect) {
              if(settings.sortSelect === true) {
                select.values.sort(function(a, b) {
                  return a.name.localeCompare(b.name);
              ***REMOVED***);
            ***REMOVED*** else if(settings.sortSelect === 'natural') {
                select.values.sort(function(a, b) {
                  return (a.name.toLowerCase().localeCompare(b.name.toLowerCase()));
              ***REMOVED***);
            ***REMOVED*** else if($.isFunction(settings.sortSelect)) {
                select.values.sort(settings.sortSelect);
            ***REMOVED***
              module.debug('Retrieved and sorted values from select', select);
          ***REMOVED***
            else {
              module.debug('Retrieved values from select', select);
          ***REMOVED***
            return select;
   ***REMOVED*****REMOVED***
          activeItem: function() {
            return $item.filter('.'  + className.active);
   ***REMOVED*****REMOVED***
          selectedItem: function() {
            var
              $selectedItem = $item.not(selector.unselectable).filter('.'  + className.selected)
            ;
            return ($selectedItem.length > 0)
              ? $selectedItem
              : $item.eq(0)
            ;
   ***REMOVED*****REMOVED***
          itemWithAdditions: function(value) {
            var
              $items       = module.get.item(value),
              $userItems   = module.create.userChoice(value),
              hasUserItems = ($userItems && $userItems.length > 0)
            ;
            if(hasUserItems) {
              $items = ($items.length > 0)
                ? $items.add($userItems)
                : $userItems
              ;
          ***REMOVED***
            return $items;
   ***REMOVED*****REMOVED***
          item: function(value, strict) {
            var
              $selectedItem = false,
              shouldSearch,
              isMultiple
            ;
            value = (value !== undefined)
              ? value
              : ( module.get.values() !== undefined)
                ? module.get.values()
                : module.get.text()
            ;
            isMultiple = (module.is.multiple() && Array.isArray(value));
            shouldSearch = (isMultiple)
              ? (value.length > 0)
              : (value !== undefined && value !== null)
            ;
            strict     = (value === '' || value === false  || value === true)
              ? true
              : strict || false
            ;
            if(shouldSearch) {
              $item
                .each(function() {
                  var
                    $choice       = $(this),
                    optionText    = module.get.choiceText($choice),
                    optionValue   = module.get.choiceValue($choice, optionText)
                  ;
                  // safe early exit
                  if(optionValue === null || optionValue === undefined) {
                    return;
                ***REMOVED***
                  if(isMultiple) {
                    if($.inArray(module.escape.htmlEntities(String(optionValue)), value.map(function(v){return String(v);***REMOVED***)) !== -1) {
                      $selectedItem = ($selectedItem)
                        ? $selectedItem.add($choice)
                        : $choice
                      ;
                  ***REMOVED***
                ***REMOVED***
                  else if(strict) {
                    module.verbose('Ambiguous dropdown value using strict type check', $choice, value);
                    if( optionValue === value) {
                      $selectedItem = $choice;
                      return true;
                  ***REMOVED***
                ***REMOVED***
                  else {
                    if(settings.ignoreCase) {
                      optionValue = optionValue.toLowerCase();
                      value = value.toLowerCase();
                  ***REMOVED***
                    if(module.escape.htmlEntities(String(optionValue)) === module.escape.htmlEntities(String(value))) {
                      module.verbose('Found select item by value', optionValue, value);
                      $selectedItem = $choice;
                      return true;
                  ***REMOVED***
                ***REMOVED***
              ***REMOVED***)
              ;
          ***REMOVED***
            return $selectedItem;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        check: {
          maxSelections: function(selectionCount) {
            if(settings.maxSelections) {
              selectionCount = (selectionCount !== undefined)
                ? selectionCount
                : module.get.selectionCount()
              ;
              if(selectionCount >= settings.maxSelections) {
                module.debug('Maximum selection count reached');
                if(settings.useLabels) {
                  $item.addClass(className.filtered);
                  module.add.message(message.maxSelections);
              ***REMOVED***
                return true;
            ***REMOVED***
              else {
                module.verbose('No longer at maximum selection count');
                module.remove.message();
                module.remove.filteredItem();
                if(module.is.searchSelection()) {
                  module.filterItems();
              ***REMOVED***
                return false;
            ***REMOVED***
          ***REMOVED***
            return true;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        restore: {
          defaults: function(preventChangeTrigger) {
            module.clear(preventChangeTrigger);
            module.restore.defaultText();
            module.restore.defaultValue();
   ***REMOVED*****REMOVED***
          defaultText: function() {
            var
              defaultText     = module.get.defaultText(),
              placeholderText = module.get.placeholderText
            ;
            if(defaultText === placeholderText) {
              module.debug('Restoring default placeholder text', defaultText);
              module.set.placeholderText(defaultText);
          ***REMOVED***
            else {
              module.debug('Restoring default text', defaultText);
              module.set.text(defaultText);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          placeholderText: function() {
            module.set.placeholderText();
   ***REMOVED*****REMOVED***
          defaultValue: function() {
            var
              defaultValue = module.get.defaultValue()
            ;
            if(defaultValue !== undefined) {
              module.debug('Restoring default value', defaultValue);
              if(defaultValue !== '') {
                module.set.value(defaultValue);
                module.set.selected();
            ***REMOVED***
              else {
                module.remove.activeItem();
                module.remove.selectedItem();
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***
          labels: function() {
            if(settings.allowAdditions) {
              if(!settings.useLabels) {
                module.error(error.labels);
                settings.useLabels = true;
            ***REMOVED***
              module.debug('Restoring selected values');
              module.create.userLabels();
          ***REMOVED***
            module.check.maxSelections();
   ***REMOVED*****REMOVED***
          selected: function() {
            module.restore.values();
            if(module.is.multiple()) {
              module.debug('Restoring previously selected values and labels');
              module.restore.labels();
          ***REMOVED***
            else {
              module.debug('Restoring previously selected values');
          ***REMOVED***
   ***REMOVED*****REMOVED***
          values: function() {
            // prevents callbacks from occurring on initial load
            module.set.initialLoad();
            if(settings.apiSettings && settings.saveRemoteData && module.get.remoteValues()) {
              module.restore.remoteValues();
          ***REMOVED***
            else {
              module.set.selected();
          ***REMOVED***
            var value = module.get.value();
            if(value && value !== '' && !(Array.isArray(value) && value.length === 0)) {
              $input.removeClass(className.noselection);
          ***REMOVED*** else {
              $input.addClass(className.noselection);
          ***REMOVED***
            module.remove.initialLoad();
   ***REMOVED*****REMOVED***
          remoteValues: function() {
            var
              values = module.get.remoteValues()
            ;
            module.debug('Recreating selected from session data', values);
            if(values) {
              if( module.is.single() ) {
                $.each(values, function(value, name) {
                  module.set.text(name);
              ***REMOVED***);
            ***REMOVED***
              else {
                $.each(values, function(value, name) {
                  module.add.label(value, name);
              ***REMOVED***);
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        read: {
          remoteData: function(value) {
            var
              name
            ;
            if(window.Storage === undefined) {
              module.error(error.noStorage);
              return;
          ***REMOVED***
            name = sessionStorage.getItem(value);
            return (name !== undefined)
              ? name
              : false
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        save: {
          defaults: function() {
            module.save.defaultText();
            module.save.placeholderText();
            module.save.defaultValue();
   ***REMOVED*****REMOVED***
          defaultValue: function() {
            var
              value = module.get.value()
            ;
            module.verbose('Saving default value as', value);
            $module.data(metadata.defaultValue, value);
   ***REMOVED*****REMOVED***
          defaultText: function() {
            var
              text = module.get.text()
            ;
            module.verbose('Saving default text as', text);
            $module.data(metadata.defaultText, text);
   ***REMOVED*****REMOVED***
          placeholderText: function() {
            var
              text
            ;
            if(settings.placeholder !== false && $text.hasClass(className.placeholder)) {
              text = module.get.text();
              module.verbose('Saving placeholder text as', text);
              $module.data(metadata.placeholderText, text);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          remoteData: function(name, value) {
            if(window.Storage === undefined) {
              module.error(error.noStorage);
              return;
          ***REMOVED***
            module.verbose('Saving remote data to session storage', value, name);
            sessionStorage.setItem(value, name);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        clear: function(preventChangeTrigger) {
          if(module.is.multiple() && settings.useLabels) {
            module.remove.labels();
        ***REMOVED***
          else {
            module.remove.activeItem();
            module.remove.selectedItem();
            module.remove.filteredItem();
        ***REMOVED***
          module.set.placeholderText();
          module.clearValue(preventChangeTrigger);
 ***REMOVED*****REMOVED***

        clearValue: function(preventChangeTrigger) {
          module.set.value('', null, null, preventChangeTrigger);
 ***REMOVED*****REMOVED***

        scrollPage: function(direction, $selectedItem) {
          var
            $currentItem  = $selectedItem || module.get.selectedItem(),
            $menu         = $currentItem.closest(selector.menu),
            menuHeight    = $menu.outerHeight(),
            currentScroll = $menu.scrollTop(),
            itemHeight    = $item.eq(0).outerHeight(),
            itemsPerPage  = Math.floor(menuHeight / itemHeight),
            maxScroll     = $menu.prop('scrollHeight'),
            newScroll     = (direction == 'up')
              ? currentScroll - (itemHeight***REMOVED*** itemsPerPage)
              : currentScroll + (itemHeight***REMOVED*** itemsPerPage),
            $selectableItem = $item.not(selector.unselectable),
            isWithinRange,
            $nextSelectedItem,
            elementIndex
          ;
          elementIndex      = (direction == 'up')
            ? $selectableItem.index($currentItem) - itemsPerPage
            : $selectableItem.index($currentItem) + itemsPerPage
          ;
          isWithinRange = (direction == 'up')
            ? (elementIndex >= 0)
            : (elementIndex < $selectableItem.length)
          ;
          $nextSelectedItem = (isWithinRange)
            ? $selectableItem.eq(elementIndex)
            : (direction == 'up')
              ? $selectableItem.first()
              : $selectableItem.last()
          ;
          if($nextSelectedItem.length > 0) {
            module.debug('Scrolling page', direction, $nextSelectedItem);
            $currentItem
              .removeClass(className.selected)
            ;
            $nextSelectedItem
              .addClass(className.selected)
            ;
            if(settings.selectOnKeydown && module.is.single()) {
              module.set.selectedItem($nextSelectedItem);
          ***REMOVED***
            $menu
              .scrollTop(newScroll)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        set: {
          filtered: function() {
            var
              isMultiple       = module.is.multiple(),
              isSearch         = module.is.searchSelection(),
              isSearchMultiple = (isMultiple && isSearch),
              searchValue      = (isSearch)
                ? module.get.query()
                : '',
              hasSearchValue   = (typeof searchValue === 'string' && searchValue.length > 0),
              searchWidth      = module.get.searchWidth(),
              valueIsSet       = searchValue !== ''
            ;
            if(isMultiple && hasSearchValue) {
              module.verbose('Adjusting input width', searchWidth, settings.glyphWidth);
              $search.css('width', searchWidth);
          ***REMOVED***
            if(hasSearchValue || (isSearchMultiple && valueIsSet)) {
              module.verbose('Hiding placeholder text');
              $text.addClass(className.filtered);
          ***REMOVED***
            else if(!isMultiple || (isSearchMultiple && !valueIsSet)) {
              module.verbose('Showing placeholder text');
              $text.removeClass(className.filtered);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          empty: function() {
            $module.addClass(className.empty);
   ***REMOVED*****REMOVED***
          loading: function() {
            $module.addClass(className.loading);
   ***REMOVED*****REMOVED***
          placeholderText: function(text) {
            text = text || module.get.placeholderText();
            module.debug('Setting placeholder text', text);
            module.set.text(text);
            $text.addClass(className.placeholder);
   ***REMOVED*****REMOVED***
          tabbable: function() {
            if( module.is.searchSelection() ) {
              module.debug('Added tabindex to searchable dropdown');
              $search
                .val('')
                .attr('tabindex', 0)
              ;
              $menu
                .attr('tabindex', -1)
              ;
          ***REMOVED***
            else {
              module.debug('Added tabindex to dropdown');
              if( $module.attr('tabindex') === undefined) {
                $module
                  .attr('tabindex', 0)
                ;
                $menu
                  .attr('tabindex', -1)
                ;
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***
          initialLoad: function() {
            module.verbose('Setting initial load');
            initialLoad = true;
   ***REMOVED*****REMOVED***
          activeItem: function($item) {
            if( settings.allowAdditions && $item.filter(selector.addition).length > 0 ) {
              $item.addClass(className.filtered);
          ***REMOVED***
            else {
              $item.addClass(className.active);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          partialSearch: function(text) {
            var
              length = module.get.query().length
            ;
            $search.val( text.substr(0, length));
   ***REMOVED*****REMOVED***
          scrollPosition: function($item, forceScroll) {
            var
              edgeTolerance = 5,
              $menu,
              hasActive,
              offset,
              itemHeight,
              itemOffset,
              menuOffset,
              menuScroll,
              menuHeight,
              abovePage,
              belowPage
            ;

            $item       = $item || module.get.selectedItem();
            $menu       = $item.closest(selector.menu);
            hasActive   = ($item && $item.length > 0);
            forceScroll = (forceScroll !== undefined)
              ? forceScroll
              : false
            ;
            if(module.get.activeItem().length === 0){
              forceScroll = false;
          ***REMOVED***
            if($item && $menu.length > 0 && hasActive) {
              itemOffset = $item.position().top;

              $menu.addClass(className.loading);
              menuScroll = $menu.scrollTop();
              menuOffset = $menu.offset().top;
              itemOffset = $item.offset().top;
              offset     = menuScroll - menuOffset + itemOffset;
              if(!forceScroll) {
                menuHeight = $menu.height();
                belowPage  = menuScroll + menuHeight < (offset + edgeTolerance);
                abovePage  = ((offset - edgeTolerance) < menuScroll);
            ***REMOVED***
              module.debug('Scrolling to active item', offset);
              if(forceScroll || abovePage || belowPage) {
                $menu.scrollTop(offset);
            ***REMOVED***
              $menu.removeClass(className.loading);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          text: function(text) {
            if(settings.action === 'combo') {
              module.debug('Changing combo button text', text, $combo);
              if(settings.preserveHTML) {
                $combo.html(text);
            ***REMOVED***
              else {
                $combo.text(text);
            ***REMOVED***
          ***REMOVED***
            else if(settings.action === 'activate') {
              if(text !== module.get.placeholderText()) {
                $text.removeClass(className.placeholder);
            ***REMOVED***
              module.debug('Changing text', text, $text);
              $text
                .removeClass(className.filtered)
              ;
              if(settings.preserveHTML) {
                $text.html(text);
            ***REMOVED***
              else {
                $text.text(text);
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***
          selectedItem: function($item) {
            var
              value      = module.get.choiceValue($item),
              searchText = module.get.choiceText($item, false),
              text       = module.get.choiceText($item, true)
            ;
            module.debug('Setting user selection to item', $item);
            module.remove.activeItem();
            module.set.partialSearch(searchText);
            module.set.activeItem($item);
            module.set.selected(value, $item);
            module.set.text(text);
   ***REMOVED*****REMOVED***
          selectedLetter: function(letter) {
            var
              $selectedItem         = $item.filter('.' + className.selected),
              alreadySelectedLetter = $selectedItem.length > 0 && module.has.firstLetter($selectedItem, letter),
              $nextValue            = false,
              $nextItem
            ;
            // check next of same letter
            if(alreadySelectedLetter) {
              $nextItem = $selectedItem.nextAll($item).eq(0);
              if( module.has.firstLetter($nextItem, letter) ) {
                $nextValue  = $nextItem;
            ***REMOVED***
          ***REMOVED***
            // check all values
            if(!$nextValue) {
              $item
                .each(function(){
                  if(module.has.firstLetter($(this), letter)) {
                    $nextValue = $(this);
                    return false;
                ***REMOVED***
              ***REMOVED***)
              ;
          ***REMOVED***
            // set next value
            if($nextValue) {
              module.verbose('Scrolling to next value with letter', letter);
              module.set.scrollPosition($nextValue);
              $selectedItem.removeClass(className.selected);
              $nextValue.addClass(className.selected);
              if(settings.selectOnKeydown && module.is.single()) {
                module.set.selectedItem($nextValue);
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***
          direction: function($menu) {
            if(settings.direction == 'auto') {
              // reset position, remove upward if it's base menu
              if (!$menu) {
                module.remove.upward();
            ***REMOVED*** else if (module.is.upward($menu)) {
                //we need make sure when make assertion openDownward for $menu, $menu does not have upward class
                module.remove.upward($menu);
            ***REMOVED***

              if(module.can.openDownward($menu)) {
                module.remove.upward($menu);
            ***REMOVED***
              else {
                module.set.upward($menu);
            ***REMOVED***
              if(!module.is.leftward($menu) && !module.can.openRightward($menu)) {
                module.set.leftward($menu);
            ***REMOVED***
          ***REMOVED***
            else if(settings.direction == 'upward') {
              module.set.upward($menu);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          upward: function($currentMenu) {
            var $element = $currentMenu || $module;
            $element.addClass(className.upward);
   ***REMOVED*****REMOVED***
          leftward: function($currentMenu) {
            var $element = $currentMenu || $menu;
            $element.addClass(className.leftward);
   ***REMOVED*****REMOVED***
          value: function(value, text, $selected, preventChangeTrigger) {
            if(value !== undefined && value !== '' && !(Array.isArray(value) && value.length === 0)) {
              $input.removeClass(className.noselection);
          ***REMOVED*** else {
              $input.addClass(className.noselection);
          ***REMOVED***
            var
              escapedValue = module.escape.value(value),
              hasInput     = ($input.length > 0),
              currentValue = module.get.values(),
              stringValue  = (value !== undefined)
                ? String(value)
                : value,
              newValue
            ;
            if(hasInput) {
              if(!settings.allowReselection && stringValue == currentValue) {
                module.verbose('Skipping value update already same value', value, currentValue);
                if(!module.is.initialLoad()) {
                  return;
              ***REMOVED***
            ***REMOVED***

              if( module.is.single() && module.has.selectInput() && module.can.extendSelect() ) {
                module.debug('Adding user option', value);
                module.add.optionValue(value);
            ***REMOVED***
              module.debug('Updating input value', escapedValue, currentValue);
              internalChange = true;
              $input
                .val(escapedValue)
              ;
              if(settings.fireOnInit === false && module.is.initialLoad()) {
                module.debug('Input native change event ignored on initial load');
            ***REMOVED***
              else if(preventChangeTrigger !== true) {
                module.trigger.change();
            ***REMOVED***
              internalChange = false;
          ***REMOVED***
            else {
              module.verbose('Storing value in metadata', escapedValue, $input);
              if(escapedValue !== currentValue) {
                $module.data(metadata.value, stringValue);
            ***REMOVED***
          ***REMOVED***
            if(settings.fireOnInit === false && module.is.initialLoad()) {
              module.verbose('No callback on initial load', settings.onChange);
          ***REMOVED***
            else if(preventChangeTrigger !== true) {
              settings.onChange.call(element, value, text, $selected);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          active: function() {
            $module
              .addClass(className.active)
            ;
   ***REMOVED*****REMOVED***
          multiple: function() {
            $module.addClass(className.multiple);
   ***REMOVED*****REMOVED***
          visible: function() {
            $module.addClass(className.visible);
   ***REMOVED*****REMOVED***
          exactly: function(value, $selectedItem) {
            module.debug('Setting selected to exact values');
            module.clear();
            module.set.selected(value, $selectedItem);
   ***REMOVED*****REMOVED***
          selected: function(value, $selectedItem) {
            var
              isMultiple = module.is.multiple()
            ;
            $selectedItem = (settings.allowAdditions)
              ? $selectedItem || module.get.itemWithAdditions(value)
              : $selectedItem || module.get.item(value)
            ;
            if(!$selectedItem) {
              return;
          ***REMOVED***
            module.debug('Setting selected menu item to', $selectedItem);
            if(module.is.multiple()) {
              module.remove.searchWidth();
          ***REMOVED***
            if(module.is.single()) {
              module.remove.activeItem();
              module.remove.selectedItem();
          ***REMOVED***
            else if(settings.useLabels) {
              module.remove.selectedItem();
          ***REMOVED***
            // select each item
            $selectedItem
              .each(function() {
                var
                  $selected      = $(this),
                  selectedText   = module.get.choiceText($selected),
                  selectedValue  = module.get.choiceValue($selected, selectedText),

                  isFiltered     = $selected.hasClass(className.filtered),
                  isActive       = $selected.hasClass(className.active),
                  isUserValue    = $selected.hasClass(className.addition),
                  shouldAnimate  = (isMultiple && $selectedItem.length == 1)
                ;
                if(isMultiple) {
                  if(!isActive || isUserValue) {
                    if(settings.apiSettings && settings.saveRemoteData) {
                      module.save.remoteData(selectedText, selectedValue);
                  ***REMOVED***
                    if(settings.useLabels) {
                      module.add.label(selectedValue, selectedText, shouldAnimate);
                      module.add.value(selectedValue, selectedText, $selected);
                      module.set.activeItem($selected);
                      module.filterActive();
                      module.select.nextAvailable($selectedItem);
                  ***REMOVED***
                    else {
                      module.add.value(selectedValue, selectedText, $selected);
                      module.set.text(module.add.variables(message.count));
                      module.set.activeItem($selected);
                  ***REMOVED***
                ***REMOVED***
                  else if(!isFiltered && (settings.useLabels || selectActionActive)) {
                    module.debug('Selected active value, removing label');
                    module.remove.selected(selectedValue);
                ***REMOVED***
              ***REMOVED***
                else {
                  if(settings.apiSettings && settings.saveRemoteData) {
                    module.save.remoteData(selectedText, selectedValue);
                ***REMOVED***
                  module.set.text(selectedText);
                  module.set.value(selectedValue, selectedText, $selected);
                  $selected
                    .addClass(className.active)
                    .addClass(className.selected)
                  ;
              ***REMOVED***
            ***REMOVED***)
            ;
            module.remove.searchTerm();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        add: {
          label: function(value, text, shouldAnimate) {
            var
              $next  = module.is.searchSelection()
                ? $search
                : $text,
              escapedValue = module.escape.value(value),
              $label
            ;
            if(settings.ignoreCase) {
              escapedValue = escapedValue.toLowerCase();
          ***REMOVED***
            $label =  $('<a />')
              .addClass(className.label)
              .attr('data-' + metadata.value, escapedValue)
              .html(templates.label(escapedValue, text, settings.preserveHTML, settings.className))
            ;
            $label = settings.onLabelCreate.call($label, escapedValue, text);

            if(module.has.label(value)) {
              module.debug('User selection already exists, skipping', escapedValue);
              return;
          ***REMOVED***
            if(settings.label.variation) {
              $label.addClass(settings.label.variation);
          ***REMOVED***
            if(shouldAnimate === true) {
              module.debug('Animating in label', $label);
              $label
                .addClass(className.hidden)
                .insertBefore($next)
                .transition({
                    animation  : settings.label.transition,
                    debug      : settings.debug,
                    verbose    : settings.verbose,
                    duration   : settings.label.duration
              ***REMOVED***)
              ;
          ***REMOVED***
            else {
              module.debug('Adding selection label', $label);
              $label
                .insertBefore($next)
              ;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          message: function(message) {
            var
              $message = $menu.children(selector.message),
              html     = settings.templates.message(module.add.variables(message))
            ;
            if($message.length > 0) {
              $message
                .html(html)
              ;
          ***REMOVED***
            else {
              $message = $('<div/>')
                .html(html)
                .addClass(className.message)
                .appendTo($menu)
              ;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          optionValue: function(value) {
            var
              escapedValue = module.escape.value(value),
              $option      = $input.find('option[value="' + module.escape.string(escapedValue) + '"]'),
              hasOption    = ($option.length > 0)
            ;
            if(hasOption) {
              return;
          ***REMOVED***
            // temporarily disconnect observer
            module.disconnect.selectObserver();
            if( module.is.single() ) {
              module.verbose('Removing previous user addition');
              $input.find('option.' + className.addition).remove();
          ***REMOVED***
            $('<option/>')
              .prop('value', escapedValue)
              .addClass(className.addition)
              .html(value)
              .appendTo($input)
            ;
            module.verbose('Adding user addition as an <option>', value);
            module.observe.select();
   ***REMOVED*****REMOVED***
          userSuggestion: function(value) {
            var
              $addition         = $menu.children(selector.addition),
              $existingItem     = module.get.item(value),
              alreadyHasValue   = $existingItem && $existingItem.not(selector.addition).length,
              hasUserSuggestion = $addition.length > 0,
              html
            ;
            if(settings.useLabels && module.has.maxSelections()) {
              return;
          ***REMOVED***
            if(value === '' || alreadyHasValue) {
              $addition.remove();
              return;
          ***REMOVED***
            if(hasUserSuggestion) {
              $addition
                .data(metadata.value, value)
                .data(metadata.text, value)
                .attr('data-' + metadata.value, value)
                .attr('data-' + metadata.text, value)
                .removeClass(className.filtered)
              ;
              if(!settings.hideAdditions) {
                html = settings.templates.addition( module.add.variables(message.addResult, value) );
                $addition
                  .html(html)
                ;
            ***REMOVED***
              module.verbose('Replacing user suggestion with new value', $addition);
          ***REMOVED***
            else {
              $addition = module.create.userChoice(value);
              $addition
                .prependTo($menu)
              ;
              module.verbose('Adding item choice to menu corresponding with user choice addition', $addition);
          ***REMOVED***
            if(!settings.hideAdditions || module.is.allFiltered()) {
              $addition
                .addClass(className.selected)
                .siblings()
                .removeClass(className.selected)
              ;
          ***REMOVED***
            module.refreshItems();
   ***REMOVED*****REMOVED***
          variables: function(message, term) {
            var
              hasCount    = (message.search('{count***REMOVED***') !== -1),
              hasMaxCount = (message.search('{maxCount***REMOVED***') !== -1),
              hasTerm     = (message.search('{term***REMOVED***') !== -1),
              count,
              query
            ;
            module.verbose('Adding templated variables to message', message);
            if(hasCount) {
              count  = module.get.selectionCount();
              message = message.replace('{count***REMOVED***', count);
          ***REMOVED***
            if(hasMaxCount) {
              count  = module.get.selectionCount();
              message = message.replace('{maxCount***REMOVED***', settings.maxSelections);
          ***REMOVED***
            if(hasTerm) {
              query   = term || module.get.query();
              message = message.replace('{term***REMOVED***', query);
          ***REMOVED***
            return message;
   ***REMOVED*****REMOVED***
          value: function(addedValue, addedText, $selectedItem) {
            var
              currentValue = module.get.values(),
              newValue
            ;
            if(module.has.value(addedValue)) {
              module.debug('Value already selected');
              return;
          ***REMOVED***
            if(addedValue === '') {
              module.debug('Cannot select blank values from multiselect');
              return;
          ***REMOVED***
            // extend current array
            if(Array.isArray(currentValue)) {
              newValue = currentValue.concat([addedValue]);
              newValue = module.get.uniqueArray(newValue);
          ***REMOVED***
            else {
              newValue = [addedValue];
          ***REMOVED***
            // add values
            if( module.has.selectInput() ) {
              if(module.can.extendSelect()) {
                module.debug('Adding value to select', addedValue, newValue, $input);
                module.add.optionValue(addedValue);
            ***REMOVED***
          ***REMOVED***
            else {
              newValue = newValue.join(settings.delimiter);
              module.debug('Setting hidden input to delimited value', newValue, $input);
          ***REMOVED***

            if(settings.fireOnInit === false && module.is.initialLoad()) {
              module.verbose('Skipping onadd callback on initial load', settings.onAdd);
          ***REMOVED***
            else {
              settings.onAdd.call(element, addedValue, addedText, $selectedItem);
          ***REMOVED***
            module.set.value(newValue, addedText, $selectedItem);
            module.check.maxSelections();
   ***REMOVED*****REMOVED***
 ***REMOVED*****REMOVED***

        remove: {
          active: function() {
            $module.removeClass(className.active);
   ***REMOVED*****REMOVED***
          activeLabel: function() {
            $module.find(selector.label).removeClass(className.active);
   ***REMOVED*****REMOVED***
          empty: function() {
            $module.removeClass(className.empty);
   ***REMOVED*****REMOVED***
          loading: function() {
            $module.removeClass(className.loading);
   ***REMOVED*****REMOVED***
          initialLoad: function() {
            initialLoad = false;
   ***REMOVED*****REMOVED***
          upward: function($currentMenu) {
            var $element = $currentMenu || $module;
            $element.removeClass(className.upward);
   ***REMOVED*****REMOVED***
          leftward: function($currentMenu) {
            var $element = $currentMenu || $menu;
            $element.removeClass(className.leftward);
   ***REMOVED*****REMOVED***
          visible: function() {
            $module.removeClass(className.visible);
   ***REMOVED*****REMOVED***
          activeItem: function() {
            $item.removeClass(className.active);
   ***REMOVED*****REMOVED***
          filteredItem: function() {
            if(settings.useLabels && module.has.maxSelections() ) {
              return;
          ***REMOVED***
            if(settings.useLabels && module.is.multiple()) {
              $item.not('.' + className.active).removeClass(className.filtered);
          ***REMOVED***
            else {
              $item.removeClass(className.filtered);
          ***REMOVED***
            if(settings.hideDividers) {
              $divider.removeClass(className.hidden);
          ***REMOVED***
            module.remove.empty();
   ***REMOVED*****REMOVED***
          optionValue: function(value) {
            var
              escapedValue = module.escape.value(value),
              $option      = $input.find('option[value="' + module.escape.string(escapedValue) + '"]'),
              hasOption    = ($option.length > 0)
            ;
            if(!hasOption || !$option.hasClass(className.addition)) {
              return;
          ***REMOVED***
            // temporarily disconnect observer
            if(selectObserver) {
              selectObserver.disconnect();
              module.verbose('Temporarily disconnecting mutation observer');
          ***REMOVED***
            $option.remove();
            module.verbose('Removing user addition as an <option>', escapedValue);
            if(selectObserver) {
              selectObserver.observe($input[0], {
                childList : true,
                subtree   : true
            ***REMOVED***);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          message: function() {
            $menu.children(selector.message).remove();
   ***REMOVED*****REMOVED***
          searchWidth: function() {
            $search.css('width', '');
   ***REMOVED*****REMOVED***
          searchTerm: function() {
            module.verbose('Cleared search term');
            $search.val('');
            module.set.filtered();
   ***REMOVED*****REMOVED***
          userAddition: function() {
            $item.filter(selector.addition).remove();
   ***REMOVED*****REMOVED***
          selected: function(value, $selectedItem) {
            $selectedItem = (settings.allowAdditions)
              ? $selectedItem || module.get.itemWithAdditions(value)
              : $selectedItem || module.get.item(value)
            ;

            if(!$selectedItem) {
              return false;
          ***REMOVED***

            $selectedItem
              .each(function() {
                var
                  $selected     = $(this),
                  selectedText  = module.get.choiceText($selected),
                  selectedValue = module.get.choiceValue($selected, selectedText)
                ;
                if(module.is.multiple()) {
                  if(settings.useLabels) {
                    module.remove.value(selectedValue, selectedText, $selected);
                    module.remove.label(selectedValue);
                ***REMOVED***
                  else {
                    module.remove.value(selectedValue, selectedText, $selected);
                    if(module.get.selectionCount() === 0) {
                      module.set.placeholderText();
                  ***REMOVED***
                    else {
                      module.set.text(module.add.variables(message.count));
                  ***REMOVED***
                ***REMOVED***
              ***REMOVED***
                else {
                  module.remove.value(selectedValue, selectedText, $selected);
              ***REMOVED***
                $selected
                  .removeClass(className.filtered)
                  .removeClass(className.active)
                ;
                if(settings.useLabels) {
                  $selected.removeClass(className.selected);
              ***REMOVED***
            ***REMOVED***)
            ;
   ***REMOVED*****REMOVED***
          selectedItem: function() {
            $item.removeClass(className.selected);
   ***REMOVED*****REMOVED***
          value: function(removedValue, removedText, $removedItem) {
            var
              values = module.get.values(),
              newValue
            ;
            removedValue = module.escape.htmlEntities(removedValue);
            if( module.has.selectInput() ) {
              module.verbose('Input is <select> removing selected option', removedValue);
              newValue = module.remove.arrayValue(removedValue, values);
              module.remove.optionValue(removedValue);
          ***REMOVED***
            else {
              module.verbose('Removing from delimited values', removedValue);
              newValue = module.remove.arrayValue(removedValue, values);
              newValue = newValue.join(settings.delimiter);
          ***REMOVED***
            if(settings.fireOnInit === false && module.is.initialLoad()) {
              module.verbose('No callback on initial load', settings.onRemove);
          ***REMOVED***
            else {
              settings.onRemove.call(element, removedValue, removedText, $removedItem);
          ***REMOVED***
            module.set.value(newValue, removedText, $removedItem);
            module.check.maxSelections();
   ***REMOVED*****REMOVED***
          arrayValue: function(removedValue, values) {
            if( !Array.isArray(values) ) {
              values = [values];
          ***REMOVED***
            values = $.grep(values, function(value){
              return (removedValue != value);
          ***REMOVED***);
            module.verbose('Removed value from delimited string', removedValue, values);
            return values;
   ***REMOVED*****REMOVED***
          label: function(value, shouldAnimate) {
            var
              $labels       = $module.find(selector.label),
              $removedLabel = $labels.filter('[data-' + metadata.value + '="' + module.escape.string(settings.ignoreCase ? value.toLowerCase() : value) +'"]')
            ;
            module.verbose('Removing label', $removedLabel);
            $removedLabel.remove();
   ***REMOVED*****REMOVED***
          activeLabels: function($activeLabels) {
            $activeLabels = $activeLabels || $module.find(selector.label).filter('.' + className.active);
            module.verbose('Removing active label selections', $activeLabels);
            module.remove.labels($activeLabels);
   ***REMOVED*****REMOVED***
          labels: function($labels) {
            $labels = $labels || $module.find(selector.label);
            module.verbose('Removing labels', $labels);
            $labels
              .each(function(){
                var
                  $label      = $(this),
                  value       = $label.data(metadata.value),
                  stringValue = (value !== undefined)
                    ? String(value)
                    : value,
                  isUserValue = module.is.userValue(stringValue)
                ;
                if(settings.onLabelRemove.call($label, value) === false) {
                  module.debug('Label remove callback cancelled removal');
                  return;
              ***REMOVED***
                module.remove.message();
                if(isUserValue) {
                  module.remove.value(stringValue);
                  module.remove.label(stringValue);
              ***REMOVED***
                else {
                  // selected will also remove label
                  module.remove.selected(stringValue);
              ***REMOVED***
            ***REMOVED***)
            ;
   ***REMOVED*****REMOVED***
          tabbable: function() {
            if( module.is.searchSelection() ) {
              module.debug('Searchable dropdown initialized');
              $search
                .removeAttr('tabindex')
              ;
              $menu
                .removeAttr('tabindex')
              ;
          ***REMOVED***
            else {
              module.debug('Simple selection dropdown initialized');
              $module
                .removeAttr('tabindex')
              ;
              $menu
                .removeAttr('tabindex')
              ;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          diacritics: function(text) {
            return settings.ignoreDiacritics ?  text.normalize('NFD').replace(/[\u0300-\u036f]/g, '') : text;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        has: {
          menuSearch: function() {
            return (module.has.search() && $search.closest($menu).length > 0);
   ***REMOVED*****REMOVED***
          clearItem: function() {
            return ($clear.length > 0);
   ***REMOVED*****REMOVED***
          search: function() {
            return ($search.length > 0);
   ***REMOVED*****REMOVED***
          sizer: function() {
            return ($sizer.length > 0);
   ***REMOVED*****REMOVED***
          selectInput: function() {
            return ( $input.is('select') );
   ***REMOVED*****REMOVED***
          minCharacters: function(searchTerm) {
            if(settings.minCharacters && !iconClicked) {
              searchTerm = (searchTerm !== undefined)
                ? String(searchTerm)
                : String(module.get.query())
              ;
              return (searchTerm.length >= settings.minCharacters);
          ***REMOVED***
            iconClicked=false;
            return true;
   ***REMOVED*****REMOVED***
          firstLetter: function($item, letter) {
            var
              text,
              firstLetter
            ;
            if(!$item || $item.length === 0 || typeof letter !== 'string') {
              return false;
          ***REMOVED***
            text        = module.get.choiceText($item, false);
            letter      = letter.toLowerCase();
            firstLetter = String(text).charAt(0).toLowerCase();
            return (letter == firstLetter);
   ***REMOVED*****REMOVED***
          input: function() {
            return ($input.length > 0);
   ***REMOVED*****REMOVED***
          items: function() {
            return ($item.length > 0);
   ***REMOVED*****REMOVED***
          menu: function() {
            return ($menu.length > 0);
   ***REMOVED*****REMOVED***
          message: function() {
            return ($menu.children(selector.message).length !== 0);
   ***REMOVED*****REMOVED***
          label: function(value) {
            var
              escapedValue = module.escape.value(value),
              $labels      = $module.find(selector.label)
            ;
            if(settings.ignoreCase) {
              escapedValue = escapedValue.toLowerCase();
          ***REMOVED***
            return ($labels.filter('[data-' + metadata.value + '="' + module.escape.string(escapedValue) +'"]').length > 0);
   ***REMOVED*****REMOVED***
          maxSelections: function() {
            return (settings.maxSelections && module.get.selectionCount() >= settings.maxSelections);
   ***REMOVED*****REMOVED***
          allResultsFiltered: function() {
            var
              $normalResults = $item.not(selector.addition)
            ;
            return ($normalResults.filter(selector.unselectable).length === $normalResults.length);
   ***REMOVED*****REMOVED***
          userSuggestion: function() {
            return ($menu.children(selector.addition).length > 0);
   ***REMOVED*****REMOVED***
          query: function() {
            return (module.get.query() !== '');
   ***REMOVED*****REMOVED***
          value: function(value) {
            return (settings.ignoreCase)
              ? module.has.valueIgnoringCase(value)
              : module.has.valueMatchingCase(value)
            ;
   ***REMOVED*****REMOVED***
          valueMatchingCase: function(value) {
            var
              values   = module.get.values(),
              hasValue = Array.isArray(values)
               ? values && ($.inArray(value, values) !== -1)
               : (values == value)
            ;
            return (hasValue)
              ? true
              : false
            ;
   ***REMOVED*****REMOVED***
          valueIgnoringCase: function(value) {
            var
              values   = module.get.values(),
              hasValue = false
            ;
            if(!Array.isArray(values)) {
              values = [values];
          ***REMOVED***
            $.each(values, function(index, existingValue) {
              if(String(value).toLowerCase() == String(existingValue).toLowerCase()) {
                hasValue = true;
                return false;
            ***REMOVED***
          ***REMOVED***);
            return hasValue;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        is: {
          active: function() {
            return $module.hasClass(className.active);
   ***REMOVED*****REMOVED***
          animatingInward: function() {
            return $menu.transition('is inward');
   ***REMOVED*****REMOVED***
          animatingOutward: function() {
            return $menu.transition('is outward');
   ***REMOVED*****REMOVED***
          bubbledLabelClick: function(event) {
            return $(event.target).is('select, input') && $module.closest('label').length > 0;
   ***REMOVED*****REMOVED***
          bubbledIconClick: function(event) {
            return $(event.target).closest($icon).length > 0;
   ***REMOVED*****REMOVED***
          alreadySetup: function() {
            return ($module.is('select') && $module.parent(selector.dropdown).data(moduleNamespace) !== undefined && $module.prev().length === 0);
   ***REMOVED*****REMOVED***
          animating: function($subMenu) {
            return ($subMenu)
              ? $subMenu.transition && $subMenu.transition('is animating')
              : $menu.transition    && $menu.transition('is animating')
            ;
   ***REMOVED*****REMOVED***
          leftward: function($subMenu) {
            var $selectedMenu = $subMenu || $menu;
            return $selectedMenu.hasClass(className.leftward);
   ***REMOVED*****REMOVED***
          clearable: function() {
            return ($module.hasClass(className.clearable) || settings.clearable);
   ***REMOVED*****REMOVED***
          disabled: function() {
            return $module.hasClass(className.disabled);
   ***REMOVED*****REMOVED***
          focused: function() {
            return (document.activeElement === $module[0]);
   ***REMOVED*****REMOVED***
          focusedOnSearch: function() {
            return (document.activeElement === $search[0]);
   ***REMOVED*****REMOVED***
          allFiltered: function() {
            return( (module.is.multiple() || module.has.search()) && !(settings.hideAdditions == false && module.has.userSuggestion()) && !module.has.message() && module.has.allResultsFiltered() );
   ***REMOVED*****REMOVED***
          hidden: function($subMenu) {
            return !module.is.visible($subMenu);
   ***REMOVED*****REMOVED***
          initialLoad: function() {
            return initialLoad;
   ***REMOVED*****REMOVED***
          inObject: function(needle, object) {
            var
              found = false
            ;
            $.each(object, function(index, property) {
              if(property == needle) {
                found = true;
                return true;
            ***REMOVED***
          ***REMOVED***);
            return found;
   ***REMOVED*****REMOVED***
          multiple: function() {
            return $module.hasClass(className.multiple);
   ***REMOVED*****REMOVED***
          remote: function() {
            return settings.apiSettings && module.can.useAPI();
   ***REMOVED*****REMOVED***
          single: function() {
            return !module.is.multiple();
   ***REMOVED*****REMOVED***
          selectMutation: function(mutations) {
            var
              selectChanged = false
            ;
            $.each(mutations, function(index, mutation) {
              if($(mutation.target).is('select') || $(mutation.addedNodes).is('select')) {
                selectChanged = true;
                return false;
            ***REMOVED***
          ***REMOVED***);
            return selectChanged;
   ***REMOVED*****REMOVED***
          search: function() {
            return $module.hasClass(className.search);
   ***REMOVED*****REMOVED***
          searchSelection: function() {
            return ( module.has.search() && $search.parent(selector.dropdown).length === 1 );
   ***REMOVED*****REMOVED***
          selection: function() {
            return $module.hasClass(className.selection);
   ***REMOVED*****REMOVED***
          userValue: function(value) {
            return ($.inArray(value, module.get.userValues()) !== -1);
   ***REMOVED*****REMOVED***
          upward: function($menu) {
            var $element = $menu || $module;
            return $element.hasClass(className.upward);
   ***REMOVED*****REMOVED***
          visible: function($subMenu) {
            return ($subMenu)
              ? $subMenu.hasClass(className.visible)
              : $menu.hasClass(className.visible)
            ;
   ***REMOVED*****REMOVED***
          verticallyScrollableContext: function() {
            var
              overflowY = ($context.get(0) !== window)
                ? $context.css('overflow-y')
                : false
            ;
            return (overflowY == 'auto' || overflowY == 'scroll');
   ***REMOVED*****REMOVED***
          horizontallyScrollableContext: function() {
            var
              overflowX = ($context.get(0) !== window)
                ? $context.css('overflow-X')
                : false
            ;
            return (overflowX == 'auto' || overflowX == 'scroll');
        ***REMOVED***
 ***REMOVED*****REMOVED***

        can: {
          activate: function($item) {
            if(settings.useLabels) {
              return true;
          ***REMOVED***
            if(!module.has.maxSelections()) {
              return true;
          ***REMOVED***
            if(module.has.maxSelections() && $item.hasClass(className.active)) {
              return true;
          ***REMOVED***
            return false;
   ***REMOVED*****REMOVED***
          openDownward: function($subMenu) {
            var
              $currentMenu    = $subMenu || $menu,
              canOpenDownward = true,
              onScreen        = {***REMOVED***,
              calculations
            ;
            $currentMenu
              .addClass(className.loading)
            ;
            calculations = {
              context: {
                offset    : ($context.get(0) === window)
                  ? { top: 0, left: 0***REMOVED***
                  : $context.offset(),
                scrollTop : $context.scrollTop(),
                height    : $context.outerHeight()
  ***REMOVED*****REMOVED*****REMOVED***
              menu : {
                offset: $currentMenu.offset(),
                height: $currentMenu.outerHeight()
            ***REMOVED***
          ***REMOVED***;
            if(module.is.verticallyScrollableContext()) {
              calculations.menu.offset.top += calculations.context.scrollTop;
          ***REMOVED***
            onScreen = {
              above : (calculations.context.scrollTop) <= calculations.menu.offset.top - calculations.context.offset.top - calculations.menu.height,
              below : (calculations.context.scrollTop + calculations.context.height) >= calculations.menu.offset.top - calculations.context.offset.top + calculations.menu.height
          ***REMOVED***;
            if(onScreen.below) {
              module.verbose('Dropdown can fit in context downward', onScreen);
              canOpenDownward = true;
          ***REMOVED***
            else if(!onScreen.below && !onScreen.above) {
              module.verbose('Dropdown cannot fit in either direction, favoring downward', onScreen);
              canOpenDownward = true;
          ***REMOVED***
            else {
              module.verbose('Dropdown cannot fit below, opening upward', onScreen);
              canOpenDownward = false;
          ***REMOVED***
            $currentMenu.removeClass(className.loading);
            return canOpenDownward;
   ***REMOVED*****REMOVED***
          openRightward: function($subMenu) {
            var
              $currentMenu     = $subMenu || $menu,
              canOpenRightward = true,
              isOffscreenRight = false,
              calculations
            ;
            $currentMenu
              .addClass(className.loading)
            ;
            calculations = {
              context: {
                offset     : ($context.get(0) === window)
                  ? { top: 0, left: 0***REMOVED***
                  : $context.offset(),
                scrollLeft : $context.scrollLeft(),
                width      : $context.outerWidth()
  ***REMOVED*****REMOVED*****REMOVED***
              menu: {
                offset : $currentMenu.offset(),
                width  : $currentMenu.outerWidth()
            ***REMOVED***
          ***REMOVED***;
            if(module.is.horizontallyScrollableContext()) {
              calculations.menu.offset.left += calculations.context.scrollLeft;
          ***REMOVED***
            isOffscreenRight = (calculations.menu.offset.left - calculations.context.offset.left + calculations.menu.width >= calculations.context.scrollLeft + calculations.context.width);
            if(isOffscreenRight) {
              module.verbose('Dropdown cannot fit in context rightward', isOffscreenRight);
              canOpenRightward = false;
          ***REMOVED***
            $currentMenu.removeClass(className.loading);
            return canOpenRightward;
   ***REMOVED*****REMOVED***
          click: function() {
            return (hasTouch || settings.on == 'click');
   ***REMOVED*****REMOVED***
          extendSelect: function() {
            return settings.allowAdditions || settings.apiSettings;
   ***REMOVED*****REMOVED***
          show: function() {
            return !module.is.disabled() && (module.has.items() || module.has.message());
   ***REMOVED*****REMOVED***
          useAPI: function() {
            return $.fn.api !== undefined;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        animate: {
          show: function(callback, $subMenu) {
            var
              $currentMenu = $subMenu || $menu,
              start = ($subMenu)
                ? function() {***REMOVED***
                : function() {
                  module.hideSubMenus();
                  module.hideOthers();
                  module.set.active();
    ***REMOVED*****REMOVED*****REMOVED***
              transition
            ;
            callback = $.isFunction(callback)
              ? callback
              : function(){***REMOVED***
            ;
            module.verbose('Doing menu show animation', $currentMenu);
            module.set.direction($subMenu);
            transition = module.get.transition($subMenu);
            if( module.is.selection() ) {
              module.set.scrollPosition(module.get.selectedItem(), true);
          ***REMOVED***
            if( module.is.hidden($currentMenu) || module.is.animating($currentMenu) ) {
              if(transition == 'none') {
                start();
                $currentMenu.transition('show');
                callback.call(element);
            ***REMOVED***
              else if($.fn.transition !== undefined && $module.transition('is supported')) {
                $currentMenu
                  .transition({
                    animation  : transition + ' in',
                    debug      : settings.debug,
                    verbose    : settings.verbose,
                    duration   : settings.duration,
                    queue      : true,
                    onStart    : start,
                    onComplete : function() {
                      callback.call(element);
                  ***REMOVED***
                ***REMOVED***)
                ;
            ***REMOVED***
              else {
                module.error(error.noTransition, transition);
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***
          hide: function(callback, $subMenu) {
            var
              $currentMenu = $subMenu || $menu,
              start = ($subMenu)
                ? function() {***REMOVED***
                : function() {
                  if( module.can.click() ) {
                    module.unbind.intent();
                ***REMOVED***
                  module.remove.active();
    ***REMOVED*****REMOVED*****REMOVED***
              transition = module.get.transition($subMenu)
            ;
            callback = $.isFunction(callback)
              ? callback
              : function(){***REMOVED***
            ;
            if( module.is.visible($currentMenu) || module.is.animating($currentMenu) ) {
              module.verbose('Doing menu hide animation', $currentMenu);

              if(transition == 'none') {
                start();
                $currentMenu.transition('hide');
                callback.call(element);
            ***REMOVED***
              else if($.fn.transition !== undefined && $module.transition('is supported')) {
                $currentMenu
                  .transition({
                    animation  : transition + ' out',
                    duration   : settings.duration,
                    debug      : settings.debug,
                    verbose    : settings.verbose,
                    queue      : false,
                    onStart    : start,
                    onComplete : function() {
                      callback.call(element);
                  ***REMOVED***
                ***REMOVED***)
                ;
            ***REMOVED***
              else {
                module.error(error.transition);
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        hideAndClear: function() {
          module.remove.searchTerm();
          if( module.has.maxSelections() ) {
            return;
        ***REMOVED***
          if(module.has.search()) {
            module.hide(function() {
              module.remove.filteredItem();
          ***REMOVED***);
        ***REMOVED***
          else {
            module.hide();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        delay: {
          show: function() {
            module.verbose('Delaying show event to ensure user intent');
            clearTimeout(module.timer);
            module.timer = setTimeout(module.show, settings.delay.show);
   ***REMOVED*****REMOVED***
          hide: function() {
            module.verbose('Delaying hide event to ensure user intent');
            clearTimeout(module.timer);
            module.timer = setTimeout(module.hide, settings.delay.hide);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        escape: {
          value: function(value) {
            var
              multipleValues = Array.isArray(value),
              stringValue    = (typeof value === 'string'),
              isUnparsable   = (!stringValue && !multipleValues),
              hasQuotes      = (stringValue && value.search(regExp.quote) !== -1),
              values         = []
            ;
            if(isUnparsable || !hasQuotes) {
              return value;
          ***REMOVED***
            module.debug('Encoding quote values for use in select', value);
            if(multipleValues) {
              $.each(value, function(index, value){
                values.push(value.replace(regExp.quote, '&quot;'));
            ***REMOVED***);
              return values;
          ***REMOVED***
            return value.replace(regExp.quote, '&quot;');
   ***REMOVED*****REMOVED***
          string: function(text) {
            text =  String(text);
            return text.replace(regExp.escape, '\\$&');
   ***REMOVED*****REMOVED***
          htmlEntities: function(string) {
              var
                  badChars     = /[<>"'`]/g,
                  shouldEscape = /[&<>"'`]/,
                  escape       = {
                      "<": "&lt;",
                      ">": "&gt;",
                      '"': "&quot;",
                      "'": "&#x27;",
                      "`": "&#x60;"
      ***REMOVED*****REMOVED*****REMOVED***
                  escapedChar  = function(chr) {
                      return escape[chr];
                ***REMOVED***
              ;
              if(shouldEscape.test(string)) {
                  string = string.replace(/&(?![a-z0-9#]{1,6***REMOVED***;)/, "&amp;");
                  return string.replace(badChars, escapedChar);
            ***REMOVED***
              return string;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            if($.isPlainObject(settings[name])) {
              $.extend(true, settings[name], value);
          ***REMOVED***
            else {
              settings[name] = value;
          ***REMOVED***
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                module.error(error.method, query);
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***
          if(Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***;

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
      ***REMOVED***
        module.invoke(query);
    ***REMOVED***
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
      ***REMOVED***
        module.initialize();
    ***REMOVED***
  ***REMOVED***)
  ;
  return (returnedValue !== undefined)
    ? returnedValue
    : $allModules
  ;
***REMOVED***;

$.fn.dropdown.settings = {

  silent                 : false,
  debug                  : false,
  verbose                : false,
  performance            : true,

  on                     : 'click',    // what event should show menu action on item selection
  action                 : 'activate', // action on item selection (nothing, activate, select, combo, hide, function(){***REMOVED***)

  values                 : false,      // specify values to use for dropdown

  clearable              : false,      // whether the value of the dropdown can be cleared

  apiSettings            : false,
  selectOnKeydown        : true,       // Whether selection should occur automatically when keyboard shortcuts used
  minCharacters          : 0,          // Minimum characters required to trigger API call

  filterRemoteData       : false,      // Whether API results should be filtered after being returned for query term
  saveRemoteData         : true,       // Whether remote name/value pairs should be stored in sessionStorage to allow remote data to be restored on page refresh

  throttle               : 200,        // How long to wait after last user input to search remotely

  context                : window,     // Context to use when determining if on screen
  direction              : 'auto',     // Whether dropdown should always open in one direction
  keepOnScreen           : true,       // Whether dropdown should check whether it is on screen before showing

  match                  : 'both',     // what to match against with search selection (both, text, or label)
  fullTextSearch         : false,      // search anywhere in value (set to 'exact' to require exact matches)
  ignoreDiacritics       : false,      // match results also if they contain diacritics of the same base character (for example searching for "a" will also match "á" or "â" or "à", etc...)
  hideDividers           : false,      // Whether to hide any divider elements (specified in selector.divider) that are sibling to any items when searched (set to true will hide all dividers, set to 'empty' will hide them when they are not followed by a visible item)

  placeholder            : 'auto',     // whether to convert blank <select> values to placeholder text
  preserveHTML           : true,       // preserve html when selecting value
  sortSelect             : false,      // sort selection on init

  forceSelection         : true,       // force a choice on blur with search selection

  allowAdditions         : false,      // whether multiple select should allow user added values
  ignoreCase             : false,      // whether to consider case sensitivity when creating labels
  ignoreSearchCase       : true,       // whether to consider case sensitivity when filtering items
  hideAdditions          : true,       // whether or not to hide special message prompting a user they can enter a value

  maxSelections          : false,      // When set to a number limits the number of selections to this count
  useLabels              : true,       // whether multiple select should filter currently active selections from choices
  delimiter              : ',',        // when multiselect uses normal <input> the values will be delimited with this character

  showOnFocus            : true,       // show menu on focus
  allowReselection       : false,      // whether current value should trigger callbacks when reselected
  allowTab               : true,       // add tabindex to element
  allowCategorySelection : false,      // allow elements with sub-menus to be selected

  fireOnInit             : false,      // Whether callbacks should fire when initializing dropdown values

  transition             : 'auto',     // auto transition will slide down or up based on direction
  duration               : 200,        // duration of transition

  glyphWidth             : 1.037,      // widest glyph width in em (W is 1.037 em) used to calculate multiselect input width

  headerDivider          : true,       // whether option headers should have an additional divider line underneath when converted from <select> <optgroup>

  // label settings on multi-select
  label: {
    transition : 'scale',
    duration   : 200,
    variation  : false
***REMOVED***

  // delay before event
  delay : {
    hide   : 300,
    show   : 200,
    search : 20,
    touch  : 50
***REMOVED***

  /* Callbacks***REMOVED***/
  onChange      : function(value, text, $selected){***REMOVED***,
  onAdd         : function(value, text, $selected){***REMOVED***,
  onRemove      : function(value, text, $selected){***REMOVED***,

  onLabelSelect : function($selectedLabels){***REMOVED***,
  onLabelCreate : function(value, text) { return $(this); ***REMOVED***,
  onLabelRemove : function(value) { return true; ***REMOVED***,
  onNoResults   : function(searchTerm) { return true; ***REMOVED***,
  onShow        : function(){***REMOVED***,
  onHide        : function(){***REMOVED***,

  /* Component***REMOVED***/
  name           : 'Dropdown',
  namespace      : 'dropdown',

  message: {
    addResult     : 'Add <b>{term***REMOVED***</b>',
    count         : '{count***REMOVED*** selected',
    maxSelections : 'Max {maxCount***REMOVED*** selections',
    noResults     : 'No results found.',
    serverError   : 'There was an error contacting the server'
***REMOVED***

  error : {
    action          : 'You called a dropdown action that was not defined',
    alreadySetup    : 'Once a select has been initialized behaviors must be called on the created ui dropdown',
    labels          : 'Allowing user additions currently requires the use of labels.',
    missingMultiple : '<select> requires multiple property to be set to correctly preserve multiple values',
    method          : 'The method you called is not defined.',
    noAPI           : 'The API module is required to load resources remotely',
    noStorage       : 'Saving remote data requires session storage',
    noTransition    : 'This module requires ui transitions <https://github.com/Semantic-Org/UI-Transition>',
    noNormalize     : '"ignoreDiacritics" setting will be ignored. Browser does not support String().normalize(). You may consider including <https://cdn.jsdelivr.net/npm/unorm@1.4.1/lib/unorm.min.js> as a polyfill.'
***REMOVED***

  regExp : {
    escape   : /[-[\]{***REMOVED***()*+?.,\\^$|#\s:=@]/g,
    quote    : /"/g
***REMOVED***

  metadata : {
    defaultText     : 'defaultText',
    defaultValue    : 'defaultValue',
    placeholderText : 'placeholder',
    text            : 'text',
    value           : 'value'
***REMOVED***

  // property names for remote query
  fields: {
    remoteValues : 'results',  // grouping for api results
    values       : 'values',   // grouping for all dropdown values
    disabled     : 'disabled', // whether value should be disabled
    name         : 'name',     // displayed dropdown text
    value        : 'value',    // actual dropdown value
    text         : 'text',     // displayed text when selected
    type         : 'type',     // type of dropdown element
    image        : 'image',    // optional image path
    imageClass   : 'imageClass', // optional individual class for image
    icon         : 'icon',     // optional icon name
    iconClass    : 'iconClass', // optional individual class for icon (for example to use flag instead)
    class        : 'class',    // optional individual class for item/header
    divider      : 'divider'   // optional divider append for group headers
***REMOVED***

  keys : {
    backspace  : 8,
    delimiter  : 188, // comma
    deleteKey  : 46,
    enter      : 13,
    escape     : 27,
    pageUp     : 33,
    pageDown   : 34,
    leftArrow  : 37,
    upArrow    : 38,
    rightArrow : 39,
    downArrow  : 40
***REMOVED***

  selector : {
    addition     : '.addition',
    divider      : '.divider, .header',
    dropdown     : '.ui.dropdown',
    hidden       : '.hidden',
    icon         : '> .dropdown.icon',
    input        : '> input[type="hidden"], > select',
    item         : '.item',
    label        : '> .label',
    remove       : '> .label > .delete.icon',
    siblingLabel : '.label',
    menu         : '.menu',
    message      : '.message',
    menuIcon     : '.dropdown.icon',
    search       : 'input.search, .menu > .search > input, .menu input.search',
    sizer        : '> input.sizer',
    text         : '> .text:not(.icon)',
    unselectable : '.disabled, .filtered',
    clearIcon    : '> .remove.icon'
***REMOVED***

  className : {
    active      : 'active',
    addition    : 'addition',
    animating   : 'animating',
    disabled    : 'disabled',
    empty       : 'empty',
    dropdown    : 'ui dropdown',
    filtered    : 'filtered',
    hidden      : 'hidden transition',
    icon        : 'icon',
    image       : 'image',
    item        : 'item',
    label       : 'ui label',
    loading     : 'loading',
    menu        : 'menu',
    message     : 'message',
    multiple    : 'multiple',
    placeholder : 'default',
    sizer       : 'sizer',
    search      : 'search',
    selected    : 'selected',
    selection   : 'selection',
    upward      : 'upward',
    leftward    : 'left',
    visible     : 'visible',
    clearable   : 'clearable',
    noselection : 'noselection',
    delete      : 'delete',
    header      : 'header',
    divider     : 'divider',
    groupIcon   : '',
    unfilterable : 'unfilterable'
***REMOVED***

***REMOVED***;

/* Templates***REMOVED***/
$.fn.dropdown.settings.templates = {
  deQuote: function(string) {
      return String(string).replace(/"/g,"");
***REMOVED***
  escape: function(string, preserveHTML) {
    if (preserveHTML){
      return string;
  ***REMOVED***
    var
        badChars     = /[<>"'`]/g,
        shouldEscape = /[&<>"'`]/,
        escape       = {
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#x27;",
          "`": "&#x60;"
 ***REMOVED*****REMOVED***
        escapedChar  = function(chr) {
          return escape[chr];
      ***REMOVED***
    ;
    if(shouldEscape.test(string)) {
      string = string.replace(/&(?![a-z0-9#]{1,6***REMOVED***;)/, "&amp;");
      return string.replace(badChars, escapedChar);
  ***REMOVED***
    return string;
***REMOVED***
  // generates dropdown from select values
  dropdown: function(select, fields, preserveHTML, className) {
    var
      placeholder = select.placeholder || false,
      html        = '',
      escape = $.fn.dropdown.settings.templates.escape
    ;
    html +=  '<i class="dropdown icon"></i>';
    if(placeholder) {
      html += '<div class="default text">' + escape(placeholder,preserveHTML) + '</div>';
  ***REMOVED***
    else {
      html += '<div class="text"></div>';
  ***REMOVED***
    html += '<div class="'+className.menu+'">';
    html += $.fn.dropdown.settings.templates.menu(select, fields, preserveHTML,className);
    html += '</div>';
    return html;
***REMOVED***

  // generates just menu from select
  menu: function(response, fields, preserveHTML, className) {
    var
      values = response[fields.values] || [],
      html   = '',
      escape = $.fn.dropdown.settings.templates.escape,
      deQuote = $.fn.dropdown.settings.templates.deQuote
    ;
    $.each(values, function(index, option) {
      var
        itemType = (option[fields.type])
          ? option[fields.type]
          : 'item'
      ;

      if( itemType === 'item' ) {
        var
          maybeText = (option[fields.text])
            ? ' data-text="' + deQuote(option[fields.text]) + '"'
            : '',
          maybeDisabled = (option[fields.disabled])
            ? className.disabled+' '
            : ''
        ;
        html += '<div class="'+ maybeDisabled + (option[fields.class] ? deQuote(option[fields.class]) : className.item)+'" data-value="' + deQuote(option[fields.value]) + '"' + maybeText + '>';
        if(option[fields.image]) {
          html += '<img class="'+(option[fields.imageClass] ? deQuote(option[fields.imageClass]) : className.image)+'" src="' + deQuote(option[fields.image]) + '">';
      ***REMOVED***
        if(option[fields.icon]) {
          html += '<i class="'+deQuote(option[fields.icon])+' '+(option[fields.iconClass] ? deQuote(option[fields.iconClass]) : className.icon)+'"></i>';
      ***REMOVED***
        html +=   escape(option[fields.name] || '', preserveHTML);
        html += '</div>';
    ***REMOVED*** else if (itemType === 'header') {
        var groupName = escape(option[fields.name] || '', preserveHTML),
            groupIcon = option[fields.icon] ? deQuote(option[fields.icon]) : className.groupIcon
        ;
        if(groupName !== '' || groupIcon !== '') {
          html += '<div class="' + (option[fields.class] ? deQuote(option[fields.class]) : className.header) + '">';
          if (groupIcon !== '') {
            html += '<i class="' + groupIcon + ' ' + (option[fields.iconClass] ? deQuote(option[fields.iconClass]) : className.icon) + '"></i>';
        ***REMOVED***
          html += groupName;
          html += '</div>';
      ***REMOVED***
        if(option[fields.divider]){
          html += '<div class="'+className.divider+'"></div>';
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***);
    return html;
***REMOVED***

  // generates label for multiselect
  label: function(value, text, preserveHTML, className) {
    var
        escape = $.fn.dropdown.settings.templates.escape;
    return escape(text,preserveHTML) + '<i class="'+className.delete+' icon"></i>';
***REMOVED***


  // generates messages like "No results"
  message: function(message) {
    return message;
***REMOVED***

  // generates user addition to selection menu
  addition: function(choice) {
    return choice;
***REMOVED***

***REMOVED***;

***REMOVED***)( jQuery, window, document );

/*!
***REMOVED*** # Fomantic-UI - Embed
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

"use strict";

$.isFunction = $.isFunction || function(obj) {
  return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.embed = function(parameters) {

  var
    $allModules     = $(this),

    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {***REMOVED***, $.fn.embed.settings, parameters)
          : $.extend({***REMOVED***, $.fn.embed.settings),

        selector        = settings.selector,
        className       = settings.className,
        sources         = settings.sources,
        error           = settings.error,
        metadata        = settings.metadata,
        namespace       = settings.namespace,
        templates       = settings.templates,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $placeholder    = $module.find(selector.placeholder),
        $icon           = $module.find(selector.icon),
        $embed          = $module.find(selector.embed),

        element         = this,
        instance        = $module.data(moduleNamespace),
        module
      ;

      module = {

        initialize: function() {
          module.debug('Initializing embed');
          module.determine.autoplay();
          module.create();
          module.bind.events();
          module.instantiate();
 ***REMOVED*****REMOVED***

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
 ***REMOVED*****REMOVED***

        destroy: function() {
          module.verbose('Destroying previous instance of embed');
          module.reset();
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
 ***REMOVED*****REMOVED***

        refresh: function() {
          module.verbose('Refreshing selector cache');
          $placeholder = $module.find(selector.placeholder);
          $icon        = $module.find(selector.icon);
          $embed       = $module.find(selector.embed);
 ***REMOVED*****REMOVED***

        bind: {
          events: function() {
            if( module.has.placeholder() ) {
              module.debug('Adding placeholder events');
              $module
                .on('click' + eventNamespace, selector.placeholder, module.createAndShow)
                .on('click' + eventNamespace, selector.icon, module.createAndShow)
              ;
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        create: function() {
          var
            placeholder = module.get.placeholder()
          ;
          if(placeholder) {
            module.createPlaceholder();
        ***REMOVED***
          else {
            module.createAndShow();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        createPlaceholder: function(placeholder) {
          var
            icon  = module.get.icon(),
            url   = module.get.url(),
            embed = module.generate.embed(url)
          ;
          placeholder = placeholder || module.get.placeholder();
          $module.html( templates.placeholder(placeholder, icon) );
          module.debug('Creating placeholder for embed', placeholder, icon);
 ***REMOVED*****REMOVED***

        createEmbed: function(url) {
          module.refresh();
          url = url || module.get.url();
          $embed = $('<div/>')
            .addClass(className.embed)
            .html( module.generate.embed(url) )
            .appendTo($module)
          ;
          settings.onCreate.call(element, url);
          module.debug('Creating embed object', $embed);
 ***REMOVED*****REMOVED***

        changeEmbed: function(url) {
          $embed
            .html( module.generate.embed(url) )
          ;
 ***REMOVED*****REMOVED***

        createAndShow: function() {
          module.createEmbed();
          module.show();
 ***REMOVED*****REMOVED***

        // sets new embed
        change: function(source, id, url) {
          module.debug('Changing video to ', source, id, url);
          $module
            .data(metadata.source, source)
            .data(metadata.id, id)
          ;
          if(url) {
            $module.data(metadata.url, url);
        ***REMOVED***
          else {
            $module.removeData(metadata.url);
        ***REMOVED***
          if(module.has.embed()) {
            module.changeEmbed();
        ***REMOVED***
          else {
            module.create();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        // clears embed
        reset: function() {
          module.debug('Clearing embed and showing placeholder');
          module.remove.data();
          module.remove.active();
          module.remove.embed();
          module.showPlaceholder();
          settings.onReset.call(element);
 ***REMOVED*****REMOVED***

        // shows current embed
        show: function() {
          module.debug('Showing embed');
          module.set.active();
          settings.onDisplay.call(element);
 ***REMOVED*****REMOVED***

        hide: function() {
          module.debug('Hiding embed');
          module.showPlaceholder();
 ***REMOVED*****REMOVED***

        showPlaceholder: function() {
          module.debug('Showing placeholder image');
          module.remove.active();
          settings.onPlaceholderDisplay.call(element);
 ***REMOVED*****REMOVED***

        get: {
          id: function() {
            return settings.id || $module.data(metadata.id);
   ***REMOVED*****REMOVED***
          placeholder: function() {
            return settings.placeholder || $module.data(metadata.placeholder);
   ***REMOVED*****REMOVED***
          icon: function() {
            return (settings.icon)
              ? settings.icon
              : ($module.data(metadata.icon) !== undefined)
                ? $module.data(metadata.icon)
                : module.determine.icon()
            ;
   ***REMOVED*****REMOVED***
          source: function(url) {
            return (settings.source)
              ? settings.source
              : ($module.data(metadata.source) !== undefined)
                ? $module.data(metadata.source)
                : module.determine.source()
            ;
   ***REMOVED*****REMOVED***
          type: function() {
            var source = module.get.source();
            return (sources[source] !== undefined)
              ? sources[source].type
              : false
            ;
   ***REMOVED*****REMOVED***
          url: function() {
            return (settings.url)
              ? settings.url
              : ($module.data(metadata.url) !== undefined)
                ? $module.data(metadata.url)
                : module.determine.url()
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        determine: {
          autoplay: function() {
            if(module.should.autoplay()) {
              settings.autoplay = true;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          source: function(url) {
            var
              matchedSource = false
            ;
            url = url || module.get.url();
            if(url) {
              $.each(sources, function(name, source) {
                if(url.search(source.domain) !== -1) {
                  matchedSource = name;
                  return false;
              ***REMOVED***
            ***REMOVED***);
          ***REMOVED***
            return matchedSource;
   ***REMOVED*****REMOVED***
          icon: function() {
            var
              source = module.get.source()
            ;
            return (sources[source] !== undefined)
              ? sources[source].icon
              : false
            ;
   ***REMOVED*****REMOVED***
          url: function() {
            var
              id     = settings.id     || $module.data(metadata.id),
              source = settings.source || $module.data(metadata.source),
              url
            ;
            url = (sources[source] !== undefined)
              ? sources[source].url.replace('{id***REMOVED***', id)
              : false
            ;
            if(url) {
              $module.data(metadata.url, url);
          ***REMOVED***
            return url;
        ***REMOVED***
 ***REMOVED*****REMOVED***


        set: {
          active: function() {
            $module.addClass(className.active);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        remove: {
          data: function() {
            $module
              .removeData(metadata.id)
              .removeData(metadata.icon)
              .removeData(metadata.placeholder)
              .removeData(metadata.source)
              .removeData(metadata.url)
            ;
   ***REMOVED*****REMOVED***
          active: function() {
            $module.removeClass(className.active);
   ***REMOVED*****REMOVED***
          embed: function() {
            $embed.empty();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        encode: {
          parameters: function(parameters) {
            var
              urlString = [],
              index
            ;
            for (index in parameters) {
              urlString.push( encodeURIComponent(index) + '=' + encodeURIComponent( parameters[index] ) );
          ***REMOVED***
            return urlString.join('&amp;');
        ***REMOVED***
 ***REMOVED*****REMOVED***

        generate: {
          embed: function(url) {
            module.debug('Generating embed html');
            var
              source = module.get.source(),
              html,
              parameters
            ;
            url = module.get.url(url);
            if(url) {
              parameters = module.generate.parameters(source);
              html       = templates.iframe(url, parameters);
          ***REMOVED***
            else {
              module.error(error.noURL, $module);
          ***REMOVED***
            return html;
   ***REMOVED*****REMOVED***
          parameters: function(source, extraParameters) {
            var
              parameters = (sources[source] && sources[source].parameters !== undefined)
                ? sources[source].parameters(settings)
                : {***REMOVED***
            ;
            extraParameters = extraParameters || settings.parameters;
            if(extraParameters) {
              parameters = $.extend({***REMOVED***, parameters, extraParameters);
          ***REMOVED***
            parameters = settings.onEmbed(parameters);
            return module.encode.parameters(parameters);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        has: {
          embed: function() {
            return ($embed.length > 0);
   ***REMOVED*****REMOVED***
          placeholder: function() {
            return settings.placeholder || $module.data(metadata.placeholder);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        should: {
          autoplay: function() {
            return (settings.autoplay === 'auto')
              ? (settings.placeholder || $module.data(metadata.placeholder) !== undefined)
              : settings.autoplay
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        is: {
          video: function() {
            return module.get.type() == 'video';
        ***REMOVED***
 ***REMOVED*****REMOVED***

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            if($.isPlainObject(settings[name])) {
              $.extend(true, settings[name], value);
          ***REMOVED***
            else {
              settings[name] = value;
          ***REMOVED***
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                module.error(error.method, query);
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***
          if(Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***;

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
      ***REMOVED***
        module.invoke(query);
    ***REMOVED***
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
      ***REMOVED***
        module.initialize();
    ***REMOVED***
  ***REMOVED***)
  ;
  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
***REMOVED***;

$.fn.embed.settings = {

  name        : 'Embed',
  namespace   : 'embed',

  silent      : false,
  debug       : false,
  verbose     : false,
  performance : true,

  icon     : false,
  source   : false,
  url      : false,
  id       : false,

  // standard video settings
  autoplay  : 'auto',
  color     : '#444444',
  hd        : true,
  brandedUI : false,

  // additional parameters to include with the embed
  parameters: false,

  onDisplay            : function() {***REMOVED***,
  onPlaceholderDisplay : function() {***REMOVED***,
  onReset              : function() {***REMOVED***,
  onCreate             : function(url) {***REMOVED***,
  onEmbed              : function(parameters) {
    return parameters;
***REMOVED***

  metadata    : {
    id          : 'id',
    icon        : 'icon',
    placeholder : 'placeholder',
    source      : 'source',
    url         : 'url'
***REMOVED***

  error : {
    noURL  : 'No URL specified',
    method : 'The method you called is not defined'
***REMOVED***

  className : {
    active : 'active',
    embed  : 'embed'
***REMOVED***

  selector : {
    embed       : '.embed',
    placeholder : '.placeholder',
    icon        : '.icon'
***REMOVED***

  sources: {
    youtube: {
      name   : 'youtube',
      type   : 'video',
      icon   : 'video play',
      domain : 'youtube.com',
      url    : '//www.youtube.com/embed/{id***REMOVED***',
      parameters: function(settings) {
        return {
          autohide       : !settings.brandedUI,
          autoplay       : settings.autoplay,
          color          : settings.color || undefined,
          hq             : settings.hd,
          jsapi          : settings.api,
          modestbranding : !settings.brandedUI
      ***REMOVED***;
    ***REMOVED***
  ***REMOVED***
    vimeo: {
      name   : 'vimeo',
      type   : 'video',
      icon   : 'video play',
      domain : 'vimeo.com',
      url    : '//player.vimeo.com/video/{id***REMOVED***',
      parameters: function(settings) {
        return {
          api      : settings.api,
          autoplay : settings.autoplay,
          byline   : settings.brandedUI,
          color    : settings.color || undefined,
          portrait : settings.brandedUI,
          title    : settings.brandedUI
      ***REMOVED***;
    ***REMOVED***
  ***REMOVED***
***REMOVED***

  templates: {
    iframe : function(url, parameters) {
      var src = url;
      if (parameters) {
          src += '?' + parameters;
    ***REMOVED***
      return ''
        + '<iframe src="' + src + '"'
        + ' width="100%" height="100%"'
        + ' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>'
      ;
  ***REMOVED***
    placeholder : function(image, icon) {
      var
        html = ''
      ;
      if(icon) {
        html += '<i class="' + icon + ' icon"></i>';
    ***REMOVED***
      if(image) {
        html += '<img class="placeholder" src="' + image + '">';
    ***REMOVED***
      return html;
  ***REMOVED***
***REMOVED***

  // NOT YET IMPLEMENTED
  api     : false,
  onPause : function() {***REMOVED***,
  onPlay  : function() {***REMOVED***,
  onStop  : function() {***REMOVED***

***REMOVED***;



***REMOVED***)( jQuery, window, document );

/*!
***REMOVED*** # Fomantic-UI - Modal
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

***REMOVED***;

$.isFunction = $.isFunction || function(obj) {
  return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.modal = function(parameters) {
  var
    $allModules    = $(this),
    $window        = $(window),
    $document      = $(document),
    $body          = $('body'),

    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),

    requestAnimationFrame = window.requestAnimationFrame
      || window.mozRequestAnimationFrame
      || window.webkitRequestAnimationFrame
      || window.msRequestAnimationFrame
      || function(callback) { setTimeout(callback, 0); ***REMOVED***,

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings    = ( $.isPlainObject(parameters) )
          ? $.extend(true, {***REMOVED***, $.fn.modal.settings, parameters)
          : $.extend({***REMOVED***, $.fn.modal.settings),

        selector        = settings.selector,
        className       = settings.className,
        namespace       = settings.namespace,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $context        = $(settings.context),
        $close          = $module.find(selector.close),

        $allModals,
        $otherModals,
        $focusedElement,
        $dimmable,
        $dimmer,

        element         = this,
        instance        = $module.data(moduleNamespace),

        ignoreRepeatedEvents = false,

        initialMouseDownInModal,
        initialMouseDownInScrollbar,
        initialBodyMargin = '',
        tempBodyMargin = '',

        elementEventNamespace,
        id,
        observer,
        module
      ;
      module  = {

        initialize: function() {
          module.cache = {***REMOVED***;
          module.verbose('Initializing dimmer', $context);

          module.create.id();
          module.create.dimmer();

          if ( settings.allowMultiple ) {
            module.create.innerDimmer();
        ***REMOVED***
          if (!settings.centered){
            $module.addClass('top aligned');
        ***REMOVED***
          module.refreshModals();

          module.bind.events();
          if(settings.observeChanges) {
            module.observeChanges();
        ***REMOVED***
          module.instantiate();
 ***REMOVED*****REMOVED***

        instantiate: function() {
          module.verbose('Storing instance of modal');
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
 ***REMOVED*****REMOVED***

        create: {
          dimmer: function() {
            var
              defaultSettings = {
                debug      : settings.debug,
                dimmerName : 'modals'
  ***REMOVED*****REMOVED*****REMOVED***
              dimmerSettings = $.extend(true, defaultSettings, settings.dimmerSettings)
            ;
            if($.fn.dimmer === undefined) {
              module.error(error.dimmer);
              return;
          ***REMOVED***
            module.debug('Creating dimmer');
            $dimmable = $context.dimmer(dimmerSettings);
            if(settings.detachable) {
              module.verbose('Modal is detachable, moving content into dimmer');
              $dimmable.dimmer('add content', $module);
          ***REMOVED***
            else {
              module.set.undetached();
          ***REMOVED***
            $dimmer = $dimmable.dimmer('get dimmer');
   ***REMOVED*****REMOVED***
          id: function() {
            id = (Math.random().toString(16) + '000000000').substr(2, 8);
            elementEventNamespace = '.' + id;
            module.verbose('Creating unique id for element', id);
   ***REMOVED*****REMOVED***
          innerDimmer: function() {
            if ( $module.find(selector.dimmer).length == 0 ) {
              $module.prepend('<div class="ui inverted dimmer"></div>');
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        destroy: function() {
          if (observer) {
            observer.disconnect();
        ***REMOVED***
          module.verbose('Destroying previous modal');
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
          $window.off(elementEventNamespace);
          $dimmer.off(elementEventNamespace);
          $close.off(eventNamespace);
          $context.dimmer('destroy');
 ***REMOVED*****REMOVED***

        observeChanges: function() {
          if('MutationObserver' in window) {
            observer = new MutationObserver(function(mutations) {
              module.debug('DOM tree modified, refreshing');
              module.refresh();
          ***REMOVED***);
            observer.observe(element, {
              childList : true,
              subtree   : true
          ***REMOVED***);
            module.debug('Setting up mutation observer', observer);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        refresh: function() {
          module.remove.scrolling();
          module.cacheSizes();
          if(!module.can.useFlex()) {
            module.set.modalOffset();
        ***REMOVED***
          module.set.screenHeight();
          module.set.type();
 ***REMOVED*****REMOVED***

        refreshModals: function() {
          $otherModals = $module.siblings(selector.modal);
          $allModals   = $otherModals.add($module);
 ***REMOVED*****REMOVED***

        attachEvents: function(selector, event) {
          var
            $toggle = $(selector)
          ;
          event = $.isFunction(module[event])
            ? module[event]
            : module.toggle
          ;
          if($toggle.length > 0) {
            module.debug('Attaching modal events to element', selector, event);
            $toggle
              .off(eventNamespace)
              .on('click' + eventNamespace, event)
            ;
        ***REMOVED***
          else {
            module.error(error.notFound, selector);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        bind: {
          events: function() {
            module.verbose('Attaching events');
            $module
              .on('click' + eventNamespace, selector.close, module.event.close)
              .on('click' + eventNamespace, selector.approve, module.event.approve)
              .on('click' + eventNamespace, selector.deny, module.event.deny)
            ;
            $window
              .on('resize' + elementEventNamespace, module.event.resize)
            ;
   ***REMOVED*****REMOVED***
          scrollLock: function() {
            // touch events default to passive, due to changes in chrome to optimize mobile perf
            $dimmable.get(0).addEventListener('touchmove', module.event.preventScroll, { passive: false ***REMOVED***);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        unbind: {
          scrollLock: function() {
            $dimmable.get(0).removeEventListener('touchmove', module.event.preventScroll, { passive: false ***REMOVED***);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        get: {
          id: function() {
            return (Math.random().toString(16) + '000000000').substr(2, 8);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        event: {
          approve: function() {
            if(ignoreRepeatedEvents || settings.onApprove.call(element, $(this)) === false) {
              module.verbose('Approve callback returned false cancelling hide');
              return;
          ***REMOVED***
            ignoreRepeatedEvents = true;
            module.hide(function() {
              ignoreRepeatedEvents = false;
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          preventScroll: function(event) {
            if(event.target.className.indexOf('dimmer') !== -1) {
              event.preventDefault();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          deny: function() {
            if(ignoreRepeatedEvents || settings.onDeny.call(element, $(this)) === false) {
              module.verbose('Deny callback returned false cancelling hide');
              return;
          ***REMOVED***
            ignoreRepeatedEvents = true;
            module.hide(function() {
              ignoreRepeatedEvents = false;
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          close: function() {
            module.hide();
   ***REMOVED*****REMOVED***
          mousedown: function(event) {
            var
              $target   = $(event.target),
              isRtl = module.is.rtl();
            ;
            initialMouseDownInModal = ($target.closest(selector.modal).length > 0);
            if(initialMouseDownInModal) {
              module.verbose('Mouse down event registered inside the modal');
          ***REMOVED***
            initialMouseDownInScrollbar = module.is.scrolling() && ((!isRtl && $(window).outerWidth() - settings.scrollbarWidth <= event.clientX) || (isRtl && settings.scrollbarWidth >= event.clientX));
            if(initialMouseDownInScrollbar) {
              module.verbose('Mouse down event registered inside the scrollbar');
          ***REMOVED***
   ***REMOVED*****REMOVED***
          mouseup: function(event) {
            if(!settings.closable) {
              module.verbose('Dimmer clicked but closable setting is disabled');
              return;
          ***REMOVED***
            if(initialMouseDownInModal) {
              module.debug('Dimmer clicked but mouse down was initially registered inside the modal');
              return;
          ***REMOVED***
            if(initialMouseDownInScrollbar){
              module.debug('Dimmer clicked but mouse down was initially registered inside the scrollbar');
              return;
          ***REMOVED***
            var
              $target   = $(event.target),
              isInModal = ($target.closest(selector.modal).length > 0),
              isInDOM   = $.contains(document.documentElement, event.target)
            ;
            if(!isInModal && isInDOM && module.is.active() && $module.hasClass(className.front) ) {
              module.debug('Dimmer clicked, hiding all modals');
              if(settings.allowMultiple) {
                if(!module.hideAll()) {
                  return;
              ***REMOVED***
            ***REMOVED***
              else if(!module.hide()){
                  return;
            ***REMOVED***
              module.remove.clickaway();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          debounce: function(method, delay) {
            clearTimeout(module.timer);
            module.timer = setTimeout(method, delay);
   ***REMOVED*****REMOVED***
          keyboard: function(event) {
            var
              keyCode   = event.which,
              escapeKey = 27
            ;
            if(keyCode == escapeKey) {
              if(settings.closable) {
                module.debug('Escape key pressed hiding modal');
                if ( $module.hasClass(className.front) ) {
                  module.hide();
              ***REMOVED***
            ***REMOVED***
              else {
                module.debug('Escape key pressed, but closable is set to false');
            ***REMOVED***
              event.preventDefault();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          resize: function() {
            if( $dimmable.dimmer('is active') && ( module.is.animating() || module.is.active() ) ) {
              requestAnimationFrame(module.refresh);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        toggle: function() {
          if( module.is.active() || module.is.animating() ) {
            module.hide();
        ***REMOVED***
          else {
            module.show();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        show: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){***REMOVED***
          ;
          module.refreshModals();
          module.set.dimmerSettings();
          module.set.dimmerStyles();

          module.showModal(callback);
 ***REMOVED*****REMOVED***

        hide: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){***REMOVED***
          ;
          module.refreshModals();
          return module.hideModal(callback);
 ***REMOVED*****REMOVED***

        showModal: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){***REMOVED***
          ;
          if( module.is.animating() || !module.is.active() ) {
            module.showDimmer();
            module.cacheSizes();
            module.set.bodyMargin();
            if(module.can.useFlex()) {
              module.remove.legacy();
          ***REMOVED***
            else {
              module.set.legacy();
              module.set.modalOffset();
              module.debug('Using non-flex legacy modal positioning.');
          ***REMOVED***
            module.set.screenHeight();
            module.set.type();
            module.set.clickaway();

            if( !settings.allowMultiple && module.others.active() ) {
              module.hideOthers(module.showModal);
          ***REMOVED***
            else {
              ignoreRepeatedEvents = false;
              if( settings.allowMultiple ) {
                if ( module.others.active() ) {
                  $otherModals.filter('.' + className.active).find(selector.dimmer).addClass('active');
              ***REMOVED***

                if ( settings.detachable ) {
                  $module.detach().appendTo($dimmer);
              ***REMOVED***
            ***REMOVED***
              settings.onShow.call(element);
              if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
                module.debug('Showing modal with css animations');
                $module
                  .transition({
                    debug       : settings.debug,
                    animation   : settings.transition + ' in',
                    queue       : settings.queue,
                    duration    : settings.duration,
                    useFailSafe : true,
                    onComplete : function() {
                      settings.onVisible.apply(element);
                      if(settings.keyboardShortcuts) {
                        module.add.keyboardShortcuts();
                    ***REMOVED***
                      module.save.focus();
                      module.set.active();
                      if(settings.autofocus) {
                        module.set.autofocus();
                    ***REMOVED***
                      callback();
                  ***REMOVED***
                ***REMOVED***)
                ;
            ***REMOVED***
              else {
                module.error(error.noTransition);
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
          else {
            module.debug('Modal is already visible');
        ***REMOVED***
 ***REMOVED*****REMOVED***

        hideModal: function(callback, keepDimmed, hideOthersToo) {
          var
            $previousModal = $otherModals.filter('.' + className.active).last()
          ;
          callback = $.isFunction(callback)
            ? callback
            : function(){***REMOVED***
          ;
          module.debug('Hiding modal');
          if(settings.onHide.call(element, $(this)) === false) {
            module.verbose('Hide callback returned false cancelling hide');
            ignoreRepeatedEvents = false;
            return false;
        ***REMOVED***

          if( module.is.animating() || module.is.active() ) {
            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
              module.remove.active();
              $module
                .transition({
                  debug       : settings.debug,
                  animation   : settings.transition + ' out',
                  queue       : settings.queue,
                  duration    : settings.duration,
                  useFailSafe : true,
                  onStart     : function() {
                    if(!module.others.active() && !module.others.animating() && !keepDimmed) {
                      module.hideDimmer();
                  ***REMOVED***
                    if( settings.keyboardShortcuts && !module.others.active() ) {
                      module.remove.keyboardShortcuts();
                  ***REMOVED***
      ***REMOVED*****REMOVED*****REMOVED***
                  onComplete : function() {
                    module.unbind.scrollLock();
                    if ( settings.allowMultiple ) {
                      $previousModal.addClass(className.front);
                      $module.removeClass(className.front);

                      if ( hideOthersToo ) {
                        $allModals.find(selector.dimmer).removeClass('active');
                    ***REMOVED***
                      else {
                        $previousModal.find(selector.dimmer).removeClass('active');
                    ***REMOVED***
                  ***REMOVED***
                    settings.onHidden.call(element);
                    module.remove.dimmerStyles();
                    module.restore.focus();
                    callback();
                ***REMOVED***
              ***REMOVED***)
              ;
          ***REMOVED***
            else {
              module.error(error.noTransition);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        showDimmer: function() {
          if($dimmable.dimmer('is animating') || !$dimmable.dimmer('is active') ) {
            module.save.bodyMargin();
            module.debug('Showing dimmer');
            $dimmable.dimmer('show');
        ***REMOVED***
          else {
            module.debug('Dimmer already visible');
        ***REMOVED***
 ***REMOVED*****REMOVED***

        hideDimmer: function() {
          if( $dimmable.dimmer('is animating') || ($dimmable.dimmer('is active')) ) {
            module.unbind.scrollLock();
            $dimmable.dimmer('hide', function() {
              module.restore.bodyMargin();
              module.remove.clickaway();
              module.remove.screenHeight();
          ***REMOVED***);
        ***REMOVED***
          else {
            module.debug('Dimmer is not visible cannot hide');
            return;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        hideAll: function(callback) {
          var
            $visibleModals = $allModals.filter('.' + className.active + ', .' + className.animating)
          ;
          callback = $.isFunction(callback)
            ? callback
            : function(){***REMOVED***
          ;
          if( $visibleModals.length > 0 ) {
            module.debug('Hiding all visible modals');
            var hideOk = true;
//check in reverse order trying to hide most top displayed modal first
            $($visibleModals.get().reverse()).each(function(index,element){
                if(hideOk){
                    hideOk = $(element).modal('hide modal', callback, false, true);
              ***REMOVED***
          ***REMOVED***);
            if(hideOk) {
              module.hideDimmer();
          ***REMOVED***
            return hideOk;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        hideOthers: function(callback) {
          var
            $visibleModals = $otherModals.filter('.' + className.active + ', .' + className.animating)
          ;
          callback = $.isFunction(callback)
            ? callback
            : function(){***REMOVED***
          ;
          if( $visibleModals.length > 0 ) {
            module.debug('Hiding other modals', $otherModals);
            $visibleModals
              .modal('hide modal', callback, true)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        others: {
          active: function() {
            return ($otherModals.filter('.' + className.active).length > 0);
   ***REMOVED*****REMOVED***
          animating: function() {
            return ($otherModals.filter('.' + className.animating).length > 0);
        ***REMOVED***
 ***REMOVED*****REMOVED***


        add: {
          keyboardShortcuts: function() {
            module.verbose('Adding keyboard shortcuts');
            $document
              .on('keyup' + eventNamespace, module.event.keyboard)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        save: {
          focus: function() {
            var
              $activeElement = $(document.activeElement),
              inCurrentModal = $activeElement.closest($module).length > 0
            ;
            if(!inCurrentModal) {
              $focusedElement = $(document.activeElement).blur();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          bodyMargin: function() {
            initialBodyMargin = $body.css('margin-'+(module.can.leftBodyScrollbar() ? 'left':'right'));
            var bodyMarginRightPixel = parseInt(initialBodyMargin.replace(/[^\d.]/g, '')),
                bodyScrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
            tempBodyMargin = bodyMarginRightPixel + bodyScrollbarWidth;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        restore: {
          focus: function() {
            if($focusedElement && $focusedElement.length > 0 && settings.restoreFocus) {
              $focusedElement.focus();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          bodyMargin: function() {
            var position = module.can.leftBodyScrollbar() ? 'left':'right';
            $body.css('margin-'+position, initialBodyMargin);
            $body.find(selector.bodyFixed.replace('right',position)).css('padding-'+position, initialBodyMargin);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        remove: {
          active: function() {
            $module.removeClass(className.active);
   ***REMOVED*****REMOVED***
          legacy: function() {
            $module.removeClass(className.legacy);
   ***REMOVED*****REMOVED***
          clickaway: function() {
            if (!settings.detachable) {
              $module
                  .off('mousedown' + elementEventNamespace)
              ;
          ***REMOVED***           
            $dimmer
              .off('mousedown' + elementEventNamespace)
            ;
            $dimmer
              .off('mouseup' + elementEventNamespace)
            ;
   ***REMOVED*****REMOVED***
          dimmerStyles: function() {
            $dimmer.removeClass(className.inverted);
            $dimmable.removeClass(className.blurring);
   ***REMOVED*****REMOVED***
          bodyStyle: function() {
            if($body.attr('style') === '') {
              module.verbose('Removing style attribute');
              $body.removeAttr('style');
          ***REMOVED***
   ***REMOVED*****REMOVED***
          screenHeight: function() {
            module.debug('Removing page height');
            $body
              .css('height', '')
            ;
   ***REMOVED*****REMOVED***
          keyboardShortcuts: function() {
            module.verbose('Removing keyboard shortcuts');
            $document
              .off('keyup' + eventNamespace)
            ;
   ***REMOVED*****REMOVED***
          scrolling: function() {
            $dimmable.removeClass(className.scrolling);
            $module.removeClass(className.scrolling);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        cacheSizes: function() {
          $module.addClass(className.loading);
          var
            scrollHeight = $module.prop('scrollHeight'),
            modalWidth   = $module.outerWidth(),
            modalHeight  = $module.outerHeight()
          ;
          if(module.cache.pageHeight === undefined || modalHeight !== 0) {
            $.extend(module.cache, {
              pageHeight    : $(document).outerHeight(),
              width         : modalWidth,
              height        : modalHeight + settings.offset,
              scrollHeight  : scrollHeight + settings.offset,
              contextHeight : (settings.context == 'body')
                ? $(window).height()
                : $dimmable.height(),
          ***REMOVED***);
            module.cache.topOffset = -(module.cache.height / 2);
        ***REMOVED***
          $module.removeClass(className.loading);
          module.debug('Caching modal and container sizes', module.cache);
 ***REMOVED*****REMOVED***

        can: {
          leftBodyScrollbar: function(){
            if(module.cache.leftBodyScrollbar === undefined) {
              module.cache.leftBodyScrollbar = module.is.rtl() && ((module.is.iframe && !module.is.firefox()) || module.is.safari() || module.is.edge() || module.is.ie());
          ***REMOVED***
            return module.cache.leftBodyScrollbar;
   ***REMOVED*****REMOVED***
          useFlex: function() {
            if (settings.useFlex === 'auto') {
              return settings.detachable && !module.is.ie();
          ***REMOVED***
            if(settings.useFlex && module.is.ie()) {
              module.debug('useFlex true is not supported in IE');
          ***REMOVED*** else if(settings.useFlex && !settings.detachable) {
              module.debug('useFlex true in combination with detachable false is not supported');
          ***REMOVED***
            return settings.useFlex;
   ***REMOVED*****REMOVED***
          fit: function() {
            var
              contextHeight  = module.cache.contextHeight,
              verticalCenter = module.cache.contextHeight / 2,
              topOffset      = module.cache.topOffset,
              scrollHeight   = module.cache.scrollHeight,
              height         = module.cache.height,
              paddingHeight  = settings.padding,
              startPosition  = (verticalCenter + topOffset)
            ;
            return (scrollHeight > height)
              ? (startPosition + scrollHeight + paddingHeight < contextHeight)
              : (height + (paddingHeight***REMOVED*** 2) < contextHeight)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        is: {
          active: function() {
            return $module.hasClass(className.active);
   ***REMOVED*****REMOVED***
          ie: function() {
            if(module.cache.isIE === undefined) {
              var
                  isIE11 = (!(window.ActiveXObject) && 'ActiveXObject' in window),
                  isIE = ('ActiveXObject' in window)
              ;
              module.cache.isIE = (isIE11 || isIE);
          ***REMOVED***
            return module.cache.isIE;
   ***REMOVED*****REMOVED***
          animating: function() {
            return $module.transition('is supported')
              ? $module.transition('is animating')
              : $module.is(':visible')
            ;
   ***REMOVED*****REMOVED***
          scrolling: function() {
            return $dimmable.hasClass(className.scrolling);
   ***REMOVED*****REMOVED***
          modernBrowser: function() {
            // appName for IE11 reports 'Netscape' can no longer use
            return !(window.ActiveXObject || 'ActiveXObject' in window);
   ***REMOVED*****REMOVED***
          rtl: function() {
            if(module.cache.isRTL === undefined) {
              module.cache.isRTL = $body.attr('dir') === 'rtl' || $body.css('direction') === 'rtl';
          ***REMOVED***
            return module.cache.isRTL;
   ***REMOVED*****REMOVED***
          safari: function() {
            if(module.cache.isSafari === undefined) {
              module.cache.isSafari = /constructor/i.test(window.HTMLElement) || !!window.ApplePaySession;
          ***REMOVED***
            return module.cache.isSafari;
   ***REMOVED*****REMOVED***
          edge: function(){
            if(module.cache.isEdge === undefined) {
              module.cache.isEdge = !!window.setImmediate && !module.is.ie();
          ***REMOVED***
            return module.cache.isEdge;
   ***REMOVED*****REMOVED***
          firefox: function(){
            if(module.cache.isFirefox === undefined) {
                module.cache.isFirefox = !!window.InstallTrigger;
          ***REMOVED***
            return module.cache.isFirefox;
   ***REMOVED*****REMOVED***
          iframe: function() {
              return !(self === top);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        set: {
          autofocus: function() {
            var
              $inputs    = $module.find('[tabindex], :input').filter(':visible').filter(function() {
                return $(this).closest('.disabled').length === 0;
            ***REMOVED***),
              $autofocus = $inputs.filter('[autofocus]'),
              $input     = ($autofocus.length > 0)
                ? $autofocus.first()
                : $inputs.first()
            ;
            if($input.length > 0) {
              $input.focus();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          bodyMargin: function() {
            var position = module.can.leftBodyScrollbar() ? 'left':'right';
            if(settings.detachable || module.can.fit()) {
              $body.css('margin-'+position, tempBodyMargin + 'px');
          ***REMOVED***
            $body.find(selector.bodyFixed.replace('right',position)).css('padding-'+position, tempBodyMargin + 'px');
   ***REMOVED*****REMOVED***
          clickaway: function() {
            if (!settings.detachable) {
              $module
                .on('mousedown' + elementEventNamespace, module.event.mousedown)
              ;
          ***REMOVED***
            $dimmer
              .on('mousedown' + elementEventNamespace, module.event.mousedown)
            ;
            $dimmer
              .on('mouseup' + elementEventNamespace, module.event.mouseup)
            ;
   ***REMOVED*****REMOVED***
          dimmerSettings: function() {
            if($.fn.dimmer === undefined) {
              module.error(error.dimmer);
              return;
          ***REMOVED***
            var
              defaultSettings = {
                debug      : settings.debug,
                dimmerName : 'modals',
                closable   : 'auto',
                useFlex    : module.can.useFlex(),
                duration   : {
                  show     : settings.duration,
                  hide     : settings.duration
              ***REMOVED***
  ***REMOVED*****REMOVED*****REMOVED***
              dimmerSettings = $.extend(true, defaultSettings, settings.dimmerSettings)
            ;
            if(settings.inverted) {
              dimmerSettings.variation = (dimmerSettings.variation !== undefined)
                ? dimmerSettings.variation + ' inverted'
                : 'inverted'
              ;
          ***REMOVED***
            $context.dimmer('setting', dimmerSettings);
   ***REMOVED*****REMOVED***
          dimmerStyles: function() {
            if(settings.inverted) {
              $dimmer.addClass(className.inverted);
          ***REMOVED***
            else {
              $dimmer.removeClass(className.inverted);
          ***REMOVED***
            if(settings.blurring) {
              $dimmable.addClass(className.blurring);
          ***REMOVED***
            else {
              $dimmable.removeClass(className.blurring);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          modalOffset: function() {
            if (!settings.detachable) {
              var canFit = module.can.fit();
              $module
                .css({
                  top: (!$module.hasClass('aligned') && canFit)
                    ? $(document).scrollTop() + (module.cache.contextHeight - module.cache.height) / 2
                    : !canFit || $module.hasClass('top')
                      ? $(document).scrollTop() + settings.padding
                      : $(document).scrollTop() + (module.cache.contextHeight - module.cache.height - settings.padding),
                  marginLeft: -(module.cache.width / 2)
              ***REMOVED***) 
              ;
          ***REMOVED*** else {
              $module
                .css({
                  marginTop: (!$module.hasClass('aligned') && module.can.fit())
                    ? -(module.cache.height / 2)
                    : settings.padding / 2,
                  marginLeft: -(module.cache.width / 2)
              ***REMOVED***) 
              ;
          ***REMOVED***
            module.verbose('Setting modal offset for legacy mode');
   ***REMOVED*****REMOVED***
          screenHeight: function() {
            if( module.can.fit() ) {
              $body.css('height', '');
          ***REMOVED***
            else if(!$module.hasClass('bottom')) {
              module.debug('Modal is taller than page content, resizing page height');
              $body
                .css('height', module.cache.height + (settings.padding***REMOVED*** 2) )
              ;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          active: function() {
            $module.addClass(className.active + ' ' + className.front);
            $otherModals.filter('.' + className.active).removeClass(className.front);
   ***REMOVED*****REMOVED***
          scrolling: function() {
            $dimmable.addClass(className.scrolling);
            $module.addClass(className.scrolling);
            module.unbind.scrollLock();
   ***REMOVED*****REMOVED***
          legacy: function() {
            $module.addClass(className.legacy);
   ***REMOVED*****REMOVED***
          type: function() {
            if(module.can.fit()) {
              module.verbose('Modal fits on screen');
              if(!module.others.active() && !module.others.animating()) {
                module.remove.scrolling();
                module.bind.scrollLock();
            ***REMOVED***
          ***REMOVED***
            else if (!$module.hasClass('bottom')){
              module.verbose('Modal cannot fit on screen setting to scrolling');
              module.set.scrolling();
          ***REMOVED*** else {
                module.verbose('Bottom aligned modal not fitting on screen is unsupported for scrolling');
          ***REMOVED***
   ***REMOVED*****REMOVED***
          undetached: function() {
            $dimmable.addClass(className.undetached);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            if($.isPlainObject(settings[name])) {
              $.extend(true, settings[name], value);
          ***REMOVED***
            else {
              settings[name] = value;
          ***REMOVED***
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***
          if(Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***;

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
      ***REMOVED***
        module.invoke(query);
    ***REMOVED***
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
      ***REMOVED***
        module.initialize();
    ***REMOVED***
  ***REMOVED***)
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
***REMOVED***;

$.fn.modal.settings = {

  name           : 'Modal',
  namespace      : 'modal',

  useFlex        : 'auto',
  offset         : 0,

  silent         : false,
  debug          : false,
  verbose        : false,
  performance    : true,

  observeChanges : false,

  allowMultiple  : false,
  detachable     : true,
  closable       : true,
  autofocus      : true,
  restoreFocus   : true,

  inverted       : false,
  blurring       : false,

  centered       : true,

  dimmerSettings : {
    closable : false,
    useCSS   : true
***REMOVED***

  // whether to use keyboard shortcuts
  keyboardShortcuts: true,

  context    : 'body',

  queue      : false,
  duration   : 500,
  transition : 'scale',

  // padding with edge of page
  padding    : 50,
  scrollbarWidth: 10,

  // called before show animation
  onShow     : function(){***REMOVED***,

  // called after show animation
  onVisible  : function(){***REMOVED***,

  // called before hide animation
  onHide     : function(){ return true; ***REMOVED***,

  // called after hide animation
  onHidden   : function(){***REMOVED***,

  // called after approve selector match
  onApprove  : function(){ return true; ***REMOVED***,

  // called after deny selector match
  onDeny     : function(){ return true; ***REMOVED***,

  selector    : {
    close    : '> .close',
    approve  : '.actions .positive, .actions .approve, .actions .ok',
    deny     : '.actions .negative, .actions .deny, .actions .cancel',
    modal    : '.ui.modal',
    dimmer   : '> .ui.dimmer',
    bodyFixed: '> .ui.fixed.menu, > .ui.right.toast-container, > .ui.right.sidebar'
***REMOVED***
  error : {
    dimmer    : 'UI Dimmer, a required component is not included in this page',
    method    : 'The method you called is not defined.',
    notFound  : 'The element you specified could not be found'
***REMOVED***
  className : {
    active     : 'active',
    animating  : 'animating',
    blurring   : 'blurring',
    inverted   : 'inverted',
    legacy     : 'legacy',
    loading    : 'loading',
    scrolling  : 'scrolling',
    undetached : 'undetached',
    front      : 'front'
***REMOVED***
***REMOVED***;


***REMOVED***)( jQuery, window, document );

/*!
***REMOVED*** # Fomantic-UI - Nag
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

***REMOVED***;

$.isFunction = $.isFunction || function(obj) {
  return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.nag = function(parameters) {
  var
    $allModules    = $(this),
    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue
  ;
  $allModules
    .each(function() {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {***REMOVED***, $.fn.nag.settings, parameters)
          : $.extend({***REMOVED***, $.fn.nag.settings),

        selector        = settings.selector,
        error           = settings.error,
        namespace       = settings.namespace,

        eventNamespace  = '.' + namespace,
        moduleNamespace = namespace + '-module',

        $module         = $(this),

        $context        = (settings.context)
          ? $(settings.context)
          : $('body'),

        element         = this,
        instance        = $module.data(moduleNamespace),

        module
      ;
      module = {

        initialize: function() {
          module.verbose('Initializing element');

          $module
            .on('click' + eventNamespace, selector.close, module.dismiss)
            .data(moduleNamespace, module)
          ;

          if(settings.detachable && $module.parent()[0] !== $context[0]) {
            $module
              .detach()
              .prependTo($context)
            ;
        ***REMOVED***

          if(settings.displayTime > 0) {
            setTimeout(module.hide, settings.displayTime);
        ***REMOVED***
          module.show();
 ***REMOVED*****REMOVED***

        destroy: function() {
          module.verbose('Destroying instance');
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
 ***REMOVED*****REMOVED***

        show: function() {
          if( module.should.show() && !$module.is(':visible') ) {
            module.debug('Showing nag', settings.animation.show);
            if(settings.animation.show == 'fade') {
              $module
                .fadeIn(settings.duration, settings.easing)
              ;
          ***REMOVED***
            else {
              $module
                .slideDown(settings.duration, settings.easing)
              ;
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        hide: function() {
          module.debug('Showing nag', settings.animation.hide);
          if(settings.animation.show == 'fade') {
            $module
              .fadeIn(settings.duration, settings.easing)
            ;
        ***REMOVED***
          else {
            $module
              .slideUp(settings.duration, settings.easing)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        onHide: function() {
          module.debug('Removing nag', settings.animation.hide);
          $module.remove();
          if (settings.onHide) {
            settings.onHide();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        dismiss: function(event) {
          if(settings.storageMethod) {
            module.storage.set(settings.key, settings.value);
        ***REMOVED***
          module.hide();
          event.stopImmediatePropagation();
          event.preventDefault();
 ***REMOVED*****REMOVED***

        should: {
          show: function() {
            if(settings.persist) {
              module.debug('Persistent nag is set, can show nag');
              return true;
          ***REMOVED***
            if( module.storage.get(settings.key) != settings.value.toString() ) {
              module.debug('Stored value is not set, can show nag', module.storage.get(settings.key));
              return true;
          ***REMOVED***
            module.debug('Stored value is set, cannot show nag', module.storage.get(settings.key));
            return false;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        get: {
          storageOptions: function() {
            var
              options = {***REMOVED***
            ;
            if(settings.expires) {
              options.expires = settings.expires;
          ***REMOVED***
            if(settings.domain) {
              options.domain = settings.domain;
          ***REMOVED***
            if(settings.path) {
              options.path = settings.path;
          ***REMOVED***
            return options;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        clear: function() {
          module.storage.remove(settings.key);
 ***REMOVED*****REMOVED***

        storage: {
          set: function(key, value) {
            var
              options = module.get.storageOptions()
            ;
            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {
              window.localStorage.setItem(key, value);
              module.debug('Value stored using local storage', key, value);
          ***REMOVED***
            else if(settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {
              window.sessionStorage.setItem(key, value);
              module.debug('Value stored using session storage', key, value);
          ***REMOVED***
            else if($.cookie !== undefined) {
              $.cookie(key, value, options);
              module.debug('Value stored using cookie', key, value, options);
          ***REMOVED***
            else {
              module.error(error.noCookieStorage);
              return;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          get: function(key, value) {
            var
              storedValue
            ;
            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {
              storedValue = window.localStorage.getItem(key);
          ***REMOVED***
            else if(settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {
              storedValue = window.sessionStorage.getItem(key);
          ***REMOVED***
            // get by cookie
            else if($.cookie !== undefined) {
              storedValue = $.cookie(key);
          ***REMOVED***
            else {
              module.error(error.noCookieStorage);
          ***REMOVED***
            if(storedValue == 'undefined' || storedValue == 'null' || storedValue === undefined || storedValue === null) {
              storedValue = undefined;
          ***REMOVED***
            return storedValue;
   ***REMOVED*****REMOVED***
          remove: function(key) {
            var
              options = module.get.storageOptions()
            ;
            if(settings.storageMethod == 'localstorage' && window.localStorage !== undefined) {
              window.localStorage.removeItem(key);
          ***REMOVED***
            else if(settings.storageMethod == 'sessionstorage' && window.sessionStorage !== undefined) {
              window.sessionStorage.removeItem(key);
          ***REMOVED***
            // store by cookie
            else if($.cookie !== undefined) {
              $.removeCookie(key, options);
          ***REMOVED***
            else {
              module.error(error.noStorage);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            if($.isPlainObject(settings[name])) {
              $.extend(true, settings[name], value);
          ***REMOVED***
            else {
              settings[name] = value;
          ***REMOVED***
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                module.error(error.method, query);
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***
          if(Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***;

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
      ***REMOVED***
        module.invoke(query);
    ***REMOVED***
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
      ***REMOVED***
        module.initialize();
    ***REMOVED***
  ***REMOVED***)
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
***REMOVED***;

$.fn.nag.settings = {

  name        : 'Nag',

  silent      : false,
  debug       : false,
  verbose     : false,
  performance : true,

  namespace   : 'Nag',

  // allows cookie to be overridden
  persist     : false,

  // set to zero to require manually dismissal, otherwise hides on its own
  displayTime : 0,

  animation   : {
    show : 'slide',
    hide : 'slide'
***REMOVED***

  context       : false,
  detachable    : false,

  expires       : 30,
  domain        : false,
  path          : '/',

  // type of storage to use
  storageMethod : 'cookie',

  // value to store in dismissed localstorage/cookie
  key           : 'nag',
  value         : 'dismiss',

  error: {
    noCookieStorage : '$.cookie is not included. A storage solution is required.',
    noStorage       : 'Neither $.cookie or store is defined. A storage solution is required for storing state',
    method          : 'The method you called is not defined.'
***REMOVED***

  className     : {
    bottom : 'bottom',
    fixed  : 'fixed'
***REMOVED***

  selector      : {
    close : '.close.icon'
***REMOVED***

  speed         : 500,
  easing        : 'easeOutQuad',

  onHide: function() {***REMOVED***

***REMOVED***;

// Adds easing
$.extend( $.easing, {
  easeOutQuad: function (x, t, b, c, d) {
    return -c***REMOVED***(t/=d)*(t-2) + b;
***REMOVED***
***REMOVED***);

***REMOVED***)( jQuery, window, document );

/*!
***REMOVED*** # Fomantic-UI - Popup
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

***REMOVED***;

$.isFunction = $.isFunction || function(obj) {
  return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.popup = function(parameters) {
  var
    $allModules    = $(this),
    $document      = $(document),
    $window        = $(window),
    $body          = $('body'),

    moduleSelector = $allModules.selector || '',

    clickEvent      = ('ontouchstart' in document.documentElement)
        ? 'touchstart'
        : 'click',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),

    returnedValue
  ;
  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {***REMOVED***, $.fn.popup.settings, parameters)
          : $.extend({***REMOVED***, $.fn.popup.settings),

        selector           = settings.selector,
        className          = settings.className,
        error              = settings.error,
        metadata           = settings.metadata,
        namespace          = settings.namespace,

        eventNamespace     = '.' + settings.namespace,
        moduleNamespace    = 'module-' + namespace,

        $module            = $(this),
        $context           = $(settings.context),
        $scrollContext     = $(settings.scrollContext),
        $boundary          = $(settings.boundary),
        $target            = (settings.target)
          ? $(settings.target)
          : $module,

        $popup,
        $offsetParent,

        searchDepth        = 0,
        triedPositions     = false,
        openedWithTouch    = false,

        element            = this,
        instance           = $module.data(moduleNamespace),

        documentObserver,
        elementNamespace,
        id,
        module
      ;

      module = {

        // binds events
        initialize: function() {
          module.debug('Initializing', $module);
          module.createID();
          module.bind.events();
          if(!module.exists() && settings.preserve) {
            module.create();
        ***REMOVED***
          if(settings.observeChanges) {
            module.observeChanges();
        ***REMOVED***
          module.instantiate();
 ***REMOVED*****REMOVED***

        instantiate: function() {
          module.verbose('Storing instance', module);
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
 ***REMOVED*****REMOVED***

        observeChanges: function() {
          if('MutationObserver' in window) {
            documentObserver = new MutationObserver(module.event.documentChanged);
            documentObserver.observe(document, {
              childList : true,
              subtree   : true
          ***REMOVED***);
            module.debug('Setting up mutation observer', documentObserver);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        refresh: function() {
          if(settings.popup) {
            $popup = $(settings.popup).eq(0);
        ***REMOVED***
          else {
            if(settings.inline) {
              $popup = $target.nextAll(selector.popup).eq(0);
              settings.popup = $popup;
          ***REMOVED***
        ***REMOVED***
          if(settings.popup) {
            $popup.addClass(className.loading);
            $offsetParent = module.get.offsetParent();
            $popup.removeClass(className.loading);
            if(settings.movePopup && module.has.popup() && module.get.offsetParent($popup)[0] !== $offsetParent[0]) {
              module.debug('Moving popup to the same offset parent as target');
              $popup
                .detach()
                .appendTo($offsetParent)
              ;
          ***REMOVED***
        ***REMOVED***
          else {
            $offsetParent = (settings.inline)
              ? module.get.offsetParent($target)
              : module.has.popup()
                ? module.get.offsetParent($popup)
                : $body
            ;
        ***REMOVED***
          if( $offsetParent.is('html') && $offsetParent[0] !== $body[0] ) {
            module.debug('Setting page as offset parent');
            $offsetParent = $body;
        ***REMOVED***
          if( module.get.variation() ) {
            module.set.variation();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        reposition: function() {
          module.refresh();
          module.set.position();
 ***REMOVED*****REMOVED***

        destroy: function() {
          module.debug('Destroying previous module');
          if(documentObserver) {
            documentObserver.disconnect();
        ***REMOVED***
          // remove element only if was created dynamically
          if($popup && !settings.preserve) {
            module.removePopup();
        ***REMOVED***
          // clear all timeouts
          clearTimeout(module.hideTimer);
          clearTimeout(module.showTimer);
          // remove events
          module.unbind.close();
          module.unbind.events();
          $module
            .removeData(moduleNamespace)
          ;
 ***REMOVED*****REMOVED***

        event: {
          start:  function(event) {
            var
              delay = ($.isPlainObject(settings.delay))
                ? settings.delay.show
                : settings.delay
            ;
            clearTimeout(module.hideTimer);
            if(!openedWithTouch || (openedWithTouch && settings.addTouchEvents) ) {
              module.showTimer = setTimeout(module.show, delay);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          end:  function() {
            var
              delay = ($.isPlainObject(settings.delay))
                ? settings.delay.hide
                : settings.delay
            ;
            clearTimeout(module.showTimer);
            module.hideTimer = setTimeout(module.hide, delay);
   ***REMOVED*****REMOVED***
          touchstart: function(event) {
            openedWithTouch = true;
            if(settings.addTouchEvents) {
              module.show();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          resize: function() {
            if( module.is.visible() ) {
              module.set.position();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          documentChanged: function(mutations) {
            [].forEach.call(mutations, function(mutation) {
              if(mutation.removedNodes) {
                [].forEach.call(mutation.removedNodes, function(node) {
                  if(node == element || $(node).find(element).length > 0) {
                    module.debug('Element removed from DOM, tearing down events');
                    module.destroy();
                ***REMOVED***
              ***REMOVED***);
            ***REMOVED***
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          hideGracefully: function(event) {
            var
              $target = $(event.target),
              isInDOM = $.contains(document.documentElement, event.target),
              inPopup = ($target.closest(selector.popup).length > 0)
            ;
            // don't close on clicks inside popup
            if(event && !inPopup && isInDOM) {
              module.debug('Click occurred outside popup hiding popup');
              module.hide();
          ***REMOVED***
            else {
              module.debug('Click was inside popup, keeping popup open');
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        // generates popup html from metadata
        create: function() {
          var
            html      = module.get.html(),
            title     = module.get.title(),
            content   = module.get.content()
          ;

          if(html || content || title) {
            module.debug('Creating pop-up html');
            if(!html) {
              html = settings.templates.popup({
                title   : title,
                content : content
            ***REMOVED***);
          ***REMOVED***
            $popup = $('<div/>')
              .addClass(className.popup)
              .data(metadata.activator, $module)
              .html(html)
            ;
            if(settings.inline) {
              module.verbose('Inserting popup element inline', $popup);
              $popup
                .insertAfter($module)
              ;
          ***REMOVED***
            else {
              module.verbose('Appending popup element to body', $popup);
              $popup
                .appendTo( $context )
              ;
          ***REMOVED***
            module.refresh();
            module.set.variation();

            if(settings.hoverable) {
              module.bind.popup();
          ***REMOVED***
            settings.onCreate.call($popup, element);
        ***REMOVED***
          else if(settings.popup) {
            $(settings.popup).data(metadata.activator, $module);
            module.verbose('Used popup specified in settings');
            module.refresh();
            if(settings.hoverable) {
              module.bind.popup();
          ***REMOVED***
        ***REMOVED***
          else if($target.next(selector.popup).length !== 0) {
            module.verbose('Pre-existing popup found');
            settings.inline = true;
            settings.popup  = $target.next(selector.popup).data(metadata.activator, $module);
            module.refresh();
            if(settings.hoverable) {
              module.bind.popup();
          ***REMOVED***
        ***REMOVED***
          else {
            module.debug('No content specified skipping display', element);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        createID: function() {
          id = (Math.random().toString(16) + '000000000').substr(2, 8);
          elementNamespace = '.' + id;
          module.verbose('Creating unique id for element', id);
 ***REMOVED*****REMOVED***

        // determines popup state
        toggle: function() {
          module.debug('Toggling pop-up');
          if( module.is.hidden() ) {
            module.debug('Popup is hidden, showing pop-up');
            module.unbind.close();
            module.show();
        ***REMOVED***
          else {
            module.debug('Popup is visible, hiding pop-up');
            module.hide();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        show: function(callback) {
          callback = callback || function(){***REMOVED***;
          module.debug('Showing pop-up', settings.transition);
          if(module.is.hidden() && !( module.is.active() && module.is.dropdown()) ) {
            if( !module.exists() ) {
              module.create();
          ***REMOVED***
            if(settings.onShow.call($popup, element) === false) {
              module.debug('onShow callback returned false, cancelling popup animation');
              return;
          ***REMOVED***
            else if(!settings.preserve && !settings.popup) {
              module.refresh();
          ***REMOVED***
            if( $popup && module.set.position() ) {
              module.save.conditions();
              if(settings.exclusive) {
                module.hideAll();
            ***REMOVED***
              module.animate.show(callback);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***


        hide: function(callback) {
          callback = callback || function(){***REMOVED***;
          if( module.is.visible() || module.is.animating() ) {
            if(settings.onHide.call($popup, element) === false) {
              module.debug('onHide callback returned false, cancelling popup animation');
              return;
          ***REMOVED***
            module.remove.visible();
            module.unbind.close();
            module.restore.conditions();
            module.animate.hide(callback);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        hideAll: function() {
          $(selector.popup)
            .filter('.' + className.popupVisible)
            .each(function() {
              $(this)
                .data(metadata.activator)
                  .popup('hide')
              ;
          ***REMOVED***)
          ;
 ***REMOVED*****REMOVED***
        exists: function() {
          if(!$popup) {
            return false;
        ***REMOVED***
          if(settings.inline || settings.popup) {
            return ( module.has.popup() );
        ***REMOVED***
          else {
            return ( $popup.closest($context).length >= 1 )
              ? true
              : false
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        removePopup: function() {
          if( module.has.popup() && !settings.popup) {
            module.debug('Removing popup', $popup);
            $popup.remove();
            $popup = undefined;
            settings.onRemove.call($popup, element);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        save: {
          conditions: function() {
            module.cache = {
              title: $module.attr('title')
          ***REMOVED***;
            if (module.cache.title) {
              $module.removeAttr('title');
          ***REMOVED***
            module.verbose('Saving original attributes', module.cache.title);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        restore: {
          conditions: function() {
            if(module.cache && module.cache.title) {
              $module.attr('title', module.cache.title);
              module.verbose('Restoring original attributes', module.cache.title);
          ***REMOVED***
            return true;
        ***REMOVED***
 ***REMOVED*****REMOVED***
        supports: {
          svg: function() {
            return (typeof SVGGraphicsElement !== 'undefined');
        ***REMOVED***
 ***REMOVED*****REMOVED***
        animate: {
          show: function(callback) {
            callback = $.isFunction(callback) ? callback : function(){***REMOVED***;
            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
              module.set.visible();
              $popup
                .transition({
                  animation  : settings.transition + ' in',
                  queue      : false,
                  debug      : settings.debug,
                  verbose    : settings.verbose,
                  duration   : settings.duration,
                  onComplete : function() {
                    module.bind.close();
                    callback.call($popup, element);
                    settings.onVisible.call($popup, element);
                ***REMOVED***
              ***REMOVED***)
              ;
          ***REMOVED***
            else {
              module.error(error.noTransition);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          hide: function(callback) {
            callback = $.isFunction(callback) ? callback : function(){***REMOVED***;
            module.debug('Hiding pop-up');
            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
              $popup
                .transition({
                  animation  : settings.transition + ' out',
                  queue      : false,
                  duration   : settings.duration,
                  debug      : settings.debug,
                  verbose    : settings.verbose,
                  onComplete : function() {
                    module.reset();
                    callback.call($popup, element);
                    settings.onHidden.call($popup, element);
                ***REMOVED***
              ***REMOVED***)
              ;
          ***REMOVED***
            else {
              module.error(error.noTransition);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        change: {
          content: function(html) {
            $popup.html(html);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        get: {
          html: function() {
            $module.removeData(metadata.html);
            return $module.data(metadata.html) || settings.html;
   ***REMOVED*****REMOVED***
          title: function() {
            $module.removeData(metadata.title);
            return $module.data(metadata.title) || settings.title;
   ***REMOVED*****REMOVED***
          content: function() {
            $module.removeData(metadata.content);
            return $module.data(metadata.content) || settings.content || $module.attr('title');
   ***REMOVED*****REMOVED***
          variation: function() {
            $module.removeData(metadata.variation);
            return $module.data(metadata.variation) || settings.variation;
   ***REMOVED*****REMOVED***
          popup: function() {
            return $popup;
   ***REMOVED*****REMOVED***
          popupOffset: function() {
            return $popup.offset();
   ***REMOVED*****REMOVED***
          calculations: function() {
            var
              $popupOffsetParent = module.get.offsetParent($popup),
              targetElement      = $target[0],
              isWindow           = ($boundary[0] == window),
              targetPosition     = (settings.inline || (settings.popup && settings.movePopup))
                ? $target.position()
                : $target.offset(),
              screenPosition = (isWindow)
                ? { top: 0, left: 0 ***REMOVED***
                : $boundary.offset(),
              calculations   = {***REMOVED***,
              scroll = (isWindow)
                ? { top: $window.scrollTop(), left: $window.scrollLeft() ***REMOVED***
                : { top: 0, left: 0***REMOVED***,
              screen
            ;
            calculations = {
              // element which is launching popup
              target : {
                element : $target[0],
                width   : $target.outerWidth(),
                height  : $target.outerHeight(),
                top     : targetPosition.top,
                left    : targetPosition.left,
                margin  : {***REMOVED***
  ***REMOVED*****REMOVED*****REMOVED***
              // popup itself
              popup : {
                width  : $popup.outerWidth(),
                height : $popup.outerHeight()
  ***REMOVED*****REMOVED*****REMOVED***
              // offset container (or 3d context)
              parent : {
                width  : $offsetParent.outerWidth(),
                height : $offsetParent.outerHeight()
  ***REMOVED*****REMOVED*****REMOVED***
              // screen boundaries
              screen : {
                top  : screenPosition.top,
                left : screenPosition.left,
                scroll: {
                  top  : scroll.top,
                  left : scroll.left
    ***REMOVED*****REMOVED*****REMOVED***
                width  : $boundary.width(),
                height : $boundary.height()
            ***REMOVED***
          ***REMOVED***;

            // if popup offset context is not same as target, then adjust calculations
            if($popupOffsetParent.get(0) !== $offsetParent.get(0)) {
              var
                popupOffset        = $popupOffsetParent.offset()
              ;
              calculations.target.top -= popupOffset.top;
              calculations.target.left -= popupOffset.left;
              calculations.parent.width = $popupOffsetParent.outerWidth();
              calculations.parent.height = $popupOffsetParent.outerHeight();
          ***REMOVED***

            // add in container calcs if fluid
            if( settings.setFluidWidth && module.is.fluid() ) {
              calculations.container = {
                width: $popup.parent().outerWidth()
            ***REMOVED***;
              calculations.popup.width = calculations.container.width;
          ***REMOVED***

            // add in margins if inline
            calculations.target.margin.top = (settings.inline)
              ? parseInt( window.getComputedStyle(targetElement).getPropertyValue('margin-top'), 10)
              : 0
            ;
            calculations.target.margin.left = (settings.inline)
              ? module.is.rtl()
                ? parseInt( window.getComputedStyle(targetElement).getPropertyValue('margin-right'), 10)
                : parseInt( window.getComputedStyle(targetElement).getPropertyValue('margin-left'), 10)
              : 0
            ;
            // calculate screen boundaries
            screen = calculations.screen;
            calculations.boundary = {
              top    : screen.top + screen.scroll.top,
              bottom : screen.top + screen.scroll.top + screen.height,
              left   : screen.left + screen.scroll.left,
              right  : screen.left + screen.scroll.left + screen.width
          ***REMOVED***;
            return calculations;
   ***REMOVED*****REMOVED***
          id: function() {
            return id;
   ***REMOVED*****REMOVED***
          startEvent: function() {
            if(settings.on == 'hover') {
              return 'mouseenter';
          ***REMOVED***
            else if(settings.on == 'focus') {
              return 'focus';
          ***REMOVED***
            return false;
   ***REMOVED*****REMOVED***
          scrollEvent: function() {
            return 'scroll';
   ***REMOVED*****REMOVED***
          endEvent: function() {
            if(settings.on == 'hover') {
              return 'mouseleave';
          ***REMOVED***
            else if(settings.on == 'focus') {
              return 'blur';
          ***REMOVED***
            return false;
   ***REMOVED*****REMOVED***
          distanceFromBoundary: function(offset, calculations) {
            var
              distanceFromBoundary = {***REMOVED***,
              popup,
              boundary
            ;
            calculations = calculations || module.get.calculations();

            // shorthand
            popup        = calculations.popup;
            boundary     = calculations.boundary;

            if(offset) {
              distanceFromBoundary = {
                top    : (offset.top - boundary.top),
                left   : (offset.left - boundary.left),
                right  : (boundary.right - (offset.left + popup.width) ),
                bottom : (boundary.bottom - (offset.top + popup.height) )
            ***REMOVED***;
              module.verbose('Distance from boundaries determined', offset, distanceFromBoundary);
          ***REMOVED***
            return distanceFromBoundary;
   ***REMOVED*****REMOVED***
          offsetParent: function($element) {
            var
              element = ($element !== undefined)
                ? $element[0]
                : $target[0],
              parentNode = element.parentNode,
              $node    = $(parentNode)
            ;
            if(parentNode) {
              var
                is2D     = ($node.css('transform') === 'none'),
                isStatic = ($node.css('position') === 'static'),
                isBody   = $node.is('body')
              ;
              while(parentNode && !isBody && isStatic && is2D) {
                parentNode = parentNode.parentNode;
                $node    = $(parentNode);
                is2D     = ($node.css('transform') === 'none');
                isStatic = ($node.css('position') === 'static');
                isBody   = $node.is('body');
            ***REMOVED***
          ***REMOVED***
            return ($node && $node.length > 0)
              ? $node
              : $()
            ;
   ***REMOVED*****REMOVED***
          positions: function() {
            return {
              'top left'      : false,
              'top center'    : false,
              'top right'     : false,
              'bottom left'   : false,
              'bottom center' : false,
              'bottom right'  : false,
              'left center'   : false,
              'right center'  : false
          ***REMOVED***;
   ***REMOVED*****REMOVED***
          nextPosition: function(position) {
            var
              positions          = position.split(' '),
              verticalPosition   = positions[0],
              horizontalPosition = positions[1],
              opposite = {
                top    : 'bottom',
                bottom : 'top',
                left   : 'right',
                right  : 'left'
  ***REMOVED*****REMOVED*****REMOVED***
              adjacent = {
                left   : 'center',
                center : 'right',
                right  : 'left'
  ***REMOVED*****REMOVED*****REMOVED***
              backup = {
                'top left'      : 'top center',
                'top center'    : 'top right',
                'top right'     : 'right center',
                'right center'  : 'bottom right',
                'bottom right'  : 'bottom center',
                'bottom center' : 'bottom left',
                'bottom left'   : 'left center',
                'left center'   : 'top left'
  ***REMOVED*****REMOVED*****REMOVED***
              adjacentsAvailable = (verticalPosition == 'top' || verticalPosition == 'bottom'),
              oppositeTried = false,
              adjacentTried = false,
              nextPosition  = false
            ;
            if(!triedPositions) {
              module.verbose('All available positions available');
              triedPositions = module.get.positions();
          ***REMOVED***

            module.debug('Recording last position tried', position);
            triedPositions[position] = true;

            if(settings.prefer === 'opposite') {
              nextPosition  = [opposite[verticalPosition], horizontalPosition];
              nextPosition  = nextPosition.join(' ');
              oppositeTried = (triedPositions[nextPosition] === true);
              module.debug('Trying opposite strategy', nextPosition);
          ***REMOVED***
            if((settings.prefer === 'adjacent') && adjacentsAvailable ) {
              nextPosition  = [verticalPosition, adjacent[horizontalPosition]];
              nextPosition  = nextPosition.join(' ');
              adjacentTried = (triedPositions[nextPosition] === true);
              module.debug('Trying adjacent strategy', nextPosition);
          ***REMOVED***
            if(adjacentTried || oppositeTried) {
              module.debug('Using backup position', nextPosition);
              nextPosition = backup[position];
          ***REMOVED***
            return nextPosition;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        set: {
          position: function(position, calculations) {

            // exit conditions
            if($target.length === 0 || $popup.length === 0) {
              module.error(error.notFound);
              return;
          ***REMOVED***
            var
              offset,
              distanceAway,
              target,
              popup,
              parent,
              positioning,
              popupOffset,
              distanceFromBoundary
            ;

            calculations = calculations || module.get.calculations();
            position     = position     || $module.data(metadata.position) || settings.position;

            offset       = $module.data(metadata.offset) || settings.offset;
            distanceAway = settings.distanceAway;

            // shorthand
            target = calculations.target;
            popup  = calculations.popup;
            parent = calculations.parent;

            if(module.should.centerArrow(calculations)) {
              module.verbose('Adjusting offset to center arrow on small target element');
              if(position == 'top left' || position == 'bottom left') {
                offset += (target.width / 2);
                offset -= settings.arrowPixelsFromEdge;
            ***REMOVED***
              if(position == 'top right' || position == 'bottom right') {
                offset -= (target.width / 2);
                offset += settings.arrowPixelsFromEdge;
            ***REMOVED***
          ***REMOVED***

            if(target.width === 0 && target.height === 0 && !module.is.svg(target.element)) {
              module.debug('Popup target is hidden, no action taken');
              return false;
          ***REMOVED***

            if(settings.inline) {
              module.debug('Adding margin to calculation', target.margin);
              if(position == 'left center' || position == 'right center') {
                offset       +=  target.margin.top;
                distanceAway += -target.margin.left;
            ***REMOVED***
              else if (position == 'top left' || position == 'top center' || position == 'top right') {
                offset       += target.margin.left;
                distanceAway -= target.margin.top;
            ***REMOVED***
              else {
                offset       += target.margin.left;
                distanceAway += target.margin.top;
            ***REMOVED***
          ***REMOVED***

            module.debug('Determining popup position from calculations', position, calculations);

            if (module.is.rtl()) {
              position = position.replace(/left|right/g, function (match) {
                return (match == 'left')
                  ? 'right'
                  : 'left'
                ;
            ***REMOVED***);
              module.debug('RTL: Popup position updated', position);
          ***REMOVED***

            // if last attempt use specified last resort position
            if(searchDepth == settings.maxSearchDepth && typeof settings.lastResort === 'string') {
              position = settings.lastResort;
          ***REMOVED***

            switch (position) {
              case 'top left':
                positioning = {
                  top    : 'auto',
                  bottom : parent.height - target.top + distanceAway,
                  left   : target.left + offset,
                  right  : 'auto'
              ***REMOVED***;
              break;
              case 'top center':
                positioning = {
                  bottom : parent.height - target.top + distanceAway,
                  left   : target.left + (target.width / 2) - (popup.width / 2) + offset,
                  top    : 'auto',
                  right  : 'auto'
              ***REMOVED***;
              break;
              case 'top right':
                positioning = {
                  bottom :  parent.height - target.top + distanceAway,
                  right  :  parent.width - target.left - target.width - offset,
                  top    : 'auto',
                  left   : 'auto'
              ***REMOVED***;
              break;
              case 'left center':
                positioning = {
                  top    : target.top + (target.height / 2) - (popup.height / 2) + offset,
                  right  : parent.width - target.left + distanceAway,
                  left   : 'auto',
                  bottom : 'auto'
              ***REMOVED***;
              break;
              case 'right center':
                positioning = {
                  top    : target.top + (target.height / 2) - (popup.height / 2) + offset,
                  left   : target.left + target.width + distanceAway,
                  bottom : 'auto',
                  right  : 'auto'
              ***REMOVED***;
              break;
              case 'bottom left':
                positioning = {
                  top    : target.top + target.height + distanceAway,
                  left   : target.left + offset,
                  bottom : 'auto',
                  right  : 'auto'
              ***REMOVED***;
              break;
              case 'bottom center':
                positioning = {
                  top    : target.top + target.height + distanceAway,
                  left   : target.left + (target.width / 2) - (popup.width / 2) + offset,
                  bottom : 'auto',
                  right  : 'auto'
              ***REMOVED***;
              break;
              case 'bottom right':
                positioning = {
                  top    : target.top + target.height + distanceAway,
                  right  : parent.width - target.left  - target.width - offset,
                  left   : 'auto',
                  bottom : 'auto'
              ***REMOVED***;
              break;
          ***REMOVED***
            if(positioning === undefined) {
              module.error(error.invalidPosition, position);
          ***REMOVED***

            module.debug('Calculated popup positioning values', positioning);

            // tentatively place on stage
            $popup
              .css(positioning)
              .removeClass(className.position)
              .addClass(position)
              .addClass(className.loading)
            ;

            popupOffset = module.get.popupOffset();

            // see if any boundaries are surpassed with this tentative position
            distanceFromBoundary = module.get.distanceFromBoundary(popupOffset, calculations);

            if(!settings.forcePosition && module.is.offstage(distanceFromBoundary, position) ) {
              module.debug('Position is outside viewport', position);
              if(searchDepth < settings.maxSearchDepth) {
                searchDepth++;
                position = module.get.nextPosition(position);
                module.debug('Trying new position', position);
                return ($popup)
                  ? module.set.position(position, calculations)
                  : false
                ;
            ***REMOVED***
              else {
                if(settings.lastResort) {
                  module.debug('No position found, showing with last position');
              ***REMOVED***
                else {
                  module.debug('Popup could not find a position to display', $popup);
                  module.error(error.cannotPlace, element);
                  module.remove.attempts();
                  module.remove.loading();
                  module.reset();
                  settings.onUnplaceable.call($popup, element);
                  return false;
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
            module.debug('Position is on stage', position);
            module.remove.attempts();
            module.remove.loading();
            if( settings.setFluidWidth && module.is.fluid() ) {
              module.set.fluidWidth(calculations);
          ***REMOVED***
            return true;
   ***REMOVED*****REMOVED***

          fluidWidth: function(calculations) {
            calculations = calculations || module.get.calculations();
            module.debug('Automatically setting element width to parent width', calculations.parent.width);
            $popup.css('width', calculations.container.width);
   ***REMOVED*****REMOVED***

          variation: function(variation) {
            variation = variation || module.get.variation();
            if(variation && module.has.popup() ) {
              module.verbose('Adding variation to popup', variation);
              $popup.addClass(variation);
          ***REMOVED***
   ***REMOVED*****REMOVED***

          visible: function() {
            $module.addClass(className.visible);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        remove: {
          loading: function() {
            $popup.removeClass(className.loading);
   ***REMOVED*****REMOVED***
          variation: function(variation) {
            variation = variation || module.get.variation();
            if(variation) {
              module.verbose('Removing variation', variation);
              $popup.removeClass(variation);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          visible: function() {
            $module.removeClass(className.visible);
   ***REMOVED*****REMOVED***
          attempts: function() {
            module.verbose('Resetting all searched positions');
            searchDepth    = 0;
            triedPositions = false;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        bind: {
          events: function() {
            module.debug('Binding popup events to module');
            if(settings.on == 'click') {
              $module
                .on(clickEvent + eventNamespace, module.toggle)
              ;
          ***REMOVED***
            if(settings.on == 'hover') {
              $module
                .on('touchstart' + eventNamespace, module.event.touchstart)
              ;
          ***REMOVED***
            if( module.get.startEvent() ) {
              $module
                .on(module.get.startEvent() + eventNamespace, module.event.start)
                .on(module.get.endEvent() + eventNamespace, module.event.end)
              ;
          ***REMOVED***
            if(settings.target) {
              module.debug('Target set to element', $target);
          ***REMOVED***
            $window.on('resize' + elementNamespace, module.event.resize);
   ***REMOVED*****REMOVED***
          popup: function() {
            module.verbose('Allowing hover events on popup to prevent closing');
            if( $popup && module.has.popup() ) {
              $popup
                .on('mouseenter' + eventNamespace, module.event.start)
                .on('mouseleave' + eventNamespace, module.event.end)
              ;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          close: function() {
            if(settings.hideOnScroll === true || (settings.hideOnScroll == 'auto' && settings.on != 'click')) {
              module.bind.closeOnScroll();
          ***REMOVED***
            if(module.is.closable()) {
              module.bind.clickaway();
          ***REMOVED***
            else if(settings.on == 'hover' && openedWithTouch) {
              module.bind.touchClose();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          closeOnScroll: function() {
            module.verbose('Binding scroll close event to document');
            $scrollContext
              .one(module.get.scrollEvent() + elementNamespace, module.event.hideGracefully)
            ;
   ***REMOVED*****REMOVED***
          touchClose: function() {
            module.verbose('Binding popup touchclose event to document');
            $document
              .on('touchstart' + elementNamespace, function(event) {
                module.verbose('Touched away from popup');
                module.event.hideGracefully.call(element, event);
            ***REMOVED***)
            ;
   ***REMOVED*****REMOVED***
          clickaway: function() {
            module.verbose('Binding popup close event to document');
            $document
              .on(clickEvent + elementNamespace, function(event) {
                module.verbose('Clicked away from popup');
                module.event.hideGracefully.call(element, event);
            ***REMOVED***)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        unbind: {
          events: function() {
            $window
              .off(elementNamespace)
            ;
            $module
              .off(eventNamespace)
            ;
   ***REMOVED*****REMOVED***
          close: function() {
            $document
              .off(elementNamespace)
            ;
            $scrollContext
              .off(elementNamespace)
            ;
   ***REMOVED*****REMOVED***
 ***REMOVED*****REMOVED***

        has: {
          popup: function() {
            return ($popup && $popup.length > 0);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        should: {
          centerArrow: function(calculations) {
            return !module.is.basic() && calculations.target.width <= (settings.arrowPixelsFromEdge***REMOVED*** 2);
   ***REMOVED*****REMOVED***
 ***REMOVED*****REMOVED***

        is: {
          closable: function() {
            if(settings.closable == 'auto') {
              if(settings.on == 'hover') {
                return false;
            ***REMOVED***
              return true;
          ***REMOVED***
            return settings.closable;
   ***REMOVED*****REMOVED***
          offstage: function(distanceFromBoundary, position) {
            var
              offstage = []
            ;
            // return boundaries that have been surpassed
            $.each(distanceFromBoundary, function(direction, distance) {
              if(distance < -settings.jitter) {
                module.debug('Position exceeds allowable distance from edge', direction, distance, position);
                offstage.push(direction);
            ***REMOVED***
          ***REMOVED***);
            if(offstage.length > 0) {
              return true;
          ***REMOVED***
            else {
              return false;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          svg: function(element) {
            return module.supports.svg() && (element instanceof SVGGraphicsElement);
   ***REMOVED*****REMOVED***
          basic: function() {
            return $module.hasClass(className.basic);
   ***REMOVED*****REMOVED***
          active: function() {
            return $module.hasClass(className.active);
   ***REMOVED*****REMOVED***
          animating: function() {
            return ($popup !== undefined && $popup.hasClass(className.animating) );
   ***REMOVED*****REMOVED***
          fluid: function() {
            return ($popup !== undefined && $popup.hasClass(className.fluid));
   ***REMOVED*****REMOVED***
          visible: function() {
            return ($popup !== undefined && $popup.hasClass(className.popupVisible));
   ***REMOVED*****REMOVED***
          dropdown: function() {
            return $module.hasClass(className.dropdown);
   ***REMOVED*****REMOVED***
          hidden: function() {
            return !module.is.visible();
   ***REMOVED*****REMOVED***
          rtl: function () {
            return $module.attr('dir') === 'rtl' || $module.css('direction') === 'rtl';
        ***REMOVED***
 ***REMOVED*****REMOVED***

        reset: function() {
          module.remove.visible();
          if(settings.preserve) {
            if($.fn.transition !== undefined) {
              $popup
                .transition('remove transition')
              ;
          ***REMOVED***
        ***REMOVED***
          else {
            module.removePopup();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        setting: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            settings[name] = value;
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***
          if(Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***;

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
      ***REMOVED***
        module.invoke(query);
    ***REMOVED***
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
      ***REMOVED***
        module.initialize();
    ***REMOVED***
  ***REMOVED***)
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
***REMOVED***;

$.fn.popup.settings = {

  name           : 'Popup',

  // module settings
  silent         : false,
  debug          : false,
  verbose        : false,
  performance    : true,
  namespace      : 'popup',

  // whether it should use dom mutation observers
  observeChanges : true,

  // callback only when element added to dom
  onCreate       : function(){***REMOVED***,

  // callback before element removed from dom
  onRemove       : function(){***REMOVED***,

  // callback before show animation
  onShow         : function(){***REMOVED***,

  // callback after show animation
  onVisible      : function(){***REMOVED***,

  // callback before hide animation
  onHide         : function(){***REMOVED***,

  // callback when popup cannot be positioned in visible screen
  onUnplaceable  : function(){***REMOVED***,

  // callback after hide animation
  onHidden       : function(){***REMOVED***,

  // when to show popup
  on             : 'hover',

  // element to use to determine if popup is out of boundary
  boundary       : window,

  // whether to add touchstart events when using hover
  addTouchEvents : true,

  // default position relative to element
  position       : 'top left',

  // if given position should be used regardless if popup fits
  forcePosition  : false,

  // name of variation to use
  variation      : '',

  // whether popup should be moved to context
  movePopup      : true,

  // element which popup should be relative to
  target         : false,

  // jq selector or element that should be used as popup
  popup          : false,

  // popup should remain inline next to activator
  inline         : false,

  // popup should be removed from page on hide
  preserve       : false,

  // popup should not close when being hovered on
  hoverable      : false,

  // explicitly set content
  content        : false,

  // explicitly set html
  html           : false,

  // explicitly set title
  title          : false,

  // whether automatically close on clickaway when on click
  closable       : true,

  // automatically hide on scroll
  hideOnScroll   : 'auto',

  // hide other popups on show
  exclusive      : false,

  // context to attach popups
  context        : 'body',

  // context for binding scroll events
  scrollContext  : window,

  // position to prefer when calculating new position
  prefer         : 'opposite',

  // specify position to appear even if it doesn't fit
  lastResort     : false,

  // number of pixels from edge of popup to pointing arrow center (used from centering)
  arrowPixelsFromEdge: 20,

  // delay used to prevent accidental refiring of animations due to user error
  delay : {
    show : 50,
    hide : 70
***REMOVED***

  // whether fluid variation should assign width explicitly
  setFluidWidth  : true,

  // transition settings
  duration       : 200,
  transition     : 'scale',

  // distance away from activating element in px
  distanceAway   : 0,

  // number of pixels an element is allowed to be "offstage" for a position to be chosen (allows for rounding)
  jitter         : 2,

  // offset on aligning axis from calculated position
  offset         : 0,

  // maximum times to look for a position before failing (9 positions total)
  maxSearchDepth : 15,

  error: {
    invalidPosition : 'The position you specified is not a valid position',
    cannotPlace     : 'Popup does not fit within the boundaries of the viewport',
    method          : 'The method you called is not defined.',
    noTransition    : 'This module requires ui transitions <https://github.com/Semantic-Org/UI-Transition>',
    notFound        : 'The target or popup you specified does not exist on the page'
***REMOVED***

  metadata: {
    activator : 'activator',
    content   : 'content',
    html      : 'html',
    offset    : 'offset',
    position  : 'position',
    title     : 'title',
    variation : 'variation'
***REMOVED***

  className   : {
    active       : 'active',
    basic        : 'basic',
    animating    : 'animating',
    dropdown     : 'dropdown',
    fluid        : 'fluid',
    loading      : 'loading',
    popup        : 'ui popup',
    position     : 'top left center bottom right',
    visible      : 'visible',
    popupVisible : 'visible'
***REMOVED***

  selector    : {
    popup    : '.ui.popup'
***REMOVED***

  templates: {
    escape: function(string) {
      var
        badChars     = /[<>"'`]/g,
        shouldEscape = /[&<>"'`]/,
        escape       = {
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#x27;",
          "`": "&#x60;"
 ***REMOVED*****REMOVED***
        escapedChar  = function(chr) {
          return escape[chr];
      ***REMOVED***
      ;
      if(shouldEscape.test(string)) {
        string = string.replace(/&(?![a-z0-9#]{1,6***REMOVED***;)/, "&amp;");
        return string.replace(badChars, escapedChar);
    ***REMOVED***
      return string;
  ***REMOVED***
    popup: function(text) {
      var
        html   = '',
        escape = $.fn.popup.settings.templates.escape
      ;
      if(typeof text !== undefined) {
        if(typeof text.title !== undefined && text.title) {
          text.title = escape(text.title);
          html += '<div class="header">' + text.title + '</div>';
      ***REMOVED***
        if(typeof text.content !== undefined && text.content) {
          text.content = escape(text.content);
          html += '<div class="content">' + text.content + '</div>';
      ***REMOVED***
    ***REMOVED***
      return html;
  ***REMOVED***
***REMOVED***

***REMOVED***;


***REMOVED***)( jQuery, window, document );

/*!
***REMOVED*** # Fomantic-UI - Progress
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

***REMOVED***;

$.isFunction = $.isFunction || function(obj) {
  return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.progress = function(parameters) {
  var
    $allModules    = $(this),

    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {***REMOVED***, $.fn.progress.settings, parameters)
          : $.extend({***REMOVED***, $.fn.progress.settings),

        className       = settings.className,
        metadata        = settings.metadata,
        namespace       = settings.namespace,
        selector        = settings.selector,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $bars           = $(this).find(selector.bar),
        $progresses     = $(this).find(selector.progress),
        $label          = $(this).find(selector.label),

        element         = this,
        instance        = $module.data(moduleNamespace),

        animating = false,
        transitionEnd,
        module
      ;
      module = {
        helper: {
          sum: function (nums) {
            return Array.isArray(nums) ? nums.reduce(function (left, right) {
              return left + Number(right);
***REMOVED*****REMOVED*****REMOVED*** 0) : 0;
   ***REMOVED*****REMOVED***
    ***REMOVED*****REMOVED*****REMOVED***
***REMOVED*****REMOVED*****REMOVED*** Derive precision for multiple progress with total and values.
***REMOVED*****REMOVED*****REMOVED***
***REMOVED*****REMOVED*****REMOVED*** This helper dervices a precision that is sufficiently large to show minimum value of multiple progress.
***REMOVED*****REMOVED*****REMOVED***
***REMOVED*****REMOVED*****REMOVED*** Example1
***REMOVED*****REMOVED*****REMOVED*** - total: 1122
***REMOVED*****REMOVED*****REMOVED*** - values: [325, 111, 74, 612]
***REMOVED*****REMOVED*****REMOVED*** - min ratio: 74/1122 = 0.0659...
***REMOVED*****REMOVED*****REMOVED*** - required precision:  100
***REMOVED*****REMOVED*****REMOVED***
***REMOVED*****REMOVED*****REMOVED*** Example2
***REMOVED*****REMOVED*****REMOVED*** - total: 10541
***REMOVED*****REMOVED*****REMOVED*** - values: [3235, 1111, 74, 6121]
***REMOVED*****REMOVED*****REMOVED*** - min ratio: 74/10541 = 0.0070...
***REMOVED*****REMOVED*****REMOVED*** - required precision:   1000
***REMOVED*****REMOVED*****REMOVED***
***REMOVED*****REMOVED*****REMOVED*** @param min A minimum value within multiple values
***REMOVED*****REMOVED*****REMOVED*** @param total A total amount of multiple values
***REMOVED*****REMOVED*****REMOVED*** @returns {number***REMOVED*** A precison. Could be 1, 10, 100, ... 1e+10.
***REMOVED*****REMOVED*****REMOVED***/
          derivePrecision: function(min, total) {
            var precisionPower = 0
            var precision = 1;
            var ratio = min / total;
            while (precisionPower < 10) {
              ratio = ratio***REMOVED*** precision;
              if (ratio > 1) {
                break;
            ***REMOVED***
              precision = Math.pow(10, precisionPower++);
          ***REMOVED***
            return precision;
   ***REMOVED*****REMOVED***
          forceArray: function (element) {
            return Array.isArray(element)
              ? element
              : !isNaN(element)
                ? [element]
                : typeof element == 'string'
                  ? element.split(',')
                  : []
              ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        initialize: function() {
          module.set.duration();
          module.set.transitionEvent();
          module.debug(element);

          module.read.metadata();
          module.read.settings();

          module.instantiate();
 ***REMOVED*****REMOVED***

        instantiate: function() {
          module.verbose('Storing instance of progress', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
 ***REMOVED*****REMOVED***
        destroy: function() {
          module.verbose('Destroying previous progress for', $module);
          clearInterval(instance.interval);
          module.remove.state();
          $module.removeData(moduleNamespace);
          instance = undefined;
 ***REMOVED*****REMOVED***

        reset: function() {
          module.remove.nextValue();
          module.update.progress(0);
 ***REMOVED*****REMOVED***

        complete: function(keepState) {
          if(module.percent === undefined || module.percent < 100) {
            module.remove.progressPoll();
            if(keepState !== true){
                module.set.percent(100);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        read: {
          metadata: function() {
            var
              data = {
                percent : module.helper.forceArray($module.data(metadata.percent)),
                total   : $module.data(metadata.total),
                value   : module.helper.forceArray($module.data(metadata.value))
            ***REMOVED***
            ;
            if(data.total) {
              module.debug('Total value set from metadata', data.total);
              module.set.total(data.total);
          ***REMOVED***
            if(data.value.length > 0) {
              module.debug('Current value set from metadata', data.value);
              module.set.value(data.value);
              module.set.progress(data.value);
          ***REMOVED***
            if(data.percent.length > 0) {
              module.debug('Current percent value set from metadata', data.percent);
              module.set.percent(data.percent);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          settings: function() {
            if(settings.total !== false) {
              module.debug('Current total set in settings', settings.total);
              module.set.total(settings.total);
          ***REMOVED***
            if(settings.value !== false) {
              module.debug('Current value set in settings', settings.value);
              module.set.value(settings.value);
              module.set.progress(module.value);
          ***REMOVED***
            if(settings.percent !== false) {
              module.debug('Current percent set in settings', settings.percent);
              module.set.percent(settings.percent);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        bind: {
          transitionEnd: function(callback) {
            var
              transitionEnd = module.get.transitionEnd()
            ;
            $bars
              .one(transitionEnd + eventNamespace, function(event) {
                clearTimeout(module.failSafeTimer);
                callback.call(this, event);
            ***REMOVED***)
            ;
            module.failSafeTimer = setTimeout(function() {
              $bars.triggerHandler(transitionEnd);
***REMOVED*****REMOVED*****REMOVED*** settings.duration + settings.failSafeDelay);
            module.verbose('Adding fail safe timer', module.timer);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        increment: function(incrementValue) {
          var
            startValue,
            newValue
          ;
          if( module.has.total() ) {
            startValue     = module.get.value();
            incrementValue = incrementValue || 1;
        ***REMOVED***
          else {
            startValue     = module.get.percent();
            incrementValue = incrementValue || module.get.randomValue();
        ***REMOVED***
          newValue = startValue + incrementValue;
          module.debug('Incrementing percentage by', startValue, newValue, incrementValue);
          newValue = module.get.normalizedValue(newValue);
          module.set.progress(newValue);
 ***REMOVED*****REMOVED***
        decrement: function(decrementValue) {
          var
            total     = module.get.total(),
            startValue,
            newValue
          ;
          if(total) {
            startValue     =  module.get.value();
            decrementValue =  decrementValue || 1;
            newValue       =  startValue - decrementValue;
            module.debug('Decrementing value by', decrementValue, startValue);
        ***REMOVED***
          else {
            startValue     =  module.get.percent();
            decrementValue =  decrementValue || module.get.randomValue();
            newValue       =  startValue - decrementValue;
            module.debug('Decrementing percentage by', decrementValue, startValue);
        ***REMOVED***
          newValue = module.get.normalizedValue(newValue);
          module.set.progress(newValue);
 ***REMOVED*****REMOVED***

        has: {
          progressPoll: function() {
            return module.progressPoll;
   ***REMOVED*****REMOVED***
          total: function() {
            return (module.get.total() !== false);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        get: {
          text: function(templateText, index) {
            var
              index_  = index || 0,
              value   = module.get.value(index_),
              total   = module.total || 0,
              percent = (animating)
                ? module.get.displayPercent(index_)
                : module.get.percent(index_),
              left = (module.total > 0)
                ? (total - value)
                : (100 - percent)
            ;
            templateText = templateText || '';
            templateText = templateText
              .replace('{value***REMOVED***', value)
              .replace('{total***REMOVED***', total)
              .replace('{left***REMOVED***', left)
              .replace('{percent***REMOVED***', percent)
              .replace('{bar***REMOVED***', settings.text.bars[index_] || '')
            ;
            module.verbose('Adding variables to progress bar text', templateText);
            return templateText;
   ***REMOVED*****REMOVED***

          normalizedValue: function(value) {
            if(value < 0) {
              module.debug('Value cannot decrement below 0');
              return 0;
          ***REMOVED***
            if(module.has.total()) {
              if(value > module.total) {
                module.debug('Value cannot increment above total', module.total);
                return module.total;
            ***REMOVED***
          ***REMOVED***
            else if(value > 100 ) {
              module.debug('Value cannot increment above 100 percent');
              return 100;
          ***REMOVED***
            return value;
   ***REMOVED*****REMOVED***

          updateInterval: function() {
            if(settings.updateInterval == 'auto') {
              return settings.duration;
          ***REMOVED***
            return settings.updateInterval;
   ***REMOVED*****REMOVED***

          randomValue: function() {
            module.debug('Generating random increment percentage');
            return Math.floor((Math.random()***REMOVED*** settings.random.max) + settings.random.min);
   ***REMOVED*****REMOVED***

          numericValue: function(value) {
            return (typeof value === 'string')
              ? (value.replace(/[^\d.]/g, '') !== '')
                ? +(value.replace(/[^\d.]/g, ''))
                : false
              : value
            ;
   ***REMOVED*****REMOVED***

          transitionEnd: function() {
            var
              element     = document.createElement('element'),
              transitions = {
                'transition'       :'transitionend',
                'OTransition'      :'oTransitionEnd',
                'MozTransition'    :'transitionend',
                'WebkitTransition' :'webkitTransitionEnd'
  ***REMOVED*****REMOVED*****REMOVED***
              transition
            ;
            for(transition in transitions){
              if( element.style[transition] !== undefined ){
                return transitions[transition];
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***

          // gets current displayed percentage (if animating values this is the intermediary value)
          displayPercent: function(index) {
            var
              $bar           = $($bars[index]),
              barWidth       = $bar.width(),
              totalWidth     = $module.width(),
              minDisplay     = parseInt($bar.css('min-width'), 10),
              displayPercent = (barWidth > minDisplay)
                ? (barWidth / totalWidth***REMOVED*** 100)
                : module.percent
            ;
            return (settings.precision > 0)
              ? Math.round(displayPercent***REMOVED*** (10***REMOVED*** settings.precision)) / (10***REMOVED*** settings.precision)
              : Math.round(displayPercent)
              ;
   ***REMOVED*****REMOVED***

          percent: function(index) {
            return module.percent && module.percent[index || 0] || 0;
   ***REMOVED*****REMOVED***
          value: function(index) {
            return module.nextValue || module.value && module.value[index || 0] || 0;
   ***REMOVED*****REMOVED***
          total: function() {
            return module.total || false;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        create: {
          progressPoll: function() {
            module.progressPoll = setTimeout(function() {
              module.update.toNextValue();
              module.remove.progressPoll();
***REMOVED*****REMOVED*****REMOVED*** module.get.updateInterval());
   ***REMOVED*****REMOVED***
 ***REMOVED*****REMOVED***

        is: {
          complete: function() {
            return module.is.success() || module.is.warning() || module.is.error();
   ***REMOVED*****REMOVED***
          success: function() {
            return $module.hasClass(className.success);
   ***REMOVED*****REMOVED***
          warning: function() {
            return $module.hasClass(className.warning);
   ***REMOVED*****REMOVED***
          error: function() {
            return $module.hasClass(className.error);
   ***REMOVED*****REMOVED***
          active: function() {
            return $module.hasClass(className.active);
   ***REMOVED*****REMOVED***
          visible: function() {
            return $module.is(':visible');
        ***REMOVED***
 ***REMOVED*****REMOVED***

        remove: {
          progressPoll: function() {
            module.verbose('Removing progress poll timer');
            if(module.progressPoll) {
              clearTimeout(module.progressPoll);
              delete module.progressPoll;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          nextValue: function() {
            module.verbose('Removing progress value stored for next update');
            delete module.nextValue;
   ***REMOVED*****REMOVED***
          state: function() {
            module.verbose('Removing stored state');
            delete module.total;
            delete module.percent;
            delete module.value;
   ***REMOVED*****REMOVED***
          active: function() {
            module.verbose('Removing active state');
            $module.removeClass(className.active);
   ***REMOVED*****REMOVED***
          success: function() {
            module.verbose('Removing success state');
            $module.removeClass(className.success);
   ***REMOVED*****REMOVED***
          warning: function() {
            module.verbose('Removing warning state');
            $module.removeClass(className.warning);
   ***REMOVED*****REMOVED***
          error: function() {
            module.verbose('Removing error state');
            $module.removeClass(className.error);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        set: {
          barWidth: function(values) {
            module.debug("set bar width with ", values);
            values = module.helper.forceArray(values);
            var firstNonZeroIndex = -1;
            var lastNonZeroIndex = -1;
            var valuesSum = module.helper.sum(values);
            var barCounts = $bars.length;
            var isMultiple = barCounts > 1;
            var percents = values.map(function(value, index) {
              var allZero = (index === barCounts - 1 && valuesSum === 0);
              var $bar = $($bars[index]);
              if (value === 0 && isMultiple && !allZero) {
                $bar.css('display', 'none');
            ***REMOVED*** else {
                if (isMultiple && allZero) {
                  $bar.css('background', 'transparent');
              ***REMOVED***
                if (firstNonZeroIndex == -1) {
                  firstNonZeroIndex = index;
              ***REMOVED***
                lastNonZeroIndex = index;
                $bar.css({
                  display: 'block',
                  width: value + '%'
              ***REMOVED***);
            ***REMOVED***
              return parseFloat(value);
          ***REMOVED***);
            values.forEach(function(_, index) {
              var $bar = $($bars[index]);
              $bar.css({
                borderTopLeftRadius: index == firstNonZeroIndex ? '' : 0,
                borderBottomLeftRadius: index == firstNonZeroIndex ? '' : 0,
                borderTopRightRadius: index == lastNonZeroIndex ? '' : 0,
                borderBottomRightRadius: index == lastNonZeroIndex ? '' : 0
            ***REMOVED***);
          ***REMOVED***);
            $module
              .attr('data-percent', percents)
            ;
   ***REMOVED*****REMOVED***
          duration: function(duration) {
            duration = duration || settings.duration;
            duration = (typeof duration == 'number')
              ? duration + 'ms'
              : duration
            ;
            module.verbose('Setting progress bar transition duration', duration);
            $bars
              .css({
                'transition-duration':  duration
            ***REMOVED***)
            ;
   ***REMOVED*****REMOVED***
          percent: function(percents) {
            percents = module.helper.forceArray(percents).map(function(percent) {
              return (typeof percent == 'string')
                ? +(percent.replace('%', ''))
                : percent
                ;
          ***REMOVED***);
            var hasTotal = module.has.total();
            var totalPecent = module.helper.sum(percents);
            var isMultpleValues = percents.length > 1 && hasTotal;
            var sumTotal = module.helper.sum(module.helper.forceArray(module.value));
            if (isMultpleValues && sumTotal > module.total) {
              // Sum values instead of pecents to avoid precision issues when summing floats
              module.error(error.sumExceedsTotal, sumTotal, module.total);
          ***REMOVED*** else if (!isMultpleValues && totalPecent > 100) {
              // Sum before rouding since sum of rounded may have error though sum of actual is fine
              module.error(error.tooHigh, totalPecent);
          ***REMOVED*** else if (totalPecent < 0) {
              module.error(error.tooLow, totalPecent);
          ***REMOVED*** else {
              var autoPrecision = settings.precision > 0
                ? settings.precision
                : isMultpleValues
                  ? module.helper.derivePrecision(Math.min.apply(null, module.value), module.total)
                  : undefined;

              // round display percentage
              var roundedPercents = percents.map(function (percent) {
                return (autoPrecision > 0)
                  ? Math.round(percent***REMOVED*** (10***REMOVED*** autoPrecision)) / (10***REMOVED*** autoPrecision)
                  : Math.round(percent)
                  ;
            ***REMOVED***);
              module.percent = roundedPercents;
              if (!hasTotal) {
                module.value = roundedPercents.map(function (percent) {
                  return (autoPrecision > 0)
                    ? Math.round((percent / 100)***REMOVED*** module.total***REMOVED*** (10***REMOVED*** autoPrecision)) / (10***REMOVED*** autoPrecision)
                    : Math.round((percent / 100)***REMOVED*** module.total***REMOVED*** 10) / 10
                    ;
              ***REMOVED***);
                if (settings.limitValues) {
                  module.value = module.value.map(function (value) {
                    return (value > 100)
                      ? 100
                      : (module.value < 0)
                        ? 0
                        : module.value;
                ***REMOVED***);
              ***REMOVED***
            ***REMOVED***
              module.set.barWidth(percents);
              module.set.labelInterval();
              module.set.labels();
          ***REMOVED***
            settings.onChange.call(element, percents, module.value, module.total);
   ***REMOVED*****REMOVED***
          labelInterval: function() {
            var
              animationCallback = function() {
                module.verbose('Bar finished animating, removing continuous label updates');
                clearInterval(module.interval);
                animating = false;
                module.set.labels();
            ***REMOVED***
            ;
            clearInterval(module.interval);
            module.bind.transitionEnd(animationCallback);
            animating = true;
            module.interval = setInterval(function() {
              var
                isInDOM = $.contains(document.documentElement, element)
              ;
              if(!isInDOM) {
                clearInterval(module.interval);
                animating = false;
            ***REMOVED***
              module.set.labels();
***REMOVED*****REMOVED*****REMOVED*** settings.framerate);
   ***REMOVED*****REMOVED***
          labels: function() {
            module.verbose('Setting both bar progress and outer label text');
            module.set.barLabel();
            module.set.state();
   ***REMOVED*****REMOVED***
          label: function(text) {
            text = text || '';
            if(text) {
              text = module.get.text(text);
              module.verbose('Setting label to text', text);
              $label.text(text);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          state: function(percent) {
            percent = (percent !== undefined)
              ? percent
              : module.helper.sum(module.percent)
            ;
            if(percent === 100) {
              if(settings.autoSuccess && $bars.length === 1 && !(module.is.warning() || module.is.error() || module.is.success())) {
                module.set.success();
                module.debug('Automatically triggering success at 100%');
            ***REMOVED***
              else {
                module.verbose('Reached 100% removing active state');
                module.remove.active();
                module.remove.progressPoll();
            ***REMOVED***
          ***REMOVED***
            else if(percent > 0) {
              module.verbose('Adjusting active progress bar label', percent);
              module.set.active();
          ***REMOVED***
            else {
              module.remove.active();
              module.set.label(settings.text.active);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          barLabel: function(text) {
            $progresses.map(function(index, element){
              var $progress = $(element);
              if (text !== undefined) {
                $progress.text( module.get.text(text, index) );
            ***REMOVED***
              else if (settings.label == 'ratio' && module.total) {
                module.verbose('Adding ratio to bar label');
                $progress.text( module.get.text(settings.text.ratio, index) );
            ***REMOVED***
              else if (settings.label == 'percent') {
                module.verbose('Adding percentage to bar label');
                $progress.text( module.get.text(settings.text.percent, index) );
            ***REMOVED***
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          active: function(text) {
            text = text || settings.text.active;
            module.debug('Setting active state');
            if(settings.showActivity && !module.is.active() ) {
              $module.addClass(className.active);
          ***REMOVED***
            module.remove.warning();
            module.remove.error();
            module.remove.success();
            text = settings.onLabelUpdate('active', text, module.value, module.total);
            if(text) {
              module.set.label(text);
          ***REMOVED***
            module.bind.transitionEnd(function() {
              settings.onActive.call(element, module.value, module.total);
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          success : function(text, keepState) {
            text = text || settings.text.success || settings.text.active;
            module.debug('Setting success state');
            $module.addClass(className.success);
            module.remove.active();
            module.remove.warning();
            module.remove.error();
            module.complete(keepState);
            if(settings.text.success) {
              text = settings.onLabelUpdate('success', text, module.value, module.total);
              module.set.label(text);
          ***REMOVED***
            else {
              text = settings.onLabelUpdate('active', text, module.value, module.total);
              module.set.label(text);
          ***REMOVED***
            module.bind.transitionEnd(function() {
              settings.onSuccess.call(element, module.total);
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          warning : function(text, keepState) {
            text = text || settings.text.warning;
            module.debug('Setting warning state');
            $module.addClass(className.warning);
            module.remove.active();
            module.remove.success();
            module.remove.error();
            module.complete(keepState);
            text = settings.onLabelUpdate('warning', text, module.value, module.total);
            if(text) {
              module.set.label(text);
          ***REMOVED***
            module.bind.transitionEnd(function() {
              settings.onWarning.call(element, module.value, module.total);
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          error : function(text, keepState) {
            text = text || settings.text.error;
            module.debug('Setting error state');
            $module.addClass(className.error);
            module.remove.active();
            module.remove.success();
            module.remove.warning();
            module.complete(keepState);
            text = settings.onLabelUpdate('error', text, module.value, module.total);
            if(text) {
              module.set.label(text);
          ***REMOVED***
            module.bind.transitionEnd(function() {
              settings.onError.call(element, module.value, module.total);
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          transitionEvent: function() {
            transitionEnd = module.get.transitionEnd();
   ***REMOVED*****REMOVED***
          total: function(totalValue) {
            module.total = totalValue;
   ***REMOVED*****REMOVED***
          value: function(value) {
            module.value = module.helper.forceArray(value);
   ***REMOVED*****REMOVED***
          progress: function(value) {
            if(!module.has.progressPoll()) {
              module.debug('First update in progress update interval, immediately updating', value);
              module.update.progress(value);
              module.create.progressPoll();
          ***REMOVED***
            else {
              module.debug('Updated within interval, setting next update to use new value', value);
              module.set.nextValue(value);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          nextValue: function(value) {
            module.nextValue = value;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        update: {
          toNextValue: function() {
            var
              nextValue = module.nextValue
            ;
            if(nextValue) {
              module.debug('Update interval complete using last updated value', nextValue);
              module.update.progress(nextValue);
              module.remove.nextValue();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          progress: function(values) {
            var hasTotal = module.has.total();
            if (hasTotal) {
              module.set.value(values);
          ***REMOVED***
            var percentCompletes = module.helper.forceArray(values).map(function(value) {
              var
                percentComplete
              ;
              value = module.get.numericValue(value);
              if (value === false) {
                module.error(error.nonNumeric, value);
            ***REMOVED***
              value = module.get.normalizedValue(value);
              if (hasTotal) {
                percentComplete = (value / module.total)***REMOVED*** 100;
                module.debug('Calculating percent complete from total', percentComplete);
            ***REMOVED***
              else {
                percentComplete = value;
                module.debug('Setting value to exact percentage value', percentComplete);
            ***REMOVED***
              return percentComplete;
          ***REMOVED***);
            module.set.percent( percentCompletes );
        ***REMOVED***
 ***REMOVED*****REMOVED***

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            if($.isPlainObject(settings[name])) {
              $.extend(true, settings[name], value);
          ***REMOVED***
            else {
              settings[name] = value;
          ***REMOVED***
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                module.error(error.method, query);
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***
          if(Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***;

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
      ***REMOVED***
        module.invoke(query);
    ***REMOVED***
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
      ***REMOVED***
        module.initialize();
    ***REMOVED***
  ***REMOVED***)
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
***REMOVED***;

$.fn.progress.settings = {

  name         : 'Progress',
  namespace    : 'progress',

  silent       : false,
  debug        : false,
  verbose      : false,
  performance  : true,

  random       : {
    min : 2,
    max : 5
***REMOVED***

  duration       : 300,

  updateInterval : 'auto',

  autoSuccess    : true,
  showActivity   : true,
  limitValues    : true,

  label          : 'percent',
  precision      : 0,
  framerate      : (1000 / 30), /// 30 fps

  percent        : false,
  total          : false,
  value          : false,

  // delay in ms for fail safe animation callback
  failSafeDelay : 100,

  onLabelUpdate : function(state, text, value, total){
    return text;
***REMOVED***
  onChange      : function(percent, value, total){***REMOVED***,
  onSuccess     : function(total){***REMOVED***,
  onActive      : function(value, total){***REMOVED***,
  onError       : function(value, total){***REMOVED***,
  onWarning     : function(value, total){***REMOVED***,

  error    : {
    method          : 'The method you called is not defined.',
    nonNumeric      : 'Progress value is non numeric',
    tooHigh         : 'Value specified is above 100%',
    tooLow          : 'Value specified is below 0%',
    sumExceedsTotal : 'Sum of multple values exceed total',
***REMOVED***

  regExp: {
    variable: /\{\$*[A-z0-9]+\***REMOVED***/g
***REMOVED***

  metadata: {
    percent : 'percent',
    total   : 'total',
    value   : 'value'
***REMOVED***

  selector : {
    bar      : '> .bar',
    label    : '> .label',
    progress : '.bar > .progress'
***REMOVED***

  text : {
    active  : false,
    error   : false,
    success : false,
    warning : false,
    percent : '{percent***REMOVED***%',
    ratio   : '{value***REMOVED*** of {total***REMOVED***',
    bars    : ['']
***REMOVED***

  className : {
    active  : 'active',
    error   : 'error',
    success : 'success',
    warning : 'warning'
***REMOVED***

***REMOVED***;


***REMOVED***)( jQuery, window, document );

/*!
***REMOVED*** # Fomantic-UI - Slider
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ( $, window, document, undefined ) {

"use strict";

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.slider = function(parameters) {

  var
    $allModules    = $(this),
    $window        = $(window),

    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),

    alphabet       = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],

    SINGLE_STEP     = 1,
    BIG_STEP        = 2,
    NO_STEP         = 0,
    SINGLE_BACKSTEP = -1,
    BIG_BACKSTEP    = -2,

    // Used to manage document bound events.
    // Use this so that we can distinguish between which document events are bound to which range.
    currentRange    = 0,

    returnedValue
  ;

  $allModules
    .each(function() {

      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {***REMOVED***, $.fn.slider.settings, parameters)
          : $.extend({***REMOVED***, $.fn.slider.settings),

        className       = settings.className,
        metadata        = settings.metadata,
        namespace       = settings.namespace,
        error           = settings.error,
        keys            = settings.keys,
        interpretLabel  = settings.interpretLabel,

        isHover         = false,
        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $currThumb,
        $thumb,
        $secondThumb,
        $track,
        $trackFill,
        $labels,

        element         = this,
        instance        = $module.data(moduleNamespace),

        documentEventID,

        value,
        position,
        secondPos,
        offset,
        precision,
        isTouch,
        gapRatio = 1,

        initialPosition,
        initialLoad,
        module
      ;

      module = {

        initialize: function() {
          module.debug('Initializing slider', settings);
          initialLoad = true;

          currentRange += 1;
          documentEventID = currentRange;

          isTouch = module.setup.testOutTouch();
          module.setup.layout();
          module.setup.labels();

          if(!module.is.disabled()) {
            module.bind.events();
        ***REMOVED***

          module.read.metadata();
          module.read.settings();

          initialLoad = false;
          module.instantiate();
 ***REMOVED*****REMOVED***

        instantiate: function() {
          module.verbose('Storing instance of slider', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
 ***REMOVED*****REMOVED***

        destroy: function() {
          module.verbose('Destroying previous slider for', $module);
          clearInterval(instance.interval);
          module.unbind.events();
          module.unbind.slidingEvents();
          $module.removeData(moduleNamespace);
          instance = undefined;
 ***REMOVED*****REMOVED***

        setup: {
          layout: function() {
            if( $module.attr('tabindex') === undefined) {
              $module.attr('tabindex', 0);
          ***REMOVED***
            if($module.find('.inner').length == 0) {
              $module.append("<div class='inner'>"
                             + "<div class='track'></div>"
                             + "<div class='track-fill'></div>"
                             + "<div class='thumb'></div>"
                             + "</div>");
          ***REMOVED***
            precision = module.get.precision();
            $thumb = $module.find('.thumb:not(.second)');
            $currThumb = $thumb;
            if(module.is.range()) {
              if($module.find('.thumb.second').length == 0) {
                $module.find('.inner').append("<div class='thumb second'></div>");
            ***REMOVED***
              $secondThumb = $module.find('.thumb.second');
          ***REMOVED***
            $track = $module.find('.track');
            $trackFill = $module.find('.track-fill');
            offset = $thumb.width() / 2;
   ***REMOVED*****REMOVED***
          labels: function() {
            if(module.is.labeled()) {
              $labels = $module.find('.labels:not(.auto)');
              if($labels.length != 0) {
                module.setup.customLabel();
            ***REMOVED*** else {
                module.setup.autoLabel();
            ***REMOVED***

              if (settings.showLabelTicks) {
                $module.addClass(className.ticked)
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***
          testOutTouch: function() {
            try {
             document.createEvent('TouchEvent');
             return true;
          ***REMOVED*** catch (e) {
             return false;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          customLabel: function() {
            var
              $children   = $labels.find('.label'),
              numChildren = $children.length,
              min         = module.get.min(),
              max         = module.get.max(),
              ratio
            ;
            $children.each(function(index) {
              var
                $child = $(this),
                attrValue = $child.attr('data-value')
              ;
              if(attrValue) {
                attrValue = attrValue > max ? max : attrValue < min ? min : attrValue;
                ratio = (attrValue - min) / (max - min);
            ***REMOVED*** else {
                ratio = (index + 1) / (numChildren + 1);
            ***REMOVED***
              module.update.labelPosition(ratio, $(this));
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          autoLabel: function() {
            if(module.get.step() != 0) {
              $labels = $module.find('.labels');
              if($labels.length != 0) {
                $labels.empty();
            ***REMOVED***
              else {
                $labels = $module.append('<ul class="auto labels"></ul>').find('.labels');
            ***REMOVED***
              for(var i = 0, len = module.get.numLabels(); i <= len; i++) {
                var
                  labelText = module.get.label(i),
                  $label = (labelText !== "") 
                    ? !(i % module.get.gapRatio())
                      ? $('<li class="label">' + labelText + '</li>') 
                      : $('<li class="halftick label"></li>')
                    : null,
                  ratio  = i / len
                ;
                if($label) {
                  module.update.labelPosition(ratio, $label);
                  $labels.append($label);
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        bind: {
          events: function() {
            module.bind.globalKeyboardEvents();
            module.bind.keyboardEvents();
            module.bind.mouseEvents();
            if(module.is.touch()) {
              module.bind.touchEvents();
          ***REMOVED***
            if (settings.autoAdjustLabels) {
              module.bind.windowEvents();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          keyboardEvents: function() {
            module.verbose('Binding keyboard events');
            $module.on('keydown' + eventNamespace, module.event.keydown);
   ***REMOVED*****REMOVED***
          globalKeyboardEvents: function() {
            $(document).on('keydown' + eventNamespace + documentEventID, module.event.activateFocus);
   ***REMOVED*****REMOVED***
          mouseEvents: function() {
            module.verbose('Binding mouse events');
            $module.find('.track, .thumb, .inner').on('mousedown' + eventNamespace, function(event) {
              event.stopImmediatePropagation();
              event.preventDefault();
              module.event.down(event);
          ***REMOVED***);
            $module.on('mousedown' + eventNamespace, module.event.down);
            $module.on('mouseenter' + eventNamespace, function(event) {
              isHover = true;
          ***REMOVED***);
            $module.on('mouseleave' + eventNamespace, function(event) {
              isHover = false;
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          touchEvents: function() {
            module.verbose('Binding touch events');
            $module.find('.track, .thumb, .inner').on('touchstart' + eventNamespace, function(event) {
              event.stopImmediatePropagation();
              event.preventDefault();
              module.event.down(event);
          ***REMOVED***);
            $module.on('touchstart' + eventNamespace, module.event.down);
   ***REMOVED*****REMOVED***
          slidingEvents: function() {
            // these don't need the identifier because we only ever want one of them to be registered with document
            module.verbose('Binding page wide events while handle is being draged');
            if(module.is.touch()) {
              $(document).on('touchmove' + eventNamespace, module.event.move);
              $(document).on('touchend' + eventNamespace, module.event.up);
          ***REMOVED***
            else {
              $(document).on('mousemove' + eventNamespace, module.event.move);
              $(document).on('mouseup' + eventNamespace, module.event.up);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          windowEvents: function() {
            $window.on('resize' + eventNamespace, module.event.resize);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        unbind: {
          events: function() {
            $module.find('.track, .thumb, .inner').off('mousedown' + eventNamespace);
            $module.find('.track, .thumb, .inner').off('touchstart' + eventNamespace);
            $module.off('mousedown' + eventNamespace);
            $module.off('mouseenter' + eventNamespace);
            $module.off('mouseleave' + eventNamespace);
            $module.off('touchstart' + eventNamespace);
            $module.off('keydown' + eventNamespace);
            $module.off('focusout' + eventNamespace);
            $(document).off('keydown' + eventNamespace + documentEventID, module.event.activateFocus);
            $window.off('resize' + eventNamespace);
   ***REMOVED*****REMOVED***
          slidingEvents: function() {
            if(module.is.touch()) {
              $(document).off('touchmove' + eventNamespace);
              $(document).off('touchend' + eventNamespace);
          ***REMOVED*** else {
              $(document).off('mousemove' + eventNamespace);
              $(document).off('mouseup' + eventNamespace);
          ***REMOVED***
   ***REMOVED*****REMOVED***
 ***REMOVED*****REMOVED***

        event: {
          down: function(event) {
            event.preventDefault();
            if(module.is.range()) {
              var
                eventPos = module.determine.eventPos(event),
                newPos = module.determine.pos(eventPos)
              ;
              // Special handling if range mode and both thumbs have the same value
              if(settings.preventCrossover && module.is.range() && module.thumbVal === module.secondThumbVal) {
                initialPosition = newPos;
                $currThumb = undefined;
            ***REMOVED*** else {
                $currThumb = module.determine.closestThumb(newPos);
            ***REMOVED***
          ***REMOVED***
            if(!module.is.disabled()) {
              module.bind.slidingEvents();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          move: function(event) {
            event.preventDefault();
            var value = module.determine.valueFromEvent(event);
            if($currThumb === undefined) {
              var
                eventPos = module.determine.eventPos(event),
                newPos = module.determine.pos(eventPos)
              ;
              $currThumb = initialPosition > newPos ? $thumb : $secondThumb;
          ***REMOVED***
            if(module.get.step() == 0 || module.is.smooth()) {
              var
                thumbVal = module.thumbVal,
                secondThumbVal = module.secondThumbVal,
                thumbSmoothVal = module.determine.smoothValueFromEvent(event)
              ;
              if(!$currThumb.hasClass('second')) {
                if(settings.preventCrossover && module.is.range()) {
                  value = Math.min(secondThumbVal, value);
                  thumbSmoothVal = Math.min(secondThumbVal, thumbSmoothVal);
              ***REMOVED***
                thumbVal = value;
            ***REMOVED*** else {
                if(settings.preventCrossover && module.is.range()) {
                  value = Math.max(thumbVal, value);
                  thumbSmoothVal = Math.max(thumbVal, thumbSmoothVal);
              ***REMOVED***
                secondThumbVal = value;
            ***REMOVED***
              value = Math.abs(thumbVal - (secondThumbVal || 0));
              module.update.position(thumbSmoothVal);
              settings.onMove.call(element, value, thumbVal, secondThumbVal);
          ***REMOVED*** else {
              module.update.value(value, function(value, thumbVal, secondThumbVal) {
                settings.onMove.call(element, value, thumbVal, secondThumbVal);
            ***REMOVED***);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          up: function(event) {
            event.preventDefault();
            var value = module.determine.valueFromEvent(event);
            module.set.value(value);
            module.unbind.slidingEvents();
   ***REMOVED*****REMOVED***
          keydown: function(event, first) {
            if(settings.preventCrossover && module.is.range() && module.thumbVal === module.secondThumbVal) {
              $currThumb = undefined;
          ***REMOVED***
            if(module.is.focused()) {
              $(document).trigger(event);
          ***REMOVED***
            if(first || module.is.focused()) {
              var step = module.determine.keyMovement(event);
              if(step != NO_STEP) {
                event.preventDefault();
                switch(step) {
                  case SINGLE_STEP:
                    module.takeStep();
                    break;
                  case BIG_STEP:
                    module.takeStep(module.get.multiplier());
                    break;
                  case SINGLE_BACKSTEP:
                    module.backStep();
                    break;
                  case BIG_BACKSTEP:
                    module.backStep(module.get.multiplier());
                    break;
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***
          activateFocus: function(event) {
            if(!module.is.focused() && module.is.hover() && module.determine.keyMovement(event) != NO_STEP) {
              event.preventDefault();
              module.event.keydown(event, true);
              $module.focus();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          resize: function(_event) {
            // To avoid a useless performance cost, we only call the label refresh when its necessary
            if (gapRatio != module.get.gapRatio()) {
              module.setup.labels();
              gapRatio = module.get.gapRatio();
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        resync: function() {
          module.verbose('Resyncing thumb position based on value');
          if(module.is.range()) {
            module.update.position(module.secondThumbVal, $secondThumb);
        ***REMOVED***
          module.update.position(module.thumbVal, $thumb);
          module.setup.labels();
 ***REMOVED*****REMOVED***
        takeStep: function(multiplier) {
          var
            multiplier = multiplier != undefined ? multiplier : 1,
            step = module.get.step(),
            currValue = module.get.currentThumbValue()
          ;
          module.verbose('Taking a step');
          if(step > 0) {
            module.set.value(currValue + step***REMOVED*** multiplier);
        ***REMOVED*** else if (step == 0){
            var
              precision = module.get.precision(),
              newValue = currValue + (multiplier/precision)
            ;
            module.set.value(Math.round(newValue***REMOVED*** precision) / precision);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        backStep: function(multiplier) {
          var
            multiplier = multiplier != undefined ? multiplier : 1,
            step = module.get.step(),
            currValue = module.get.currentThumbValue()
          ;
          module.verbose('Going back a step');
          if(step > 0) {
            module.set.value(currValue - step***REMOVED*** multiplier);
        ***REMOVED*** else if (step == 0) {
            var
              precision = module.get.precision(),
              newValue = currValue - (multiplier/precision)
            ;
            module.set.value(Math.round(newValue***REMOVED*** precision) / precision);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        is: {
          range: function() {
            return $module.hasClass(settings.className.range);
   ***REMOVED*****REMOVED***
          hover: function() {
            return isHover;
   ***REMOVED*****REMOVED***
          focused: function() {
            return $module.is(':focus');
   ***REMOVED*****REMOVED***
          disabled: function() {
            return $module.hasClass(settings.className.disabled);
   ***REMOVED*****REMOVED***
          labeled: function() {
            return $module.hasClass(settings.className.labeled);
   ***REMOVED*****REMOVED***
          reversed: function() {
            return $module.hasClass(settings.className.reversed);
   ***REMOVED*****REMOVED***
          vertical: function() {
            return $module.hasClass(settings.className.vertical);
   ***REMOVED*****REMOVED***
          smooth: function() {
            return settings.smooth || $module.hasClass(settings.className.smooth);
   ***REMOVED*****REMOVED***
          touch: function() {
            return isTouch;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        get: {
          trackOffset: function() {
            if (module.is.vertical()) {
              return $track.offset().top;
          ***REMOVED*** else {
              return $track.offset().left;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          trackLength: function() {
            if (module.is.vertical()) {
              return $track.height();
          ***REMOVED*** else {
              return $track.width();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          trackLeft: function() {
            if (module.is.vertical()) {
              return $track.position().top;
          ***REMOVED*** else {
              return $track.position().left;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          trackStartPos: function() {
            return module.is.reversed() ? module.get.trackLeft() + module.get.trackLength() : module.get.trackLeft();
   ***REMOVED*****REMOVED***
          trackEndPos: function() {
            return module.is.reversed() ? module.get.trackLeft() : module.get.trackLeft() + module.get.trackLength();
   ***REMOVED*****REMOVED***
          trackStartMargin: function () {
            var margin;
            if (module.is.vertical()) {
              margin = module.is.reversed() ? $module.css('padding-bottom') : $module.css('padding-top');
          ***REMOVED*** else {
              margin = module.is.reversed() ? $module.css('padding-right') : $module.css('padding-left');
          ***REMOVED***
            return margin || '0px';
   ***REMOVED*****REMOVED***
          trackEndMargin: function () {
            var margin;
            if (module.is.vertical()) {
              margin = module.is.reversed() ? $module.css('padding-top') : $module.css('padding-bottom');
          ***REMOVED*** else {
              margin = module.is.reversed() ? $module.css('padding-left') : $module.css('padding-right');
          ***REMOVED***
            return margin || '0px';
   ***REMOVED*****REMOVED***
          precision: function() {
            var
              decimalPlaces,
              step = module.get.step()
            ;
            if(step != 0) {
              var split = String(step).split('.');
              if(split.length == 2) {
                decimalPlaces = split[1].length;
            ***REMOVED*** else {
                decimalPlaces = 0;
            ***REMOVED***
          ***REMOVED*** else {
              decimalPlaces = settings.decimalPlaces;
          ***REMOVED***
            var precision = Math.pow(10, decimalPlaces);
            module.debug('Precision determined', precision);
            return precision;
   ***REMOVED*****REMOVED***
          min: function() {
            return settings.min;
   ***REMOVED*****REMOVED***
          max: function() {
            var step = module.get.step(),
                min = module.get.min(),
                quotient = step === 0 ? 0 : Math.floor((settings.max - min) / step),
                remainder = step === 0 ? 0 : (settings.max - min) % step;
            return remainder === 0 ? settings.max : min + quotient***REMOVED*** step;
   ***REMOVED*****REMOVED***
          step: function() {
            return settings.step;
   ***REMOVED*****REMOVED***
          numLabels: function() {
            var value = Math.round((module.get.max() - module.get.min()) / module.get.step());
            module.debug('Determined that there should be ' + value + ' labels');
            return value;
   ***REMOVED*****REMOVED***
          labelType: function() {
            return settings.labelType;
   ***REMOVED*****REMOVED***
          label: function(value) {
            if(interpretLabel) {
              return interpretLabel(value);
          ***REMOVED***

            switch (settings.labelType) {
              case settings.labelTypes.number:
                return Math.round(((value***REMOVED*** module.get.step()) + module.get.min())***REMOVED*** precision ) / precision;
              case settings.labelTypes.letter:
                return alphabet[(value) % 26];
              default:
                return value;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          value: function() {
            return value;
   ***REMOVED*****REMOVED***
          currentThumbValue: function() {
            return $currThumb !== undefined && $currThumb.hasClass('second') ? module.secondThumbVal : module.thumbVal;
   ***REMOVED*****REMOVED***
          thumbValue: function(which) {
            switch(which) {
              case 'second':
                if(module.is.range()) {
                  return module.secondThumbVal;
              ***REMOVED***
                else {
                  module.error(error.notrange);
                  break;
              ***REMOVED***
              case 'first':
              default:
                return module.thumbVal;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          multiplier: function() {
            return settings.pageMultiplier;
   ***REMOVED*****REMOVED***
          thumbPosition: function(which) {
            switch(which) {
              case 'second':
                if(module.is.range()) {
                  return secondPos;
              ***REMOVED***
                else {
                  module.error(error.notrange);
                  break;
              ***REMOVED***
              case 'first':
              default:
                return position;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          gapRatio: function() {
            var gapRatio = 1;
            
            if( settings.autoAdjustLabels ) {
              var 
                numLabels = module.get.numLabels(),
                trackLength = module.get.trackLength(),
                gapCounter = 1
              ;

              // While the distance between two labels is too short,
              // we divide the number of labels at each iteration
              // and apply only if the modulo of the operation is an odd number.
              if(trackLength>0){
                while ((trackLength / numLabels)***REMOVED*** gapCounter < settings.labelDistance) {
                  if( !(numLabels % gapCounter) ) {
                    gapRatio = gapCounter;
                ***REMOVED***
                  gapCounter += 1;
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
            return gapRatio;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        determine: {
          pos: function(pagePos) {
            return module.is.reversed()
              ?
              module.get.trackStartPos() - pagePos + module.get.trackOffset()
              :
              pagePos - module.get.trackOffset() - module.get.trackStartPos()
            ;
   ***REMOVED*****REMOVED***
          closestThumb: function(eventPos) {
            var
              thumbPos = parseFloat(module.determine.thumbPos($thumb)),
              thumbDelta = Math.abs(eventPos - thumbPos),
              secondThumbPos = parseFloat(module.determine.thumbPos($secondThumb)),
              secondThumbDelta = Math.abs(eventPos - secondThumbPos)
            ;
            if(thumbDelta === secondThumbDelta && module.get.thumbValue() === module.get.min()) {
              return $secondThumb;
          ***REMOVED***
            return thumbDelta <= secondThumbDelta ? $thumb : $secondThumb;
   ***REMOVED*****REMOVED***
          closestThumbPos: function(eventPos) {
            var
              thumbPos = parseFloat(module.determine.thumbPos($thumb)),
              thumbDelta = Math.abs(eventPos - thumbPos),
              secondThumbPos = parseFloat(module.determine.thumbPos($secondThumb)),
              secondThumbDelta = Math.abs(eventPos - secondThumbPos)
            ;
            return thumbDelta <= secondThumbDelta ? thumbPos : secondThumbPos;
   ***REMOVED*****REMOVED***
          thumbPos: function($element) {
            var pos =
              module.is.vertical()
              ?
              module.is.reversed() ? $element.css('bottom') : $element.css('top')
              :
              module.is.reversed() ? $element.css('right') : $element.css('left')
            ;
            return pos;
   ***REMOVED*****REMOVED***
          positionFromValue: function(value) {
            var
              min = module.get.min(),
              max = module.get.max(),
              value = value > max ? max : value < min ? min : value,
              trackLength = module.get.trackLength(),
              ratio = (value - min) / (max - min),
              position = Math.round(ratio***REMOVED*** trackLength)
            ;
            module.verbose('Determined position: ' + position + ' from value: ' + value);
            return position;
   ***REMOVED*****REMOVED***
          positionFromRatio: function(ratio) {
            var
              trackLength = module.get.trackLength(),
              step = module.get.step(),
              position = Math.round(ratio***REMOVED*** trackLength),
              adjustedPos = (step == 0) ? position : Math.round(position / step)***REMOVED*** step
            ;
            return adjustedPos;
   ***REMOVED*****REMOVED***
          valueFromEvent: function(event) {
            var
              eventPos = module.determine.eventPos(event),
              newPos = module.determine.pos(eventPos),
              value
            ;
            if(eventPos < module.get.trackOffset()) {
              value = module.is.reversed() ? module.get.max() : module.get.min();
          ***REMOVED*** else if(eventPos > module.get.trackOffset() + module.get.trackLength()) {
              value = module.is.reversed() ? module.get.min() : module.get.max();
          ***REMOVED*** else {
              value = module.determine.value(newPos);
          ***REMOVED***
            return value;
   ***REMOVED*****REMOVED***
          smoothValueFromEvent: function(event) {
            var
              min = module.get.min(),
              max = module.get.max(),
              trackLength = module.get.trackLength(),
              eventPos = module.determine.eventPos(event),
              newPos = eventPos - module.get.trackOffset(),
              ratio,
              value
            ;
            newPos = newPos < 0 ? 0 : newPos > trackLength ? trackLength : newPos;
            ratio = newPos / trackLength;
            if (module.is.reversed()) {
              ratio = 1 - ratio;
          ***REMOVED***
            value = ratio***REMOVED*** (max - min) + min;
            return value;
   ***REMOVED*****REMOVED***
          eventPos: function(event) {
            if(module.is.touch()) {
              var
                touchEvent = event.changedTouches ? event : event.originalEvent,
                touches = touchEvent.changedTouches[0] ? touchEvent.changedTouches : touchEvent.touches,
                touchY = touches[0].pageY,
                touchX = touches[0].pageX
              ;
              return module.is.vertical() ? touchY : touchX;
          ***REMOVED***
            var
              clickY = event.pageY || event.originalEvent.pageY,
              clickX = event.pageX || event.originalEvent.pageX
            ;
            return module.is.vertical() ? clickY : clickX;
   ***REMOVED*****REMOVED***
          value: function(position) {
            var
              startPos = module.is.reversed() ? module.get.trackEndPos() : module.get.trackStartPos(),
              endPos = module.is.reversed() ? module.get.trackStartPos() : module.get.trackEndPos(),
              ratio = (position - startPos) / (endPos - startPos),
              range = module.get.max() - module.get.min(),
              step = module.get.step(),
              value = (ratio***REMOVED*** range),
              difference = (step == 0) ? value : Math.round(value / step)***REMOVED*** step
            ;
            module.verbose('Determined value based upon position: ' + position + ' as: ' + value);
            if(value != difference) {
              module.verbose('Rounding value to closest step: ' + difference);
          ***REMOVED***
            // Use precision to avoid ugly Javascript floating point rounding issues
            // (like 35***REMOVED*** .01 = 0.35000000000000003)
            difference = Math.round(difference***REMOVED*** precision) / precision;
            module.verbose('Cutting off additional decimal places');
            return difference + module.get.min();
   ***REMOVED*****REMOVED***
          keyMovement: function(event) {
            var
              key = event.which,
              downArrow =
                module.is.vertical()
                ?
                module.is.reversed() ? keys.downArrow : keys.upArrow
                :
                keys.downArrow
              ,
              upArrow =
                module.is.vertical()
                ?
                module.is.reversed() ? keys.upArrow : keys.downArrow
                :
                keys.upArrow
              ,
              leftArrow =
                !module.is.vertical()
                ?
                module.is.reversed() ? keys.rightArrow : keys.leftArrow
                :
                keys.leftArrow
              ,
              rightArrow =
                !module.is.vertical()
                ?
                module.is.reversed() ? keys.leftArrow : keys.rightArrow
                :
                keys.rightArrow
            ;
            if(key == downArrow || key == leftArrow) {
              return SINGLE_BACKSTEP;
          ***REMOVED*** else if(key == upArrow || key == rightArrow) {
              return SINGLE_STEP;
          ***REMOVED*** else if (key == keys.pageDown) {
              return BIG_BACKSTEP;
          ***REMOVED*** else if (key == keys.pageUp) {
              return BIG_STEP;
          ***REMOVED*** else {
              return NO_STEP;
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        handleNewValuePosition: function(val) {
          var
            min = module.get.min(),
            max = module.get.max(),
            newPos
          ;
          if (val <= min) {
            val = min;
        ***REMOVED*** else if (val >= max) {
            val = max;
        ***REMOVED***
          newPos = module.determine.positionFromValue(val);
          return newPos;
 ***REMOVED*****REMOVED***

        set: {
          value: function(newValue) {
            module.update.value(newValue, function(value, thumbVal, secondThumbVal) {
              if (!initialLoad || settings.fireOnInit){
                settings.onChange.call(element, value, thumbVal, secondThumbVal);
                settings.onMove.call(element, value, thumbVal, secondThumbVal);
            ***REMOVED***
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          rangeValue: function(first, second) {
            if(module.is.range()) {
              var
                min = module.get.min(),
                max = module.get.max()
              ;
              if (first <= min) {
                first = min;
            ***REMOVED*** else if(first >= max){
                first = max;
            ***REMOVED***
              if (second <= min) {
                second = min;
            ***REMOVED*** else if(second >= max){
                second = max;
            ***REMOVED***
              module.thumbVal = first;
              module.secondThumbVal = second;
              value = Math.abs(module.thumbVal - module.secondThumbVal);
              module.update.position(module.thumbVal, $thumb);
              module.update.position(module.secondThumbVal, $secondThumb);
              if (!initialLoad || settings.fireOnInit) {
                settings.onChange.call(element, value, module.thumbVal, module.secondThumbVal);
                settings.onMove.call(element, value, module.thumbVal, module.secondThumbVal);
            ***REMOVED***
          ***REMOVED*** else {
              module.error(error.notrange);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          position: function(position, which) {
            var thumbVal = module.determine.value(position);
            switch (which) {
              case 'second':
                module.secondThumbVal = thumbVal;
                module.update.position(thumbVal, $secondThumb);
                break;
              default:
                module.thumbVal = thumbVal;
                module.update.position(thumbVal, $thumb);
          ***REMOVED***
            value = Math.abs(module.thumbVal - (module.secondThumbVal || 0));
            module.set.value(value);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        update: {
          value: function(newValue, callback) {
            var
              min = module.get.min(),
              max = module.get.max()
            ;
            if (newValue <= min) {
              newValue = min;
          ***REMOVED*** else if(newValue >= max){
              newValue = max;
          ***REMOVED***
            if(!module.is.range()) {
              value = newValue;
              module.thumbVal = value;
          ***REMOVED*** else {
              if($currThumb === undefined) {
                $currThumb = newValue <= module.get.currentThumbValue() ? $thumb : $secondThumb;
            ***REMOVED***
              if(!$currThumb.hasClass('second')) {
                if(settings.preventCrossover && module.is.range()) {
                  newValue = Math.min(module.secondThumbVal, newValue);
              ***REMOVED***
                module.thumbVal = newValue;
            ***REMOVED*** else {
                if(settings.preventCrossover && module.is.range()) {
                  newValue = Math.max(module.thumbVal, newValue);
              ***REMOVED***
                module.secondThumbVal = newValue;
            ***REMOVED***
              value = Math.abs(module.thumbVal - module.secondThumbVal);
          ***REMOVED***
            module.update.position(newValue);
            module.debug('Setting slider value to ' + value);
            if(typeof callback === 'function') {
              callback(value, module.thumbVal, module.secondThumbVal);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          position: function(newValue, $element) {
            var
              newPos = module.handleNewValuePosition(newValue),
              $targetThumb = $element != undefined ? $element : $currThumb,
              thumbVal = module.thumbVal || module.get.min(),
              secondThumbVal = module.secondThumbVal || module.get.min()
            ;
            if(module.is.range()) {
              if(!$targetThumb.hasClass('second')) {
                position = newPos;
                thumbVal = newValue;
            ***REMOVED*** else {
                secondPos = newPos;
                secondThumbVal = newValue;
            ***REMOVED***
          ***REMOVED*** else {
              position = newPos;
              thumbVal = newValue;
          ***REMOVED***
            var
              trackPosValue,
              thumbPosValue,
              min = module.get.min(),
              max = module.get.max(),
              thumbPosPercent = 100***REMOVED*** (newValue - min) / (max - min),
              trackStartPosPercent = 100***REMOVED*** (Math.min(thumbVal, secondThumbVal) - min) / (max - min),
              trackEndPosPercent = 100***REMOVED*** (1 - (Math.max(thumbVal, secondThumbVal) - min) / (max - min))
            ;
            if (module.is.vertical()) {
              if (module.is.reversed()) {
                thumbPosValue = {bottom: 'calc(' + thumbPosPercent + '% - ' + offset + 'px)', top: 'auto'***REMOVED***;
                trackPosValue = {bottom: trackStartPosPercent + '%', top: trackEndPosPercent + '%'***REMOVED***;
            ***REMOVED***
              else {
                thumbPosValue = {top: 'calc(' + thumbPosPercent + '% - ' + offset + 'px)', bottom: 'auto'***REMOVED***;
                trackPosValue = {top: trackStartPosPercent + '%', bottom: trackEndPosPercent + '%'***REMOVED***;
            ***REMOVED***
          ***REMOVED*** else {
              if (module.is.reversed()) {
                thumbPosValue = {right: 'calc(' + thumbPosPercent + '% - ' + offset + 'px)', left: 'auto'***REMOVED***;
                trackPosValue = {right: trackStartPosPercent + '%', left: trackEndPosPercent + '%'***REMOVED***;
            ***REMOVED***
              else {
                thumbPosValue = {left: 'calc(' + thumbPosPercent + '% - ' + offset + 'px)', right: 'auto'***REMOVED***;
                trackPosValue = {left: trackStartPosPercent + '%', right: trackEndPosPercent + '%'***REMOVED***;
            ***REMOVED***
          ***REMOVED***
            $targetThumb.css(thumbPosValue);
            $trackFill.css(trackPosValue);
            module.debug('Setting slider position to ' + newPos);
   ***REMOVED*****REMOVED***
          labelPosition: function (ratio, $label) {
            var
              startMargin = module.get.trackStartMargin(),
              endMargin   = module.get.trackEndMargin(),
              posDir =
                module.is.vertical()
                ?
                module.is.reversed() ? 'bottom' : 'top'
                :
                  module.is.reversed() ? 'right' : 'left',
              startMarginMod = module.is.reversed() && !module.is.vertical() ? ' - ' : ' + '
            ;
            var position = '(100% - ' + startMargin + ' - ' + endMargin + ')***REMOVED*** ' + ratio;
            $label.css(posDir, 'calc(' + position + startMarginMod + startMargin + ')');
        ***REMOVED***
 ***REMOVED*****REMOVED***

        goto: {
          max: function() {
            module.set.value(module.get.max());
   ***REMOVED*****REMOVED***
          min: function() {
            module.set.value(module.get.min());
   ***REMOVED*****REMOVED***
 ***REMOVED*****REMOVED***

        read: {
          metadata: function() {
            var
              data = {
                thumbVal        : $module.data(metadata.thumbVal),
                secondThumbVal  : $module.data(metadata.secondThumbVal)
            ***REMOVED***
            ;
            if(data.thumbVal) {
              if(module.is.range() && data.secondThumbVal) {
                module.debug('Current value set from metadata', data.thumbVal, data.secondThumbVal);
                module.set.rangeValue(data.thumbVal, data.secondThumbVal);
            ***REMOVED*** else {
                module.debug('Current value set from metadata', data.thumbVal);
                module.set.value(data.thumbVal);
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***
          settings: function() {
            if(settings.start !== false) {
              if(module.is.range()) {
                module.debug('Start position set from settings', settings.start, settings.end);
                module.set.rangeValue(settings.start, settings.end);
            ***REMOVED*** else {
                module.debug('Start position set from settings', settings.start);
                module.set.value(settings.start);
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            if($.isPlainObject(settings[name])) {
              $.extend(true, settings[name], value);
          ***REMOVED***
            else {
              settings[name] = value;
          ***REMOVED***
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***

        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                module.error(error.method, query);
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***
          if($.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***;

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
      ***REMOVED***
        module.invoke(query);
    ***REMOVED***
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
      ***REMOVED***
        module.initialize();
    ***REMOVED***
  ***REMOVED***)
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;

***REMOVED***;

$.fn.slider.settings = {

  silent       : false,
  debug        : false,
  verbose      : false,
  performance  : true,

  name         : 'Slider',
  namespace    : 'slider',

  error    : {
    method    : 'The method you called is not defined.',
    notrange : 'This slider is not a range slider'
***REMOVED***

  metadata: {
    thumbVal        : 'thumbVal',
    secondThumbVal  : 'secondThumbVal'
***REMOVED***

  min              : 0,
  max              : 20,
  step             : 1,
  start            : 0,
  end              : 20,
  labelType        : 'number',
  showLabelTicks   : false,
  smooth           : false,
  autoAdjustLabels : true,
  labelDistance    : 100,
  preventCrossover : true,
  fireOnInit       : false,

  //the decimal place to round to if step is undefined
  decimalPlaces  : 2,

  // page up/down multiplier. How many more times the steps to take on page up/down press
  pageMultiplier : 2,

  selector: {

***REMOVED***

  className     : {
    reversed : 'reversed',
    disabled : 'disabled',
    labeled  : 'labeled',
    ticked   : 'ticked',
    vertical : 'vertical',
    range    : 'range',
    smooth   : 'smooth'
***REMOVED***

  keys : {
    pageUp     : 33,
    pageDown   : 34,
    leftArrow  : 37,
    upArrow    : 38,
    rightArrow : 39,
    downArrow  : 40
***REMOVED***

  labelTypes    : {
    number  : 'number',
    letter  : 'letter'
***REMOVED***

  onChange : function(value, thumbVal, secondThumbVal){***REMOVED***,
  onMove   : function(value, thumbVal, secondThumbVal){***REMOVED***,
***REMOVED***;


***REMOVED***)( jQuery, window, document );

/*!
***REMOVED*** # Fomantic-UI - Rating
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

***REMOVED***;

$.isFunction = $.isFunction || function(obj) {
  return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.rating = function(parameters) {
  var
    $allModules     = $(this),
    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),
    returnedValue
  ;
  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {***REMOVED***, $.fn.rating.settings, parameters)
          : $.extend({***REMOVED***, $.fn.rating.settings),

        namespace       = settings.namespace,
        className       = settings.className,
        metadata        = settings.metadata,
        selector        = settings.selector,
        cssVars         = settings.cssVars,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        element         = this,
        instance        = $(this).data(moduleNamespace),

        $module         = $(this),
        $icon           = $module.find(selector.icon),

        initialLoad,
        module
      ;

      module = {

        initialize: function() {
          module.verbose('Initializing rating module', settings);

          if($icon.length === 0) {
            module.setup.layout();
        ***REMOVED***

          if(settings.interactive && !module.is.disabled()) {
            module.enable();
        ***REMOVED***
          else {
            module.disable();
        ***REMOVED***
          module.set.initialLoad();
          module.set.rating( module.get.initialRating() );
          module.remove.initialLoad();
          module.instantiate();
 ***REMOVED*****REMOVED***

        instantiate: function() {
          module.verbose('Instantiating module', settings);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
 ***REMOVED*****REMOVED***

        destroy: function() {
          module.verbose('Destroying previous instance', instance);
          module.remove.events();
          $module
            .removeData(moduleNamespace)
          ;
 ***REMOVED*****REMOVED***

        refresh: function() {
          $icon   = $module.find(selector.icon);
 ***REMOVED*****REMOVED***

        setup: {
          layout: function() {
            var
              maxRating = module.get.maxRating(),
              icon      = module.get.icon(),
              html      = $.fn.rating.settings.templates.icon(maxRating, icon)
            ;
            module.debug('Generating icon html dynamically');
            $module
              .html(html)
            ;
            module.refresh();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        event: {
          mouseenter: function() {
            var
              $activeIcon = $(this)
            ;
            $activeIcon
              .nextAll()
                .removeClass(className.selected)
            ;
            $module
              .addClass(className.selected)
            ;
            $activeIcon
              .addClass(className.selected)
                .prevAll()
                .addClass(className.selected)
            ;
   ***REMOVED*****REMOVED***
          mouseleave: function() {
            $module
              .removeClass(className.selected)
            ;
            $icon
              .removeClass(className.selected)
            ;
   ***REMOVED*****REMOVED***
          click: function() {
            var
              $activeIcon   = $(this),
              currentRating = module.get.rating(),
              rating        = $icon.index($activeIcon) + 1,
              canClear      = (settings.clearable == 'auto')
               ? ($icon.length === 1)
               : settings.clearable
            ;
            if(canClear && currentRating == rating) {
              module.clearRating();
          ***REMOVED***
            else {
              module.set.rating( rating );
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        clearRating: function() {
          module.debug('Clearing current rating');
          module.set.rating(0);
 ***REMOVED*****REMOVED***

        bind: {
          events: function() {
            module.verbose('Binding events');
            $module
              .on('mouseenter' + eventNamespace, selector.icon, module.event.mouseenter)
              .on('mouseleave' + eventNamespace, selector.icon, module.event.mouseleave)
              .on('click'      + eventNamespace, selector.icon, module.event.click)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        remove: {
          events: function() {
            module.verbose('Removing events');
            $module
              .off(eventNamespace)
            ;
   ***REMOVED*****REMOVED***
          initialLoad: function() {
            initialLoad = false;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        enable: function() {
          module.debug('Setting rating to interactive mode');
          module.bind.events();
          $module
            .removeClass(className.disabled)
          ;
 ***REMOVED*****REMOVED***

        disable: function() {
          module.debug('Setting rating to read-only mode');
          module.remove.events();
          $module
            .addClass(className.disabled)
          ;
 ***REMOVED*****REMOVED***

        is: {
          initialLoad: function() {
            return initialLoad;
   ***REMOVED*****REMOVED***
          disabled: function() {
            return $module.hasClass(className.disabled);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        get: {
          icon: function(){
            var icon = $module.data(metadata.icon);
            if (icon) {
              $module.removeData(metadata.icon);
          ***REMOVED***
            return icon || settings.icon;
   ***REMOVED*****REMOVED***
          initialRating: function() {
            if($module.data(metadata.rating) !== undefined) {
              $module.removeData(metadata.rating);
              return $module.data(metadata.rating);
          ***REMOVED***
            return settings.initialRating;
   ***REMOVED*****REMOVED***
          maxRating: function() {
            if($module.data(metadata.maxRating) !== undefined) {
              $module.removeData(metadata.maxRating);
              return $module.data(metadata.maxRating);
          ***REMOVED***
            return settings.maxRating;
   ***REMOVED*****REMOVED***
          rating: function() {
            var
              currentRating = $icon.filter('.' + className.active).length
            ;
            module.verbose('Current rating retrieved', currentRating);
            return currentRating;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        set: {
          rating: function(rating) {
            var
              ratingIndex = Math.floor(
                (rating - 1 >= 0)
                  ? (rating - 1)
                  : 0
              ),
              $activeIcon = $icon.eq(ratingIndex),
              $partialActiveIcon = rating <= 1
                ? $activeIcon
                : $activeIcon.next()
              ,
              filledPercentage = (rating % 1)***REMOVED*** 100
            ;
            $module
              .removeClass(className.selected)
            ;
            $icon
              .removeClass(className.selected)
              .removeClass(className.active)
              .removeClass(className.partiallyActive)
            ;
            if(rating > 0) {
              module.verbose('Setting current rating to', rating);
              $activeIcon
                .prevAll()
                .addBack()
                .addClass(className.active)
              ;
              if($activeIcon.next() && rating % 1 !== 0) {
                $partialActiveIcon
                  .addClass(className.partiallyActive)
                  .addClass(className.active)
                ;
                $partialActiveIcon
                  .css(cssVars.filledCustomPropName, filledPercentage + '%')
                ;
                if($partialActiveIcon.css('backgroundColor') === 'transparent') {
                  $partialActiveIcon
                    .removeClass(className.partiallyActive)
                    .removeClass(className.active)
                  ;
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
            if(!module.is.initialLoad()) {
              settings.onRate.call(element, rating);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          initialLoad: function() {
            initialLoad = true;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            if($.isPlainObject(settings[name])) {
              $.extend(true, settings[name], value);
          ***REMOVED***
            else {
              settings[name] = value;
          ***REMOVED***
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***
          if(Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***;
      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
      ***REMOVED***
        module.invoke(query);
    ***REMOVED***
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
      ***REMOVED***
        module.initialize();
    ***REMOVED***
  ***REMOVED***)
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
***REMOVED***;

$.fn.rating.settings = {

  name          : 'Rating',
  namespace     : 'rating',

  icon          : 'star',

  silent        : false,
  debug         : false,
  verbose       : false,
  performance   : true,

  initialRating : 0,
  interactive   : true,
  maxRating     : 4,
  clearable     : 'auto',

  fireOnInit    : false,

  onRate        : function(rating){***REMOVED***,

  error         : {
    method    : 'The method you called is not defined',
    noMaximum : 'No maximum rating specified. Cannot generate HTML automatically'
***REMOVED***


  metadata: {
    rating    : 'rating',
    maxRating : 'maxRating',
    icon      : 'icon'
***REMOVED***

  className : {
    active   : 'active',
    disabled : 'disabled',
    selected : 'selected',
    loading  : 'loading',
    partiallyActive : 'partial'
***REMOVED***

  cssVars : {
    filledCustomPropName : '--full'
***REMOVED***

  selector  : {
    icon : '.icon'
***REMOVED***

  templates: {
    icon: function(maxRating, iconClass) {
      var
        icon = 1,
        html = ''
      ;
      while(icon <= maxRating) {
        html += '<i class="'+iconClass+' icon"></i>';
        icon++;
    ***REMOVED***
      return html;
  ***REMOVED***
***REMOVED***

***REMOVED***;

***REMOVED***)( jQuery, window, document );

/*!
***REMOVED*** # Fomantic-UI - Search
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

***REMOVED***;

$.isFunction = $.isFunction || function(obj) {
  return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.search = function(parameters) {
  var
    $allModules     = $(this),
    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),
    returnedValue
  ;
  $(this)
    .each(function() {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {***REMOVED***, $.fn.search.settings, parameters)
          : $.extend({***REMOVED***, $.fn.search.settings),

        className        = settings.className,
        metadata         = settings.metadata,
        regExp           = settings.regExp,
        fields           = settings.fields,
        selector         = settings.selector,
        error            = settings.error,
        namespace        = settings.namespace,

        eventNamespace   = '.' + namespace,
        moduleNamespace  = namespace + '-module',

        $module          = $(this),
        $prompt          = $module.find(selector.prompt),
        $searchButton    = $module.find(selector.searchButton),
        $results         = $module.find(selector.results),
        $result          = $module.find(selector.result),
        $category        = $module.find(selector.category),

        element          = this,
        instance         = $module.data(moduleNamespace),

        disabledBubbled  = false,
        resultsDismissed = false,

        module
      ;

      module = {

        initialize: function() {
          module.verbose('Initializing module');
          module.get.settings();
          module.determine.searchFields();
          module.bind.events();
          module.set.type();
          module.create.results();
          module.instantiate();
 ***REMOVED*****REMOVED***
        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
 ***REMOVED*****REMOVED***
        destroy: function() {
          module.verbose('Destroying instance');
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
 ***REMOVED*****REMOVED***

        refresh: function() {
          module.debug('Refreshing selector cache');
          $prompt         = $module.find(selector.prompt);
          $searchButton   = $module.find(selector.searchButton);
          $category       = $module.find(selector.category);
          $results        = $module.find(selector.results);
          $result         = $module.find(selector.result);
 ***REMOVED*****REMOVED***

        refreshResults: function() {
          $results = $module.find(selector.results);
          $result  = $module.find(selector.result);
 ***REMOVED*****REMOVED***

        bind: {
          events: function() {
            module.verbose('Binding events to search');
            if(settings.automatic) {
              $module
                .on(module.get.inputEvent() + eventNamespace, selector.prompt, module.event.input)
              ;
              $prompt
                .attr('autocomplete', 'off')
              ;
          ***REMOVED***
            $module
              // prompt
              .on('focus'     + eventNamespace, selector.prompt, module.event.focus)
              .on('blur'      + eventNamespace, selector.prompt, module.event.blur)
              .on('keydown'   + eventNamespace, selector.prompt, module.handleKeyboard)
              // search button
              .on('click'     + eventNamespace, selector.searchButton, module.query)
              // results
              .on('mousedown' + eventNamespace, selector.results, module.event.result.mousedown)
              .on('mouseup'   + eventNamespace, selector.results, module.event.result.mouseup)
              .on('click'     + eventNamespace, selector.result,  module.event.result.click)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        determine: {
          searchFields: function() {
            // this makes sure $.extend does not add specified search fields to default fields
            // this is the only setting which should not extend defaults
            if(parameters && parameters.searchFields !== undefined) {
              settings.searchFields = parameters.searchFields;
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        event: {
          input: function() {
            if(settings.searchDelay) {
              clearTimeout(module.timer);
              module.timer = setTimeout(function() {
                if(module.is.focused()) {
                  module.query();
              ***REMOVED***
  ***REMOVED*****REMOVED*****REMOVED*** settings.searchDelay);
          ***REMOVED***
            else {
              module.query();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          focus: function() {
            module.set.focus();
            if(settings.searchOnFocus && module.has.minimumCharacters() ) {
              module.query(function() {
                if(module.can.show() ) {
                  module.showResults();
              ***REMOVED***
            ***REMOVED***);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          blur: function(event) {
            var
              pageLostFocus = (document.activeElement === this),
              callback      = function() {
                module.cancel.query();
                module.remove.focus();
                module.timer = setTimeout(module.hideResults, settings.hideDelay);
            ***REMOVED***
            ;
            if(pageLostFocus) {
              return;
          ***REMOVED***
            resultsDismissed = false;
            if(module.resultsClicked) {
              module.debug('Determining if user action caused search to close');
              $module
                .one('click.close' + eventNamespace, selector.results, function(event) {
                  if(module.is.inMessage(event) || disabledBubbled) {
                    $prompt.focus();
                    return;
                ***REMOVED***
                  disabledBubbled = false;
                  if( !module.is.animating() && !module.is.hidden()) {
                    callback();
                ***REMOVED***
              ***REMOVED***)
              ;
          ***REMOVED***
            else {
              module.debug('Input blurred without user action, closing results');
              callback();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          result: {
            mousedown: function() {
              module.resultsClicked = true;
***REMOVED*****REMOVED*****REMOVED***
            mouseup: function() {
              module.resultsClicked = false;
***REMOVED*****REMOVED*****REMOVED***
            click: function(event) {
              module.debug('Search result selected');
              var
                $result = $(this),
                $title  = $result.find(selector.title).eq(0),
                $link   = $result.is('a[href]')
                  ? $result
                  : $result.find('a[href]').eq(0),
                href    = $link.attr('href')   || false,
                target  = $link.attr('target') || false,
                // title is used for result lookup
                value   = ($title.length > 0)
                  ? $title.text()
                  : false,
                results = module.get.results(),
                result  = $result.data(metadata.result) || module.get.result(value, results)
              ;
              if(value) {
                module.set.value(value);
            ***REMOVED***
              if( $.isFunction(settings.onSelect) ) {
                if(settings.onSelect.call(element, result, results) === false) {
                  module.debug('Custom onSelect callback cancelled default select action');
                  disabledBubbled = true;
                  return;
              ***REMOVED***
            ***REMOVED***
              module.hideResults();
              if(href) {
                module.verbose('Opening search link found in result', $link);
                if(target == '_blank' || event.ctrlKey) {
                  window.open(href);
              ***REMOVED***
                else {
                  window.location.href = (href);
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        handleKeyboard: function(event) {
          var
            // force selector refresh
            $result         = $module.find(selector.result),
            $category       = $module.find(selector.category),
            $activeResult   = $result.filter('.' + className.active),
            currentIndex    = $result.index( $activeResult ),
            resultSize      = $result.length,
            hasActiveResult = $activeResult.length > 0,

            keyCode         = event.which,
            keys            = {
              backspace : 8,
              enter     : 13,
              escape    : 27,
              upArrow   : 38,
              downArrow : 40
***REMOVED*****REMOVED*****REMOVED***
            newIndex
          ;
          // search shortcuts
          if(keyCode == keys.escape) {
            module.verbose('Escape key pressed, blurring search field');
            module.hideResults();
            resultsDismissed = true;
        ***REMOVED***
          if( module.is.visible() ) {
            if(keyCode == keys.enter) {
              module.verbose('Enter key pressed, selecting active result');
              if( $result.filter('.' + className.active).length > 0 ) {
                module.event.result.click.call($result.filter('.' + className.active), event);
                event.preventDefault();
                return false;
            ***REMOVED***
          ***REMOVED***
            else if(keyCode == keys.upArrow && hasActiveResult) {
              module.verbose('Up key pressed, changing active result');
              newIndex = (currentIndex - 1 < 0)
                ? currentIndex
                : currentIndex - 1
              ;
              $category
                .removeClass(className.active)
              ;
              $result
                .removeClass(className.active)
                .eq(newIndex)
                  .addClass(className.active)
                  .closest($category)
                    .addClass(className.active)
              ;
              event.preventDefault();
          ***REMOVED***
            else if(keyCode == keys.downArrow) {
              module.verbose('Down key pressed, changing active result');
              newIndex = (currentIndex + 1 >= resultSize)
                ? currentIndex
                : currentIndex + 1
              ;
              $category
                .removeClass(className.active)
              ;
              $result
                .removeClass(className.active)
                .eq(newIndex)
                  .addClass(className.active)
                  .closest($category)
                    .addClass(className.active)
              ;
              event.preventDefault();
          ***REMOVED***
        ***REMOVED***
          else {
            // query shortcuts
            if(keyCode == keys.enter) {
              module.verbose('Enter key pressed, executing query');
              module.query();
              module.set.buttonPressed();
              $prompt.one('keyup', module.remove.buttonFocus);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        setup: {
          api: function(searchTerm, callback) {
            var
              apiSettings = {
                debug             : settings.debug,
                on                : false,
                cache             : settings.cache,
                action            : 'search',
                urlData           : {
                  query : searchTerm
    ***REMOVED*****REMOVED*****REMOVED***
                onSuccess         : function(response) {
                  module.parse.response.call(element, response, searchTerm);
                  callback();
    ***REMOVED*****REMOVED*****REMOVED***
                onFailure         : function() {
                  module.displayMessage(error.serverError);
                  callback();
    ***REMOVED*****REMOVED*****REMOVED***
                onAbort : function(response) {
    ***REMOVED*****REMOVED*****REMOVED***
                onError           : module.error
            ***REMOVED***
            ;
            $.extend(true, apiSettings, settings.apiSettings);
            module.verbose('Setting up API request', apiSettings);
            $module.api(apiSettings);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        can: {
          useAPI: function() {
            return $.fn.api !== undefined;
   ***REMOVED*****REMOVED***
          show: function() {
            return module.is.focused() && !module.is.visible() && !module.is.empty();
   ***REMOVED*****REMOVED***
          transition: function() {
            return settings.transition && $.fn.transition !== undefined && $module.transition('is supported');
        ***REMOVED***
 ***REMOVED*****REMOVED***

        is: {
          animating: function() {
            return $results.hasClass(className.animating);
   ***REMOVED*****REMOVED***
          hidden: function() {
            return $results.hasClass(className.hidden);
   ***REMOVED*****REMOVED***
          inMessage: function(event) {
            if(!event.target) {
              return;
          ***REMOVED***
            var
              $target = $(event.target),
              isInDOM = $.contains(document.documentElement, event.target)
            ;
            return (isInDOM && $target.closest(selector.message).length > 0);
   ***REMOVED*****REMOVED***
          empty: function() {
            return ($results.html() === '');
   ***REMOVED*****REMOVED***
          visible: function() {
            return ($results.filter(':visible').length > 0);
   ***REMOVED*****REMOVED***
          focused: function() {
            return ($prompt.filter(':focus').length > 0);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        get: {
          settings: function() {
            if($.isPlainObject(parameters) && parameters.searchFullText) {
              settings.fullTextSearch = parameters.searchFullText;
              module.error(settings.error.oldSearchSyntax, element);
          ***REMOVED***
            if (settings.ignoreDiacritics && !String.prototype.normalize) {
              settings.ignoreDiacritics = false;
              module.error(error.noNormalize, element);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          inputEvent: function() {
            var
              prompt = $prompt[0],
              inputEvent   = (prompt !== undefined && prompt.oninput !== undefined)
                ? 'input'
                : (prompt !== undefined && prompt.onpropertychange !== undefined)
                  ? 'propertychange'
                  : 'keyup'
            ;
            return inputEvent;
   ***REMOVED*****REMOVED***
          value: function() {
            return $prompt.val();
   ***REMOVED*****REMOVED***
          results: function() {
            var
              results = $module.data(metadata.results)
            ;
            return results;
   ***REMOVED*****REMOVED***
          result: function(value, results) {
            var
              result       = false
            ;
            value = (value !== undefined)
              ? value
              : module.get.value()
            ;
            results = (results !== undefined)
              ? results
              : module.get.results()
            ;
            if(settings.type === 'category') {
              module.debug('Finding result that matches', value);
              $.each(results, function(index, category) {
                if(Array.isArray(category.results)) {
                  result = module.search.object(value, category.results)[0];
                  // don't continue searching if a result is found
                  if(result) {
                    return false;
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***);
          ***REMOVED***
            else {
              module.debug('Finding result in results object', value);
              result = module.search.object(value, results)[0];
          ***REMOVED***
            return result || false;
   ***REMOVED*****REMOVED***
 ***REMOVED*****REMOVED***

        select: {
          firstResult: function() {
            module.verbose('Selecting first result');
            $result.first().addClass(className.active);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        set: {
          focus: function() {
            $module.addClass(className.focus);
   ***REMOVED*****REMOVED***
          loading: function() {
            $module.addClass(className.loading);
   ***REMOVED*****REMOVED***
          value: function(value) {
            module.verbose('Setting search input value', value);
            $prompt
              .val(value)
            ;
   ***REMOVED*****REMOVED***
          type: function(type) {
            type = type || settings.type;
            if(settings.type == 'category') {
              $module.addClass(settings.type);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          buttonPressed: function() {
            $searchButton.addClass(className.pressed);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        remove: {
          loading: function() {
            $module.removeClass(className.loading);
   ***REMOVED*****REMOVED***
          focus: function() {
            $module.removeClass(className.focus);
   ***REMOVED*****REMOVED***
          buttonPressed: function() {
            $searchButton.removeClass(className.pressed);
   ***REMOVED*****REMOVED***
          diacritics: function(text) {
            return settings.ignoreDiacritics ?  text.normalize('NFD').replace(/[\u0300-\u036f]/g, '') : text;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        query: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){***REMOVED***
          ;
          var
            searchTerm = module.get.value(),
            cache = module.read.cache(searchTerm)
          ;
          callback = callback || function() {***REMOVED***;
          if( module.has.minimumCharacters() )  {
            if(cache) {
              module.debug('Reading result from cache', searchTerm);
              module.save.results(cache.results);
              module.addResults(cache.html);
              module.inject.id(cache.results);
              callback();
          ***REMOVED***
            else {
              module.debug('Querying for', searchTerm);
              if($.isPlainObject(settings.source) || Array.isArray(settings.source)) {
                module.search.local(searchTerm);
                callback();
            ***REMOVED***
              else if( module.can.useAPI() ) {
                module.search.remote(searchTerm, callback);
            ***REMOVED***
              else {
                module.error(error.source);
                callback();
            ***REMOVED***
          ***REMOVED***
            settings.onSearchQuery.call(element, searchTerm);
        ***REMOVED***
          else {
            module.hideResults();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        search: {
          local: function(searchTerm) {
            var
              results = module.search.object(searchTerm, settings.source),
              searchHTML
            ;
            module.set.loading();
            module.save.results(results);
            module.debug('Returned full local search results', results);
            if(settings.maxResults > 0) {
              module.debug('Using specified max results', results);
              results = results.slice(0, settings.maxResults);
          ***REMOVED***
            if(settings.type == 'category') {
              results = module.create.categoryResults(results);
          ***REMOVED***
            searchHTML = module.generateResults({
              results: results
          ***REMOVED***);
            module.remove.loading();
            module.addResults(searchHTML);
            module.inject.id(results);
            module.write.cache(searchTerm, {
              html    : searchHTML,
              results : results
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          remote: function(searchTerm, callback) {
            callback = $.isFunction(callback)
              ? callback
              : function(){***REMOVED***
            ;
            if($module.api('is loading')) {
              $module.api('abort');
          ***REMOVED***
            module.setup.api(searchTerm, callback);
            $module
              .api('query')
            ;
   ***REMOVED*****REMOVED***
          object: function(searchTerm, source, searchFields) {
            searchTerm = module.remove.diacritics(String(searchTerm));
            var
              results      = [],
              exactResults = [],
              fuzzyResults = [],
              searchExp    = searchTerm.replace(regExp.escape, '\\$&'),
              matchRegExp  = new RegExp(regExp.beginsWith + searchExp, 'i'),

              // avoid duplicates when pushing results
              addResult = function(array, result) {
                var
                  notResult      = ($.inArray(result, results) == -1),
                  notFuzzyResult = ($.inArray(result, fuzzyResults) == -1),
                  notExactResults = ($.inArray(result, exactResults) == -1)
                ;
                if(notResult && notFuzzyResult && notExactResults) {
                  array.push(result);
              ***REMOVED***
            ***REMOVED***
            ;
            source = source || settings.source;
            searchFields = (searchFields !== undefined)
              ? searchFields
              : settings.searchFields
            ;

            // search fields should be array to loop correctly
            if(!Array.isArray(searchFields)) {
              searchFields = [searchFields];
          ***REMOVED***

            // exit conditions if no source
            if(source === undefined || source === false) {
              module.error(error.source);
              return [];
          ***REMOVED***
            // iterate through search fields looking for matches
            $.each(searchFields, function(index, field) {
              $.each(source, function(label, content) {
                var
                  fieldExists = (typeof content[field] == 'string') || (typeof content[field] == 'number')
                ;
                if(fieldExists) {
                  var text;
                  if (typeof content[field] === 'string'){  
                      text = module.remove.diacritics(content[field]);
                ***REMOVED*** else {
                      text = content[field].toString(); 
                ***REMOVED***
                  if( text.search(matchRegExp) !== -1) {
                    // content starts with value (first in results)
                    addResult(results, content);
                ***REMOVED***
                  else if(settings.fullTextSearch === 'exact' && module.exactSearch(searchTerm, text) ) {
                    // content fuzzy matches (last in results)
                    addResult(exactResults, content);
                ***REMOVED***
                  else if(settings.fullTextSearch == true && module.fuzzySearch(searchTerm, text) ) {
                    // content fuzzy matches (last in results)
                    addResult(fuzzyResults, content);
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***);
          ***REMOVED***);
            $.merge(exactResults, fuzzyResults);
            $.merge(results, exactResults);
            return results;
        ***REMOVED***
 ***REMOVED*****REMOVED***
        exactSearch: function (query, term) {
          query = query.toLowerCase();
          term  = term.toLowerCase();
          return term.indexOf(query) > -1;
 ***REMOVED*****REMOVED***
        fuzzySearch: function(query, term) {
          var
            termLength  = term.length,
            queryLength = query.length
          ;
          if(typeof query !== 'string') {
            return false;
        ***REMOVED***
          query = query.toLowerCase();
          term  = term.toLowerCase();
          if(queryLength > termLength) {
            return false;
        ***REMOVED***
          if(queryLength === termLength) {
            return (query === term);
        ***REMOVED***
          search: for (var characterIndex = 0, nextCharacterIndex = 0; characterIndex < queryLength; characterIndex++) {
            var
              queryCharacter = query.charCodeAt(characterIndex)
            ;
            while(nextCharacterIndex < termLength) {
              if(term.charCodeAt(nextCharacterIndex++) === queryCharacter) {
                continue search;
            ***REMOVED***
          ***REMOVED***
            return false;
        ***REMOVED***
          return true;
 ***REMOVED*****REMOVED***

        parse: {
          response: function(response, searchTerm) {
            if(Array.isArray(response)){
                var o={***REMOVED***;
                o[fields.results]=response;
                response = o;
          ***REMOVED***
            var
              searchHTML = module.generateResults(response)
            ;
            module.verbose('Parsing server response', response);
            if(response !== undefined) {
              if(searchTerm !== undefined && response[fields.results] !== undefined) {
                module.addResults(searchHTML);
                module.inject.id(response[fields.results]);
                module.write.cache(searchTerm, {
                  html    : searchHTML,
                  results : response[fields.results]
              ***REMOVED***);
                module.save.results(response[fields.results]);
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        cancel: {
          query: function() {
            if( module.can.useAPI() ) {
              $module.api('abort');
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        has: {
          minimumCharacters: function() {
            var
              searchTerm    = module.get.value(),
              numCharacters = searchTerm.length
            ;
            return (numCharacters >= settings.minCharacters);
   ***REMOVED*****REMOVED***
          results: function() {
            if($results.length === 0) {
              return false;
          ***REMOVED***
            var
              html = $results.html()
            ;
            return html != '';
        ***REMOVED***
 ***REMOVED*****REMOVED***

        clear: {
          cache: function(value) {
            var
              cache = $module.data(metadata.cache)
            ;
            if(!value) {
              module.debug('Clearing cache', value);
              $module.removeData(metadata.cache);
          ***REMOVED***
            else if(value && cache && cache[value]) {
              module.debug('Removing value from cache', value);
              delete cache[value];
              $module.data(metadata.cache, cache);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        read: {
          cache: function(name) {
            var
              cache = $module.data(metadata.cache)
            ;
            if(settings.cache) {
              module.verbose('Checking cache for generated html for query', name);
              return (typeof cache == 'object') && (cache[name] !== undefined)
                ? cache[name]
                : false
              ;
          ***REMOVED***
            return false;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        create: {
          categoryResults: function(results) {
            var
              categoryResults = {***REMOVED***
            ;
            $.each(results, function(index, result) {
              if(!result.category) {
                return;
            ***REMOVED***
              if(categoryResults[result.category] === undefined) {
                module.verbose('Creating new category of results', result.category);
                categoryResults[result.category] = {
                  name    : result.category,
                  results : [result]
              ***REMOVED***;
            ***REMOVED***
              else {
                categoryResults[result.category].results.push(result);
            ***REMOVED***
          ***REMOVED***);
            return categoryResults;
   ***REMOVED*****REMOVED***
          id: function(resultIndex, categoryIndex) {
            var
              resultID      = (resultIndex + 1), // not zero indexed
              letterID,
              id
            ;
            if(categoryIndex !== undefined) {
              // start char code for "A"
              letterID = String.fromCharCode(97 + categoryIndex);
              id          = letterID + resultID;
              module.verbose('Creating category result id', id);
          ***REMOVED***
            else {
              id = resultID;
              module.verbose('Creating result id', id);
          ***REMOVED***
            return id;
   ***REMOVED*****REMOVED***
          results: function() {
            if($results.length === 0) {
              $results = $('<div />')
                .addClass(className.results)
                .appendTo($module)
              ;
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        inject: {
          result: function(result, resultIndex, categoryIndex) {
            module.verbose('Injecting result into results');
            var
              $selectedResult = (categoryIndex !== undefined)
                ? $results
                    .children().eq(categoryIndex)
                      .children(selector.results)
                        .first()
                        .children(selector.result)
                          .eq(resultIndex)
                : $results
                    .children(selector.result).eq(resultIndex)
            ;
            module.verbose('Injecting results metadata', $selectedResult);
            $selectedResult
              .data(metadata.result, result)
            ;
   ***REMOVED*****REMOVED***
          id: function(results) {
            module.debug('Injecting unique ids into results');
            var
              // since results may be object, we must use counters
              categoryIndex = 0,
              resultIndex   = 0
            ;
            if(settings.type === 'category') {
              // iterate through each category result
              $.each(results, function(index, category) {
                if(category.results.length > 0){
                  resultIndex = 0;
                  $.each(category.results, function(index, result) {
                    if(result.id === undefined) {
                      result.id = module.create.id(resultIndex, categoryIndex);
                  ***REMOVED***
                    module.inject.result(result, resultIndex, categoryIndex);
                    resultIndex++;
                ***REMOVED***);
                  categoryIndex++;
              ***REMOVED***
            ***REMOVED***);
          ***REMOVED***
            else {
              // top level
              $.each(results, function(index, result) {
                if(result.id === undefined) {
                  result.id = module.create.id(resultIndex);
              ***REMOVED***
                module.inject.result(result, resultIndex);
                resultIndex++;
            ***REMOVED***);
          ***REMOVED***
            return results;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        save: {
          results: function(results) {
            module.verbose('Saving current search results to metadata', results);
            $module.data(metadata.results, results);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        write: {
          cache: function(name, value) {
            var
              cache = ($module.data(metadata.cache) !== undefined)
                ? $module.data(metadata.cache)
                : {***REMOVED***
            ;
            if(settings.cache) {
              module.verbose('Writing generated html to cache', name, value);
              cache[name] = value;
              $module
                .data(metadata.cache, cache)
              ;
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        addResults: function(html) {
          if( $.isFunction(settings.onResultsAdd) ) {
            if( settings.onResultsAdd.call($results, html) === false ) {
              module.debug('onResultsAdd callback cancelled default action');
              return false;
          ***REMOVED***
        ***REMOVED***
          if(html) {
            $results
              .html(html)
            ;
            module.refreshResults();
            if(settings.selectFirstResult) {
              module.select.firstResult();
          ***REMOVED***
            module.showResults();
        ***REMOVED***
          else {
            module.hideResults(function() {
              $results.empty();
          ***REMOVED***);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        showResults: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){***REMOVED***
          ;
          if(resultsDismissed) {
            return;
        ***REMOVED***
          if(!module.is.visible() && module.has.results()) {
            if( module.can.transition() ) {
              module.debug('Showing results with css animations');
              $results
                .transition({
                  animation  : settings.transition + ' in',
                  debug      : settings.debug,
                  verbose    : settings.verbose,
                  duration   : settings.duration,
                  onComplete : function() {
                    callback();
      ***REMOVED*****REMOVED*****REMOVED***
                  queue      : true
              ***REMOVED***)
              ;
          ***REMOVED***
            else {
              module.debug('Showing results with javascript');
              $results
                .stop()
                .fadeIn(settings.duration, settings.easing)
              ;
          ***REMOVED***
            settings.onResultsOpen.call($results);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        hideResults: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){***REMOVED***
          ;
          if( module.is.visible() ) {
            if( module.can.transition() ) {
              module.debug('Hiding results with css animations');
              $results
                .transition({
                  animation  : settings.transition + ' out',
                  debug      : settings.debug,
                  verbose    : settings.verbose,
                  duration   : settings.duration,
                  onComplete : function() {
                    callback();
      ***REMOVED*****REMOVED*****REMOVED***
                  queue      : true
              ***REMOVED***)
              ;
          ***REMOVED***
            else {
              module.debug('Hiding results with javascript');
              $results
                .stop()
                .fadeOut(settings.duration, settings.easing)
              ;
          ***REMOVED***
            settings.onResultsClose.call($results);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        generateResults: function(response) {
          module.debug('Generating html from response', response);
          var
            template       = settings.templates[settings.type],
            isProperObject = ($.isPlainObject(response[fields.results]) && !$.isEmptyObject(response[fields.results])),
            isProperArray  = (Array.isArray(response[fields.results]) && response[fields.results].length > 0),
            html           = ''
          ;
          if(isProperObject || isProperArray ) {
            if(settings.maxResults > 0) {
              if(isProperObject) {
                if(settings.type == 'standard') {
                  module.error(error.maxResults);
              ***REMOVED***
            ***REMOVED***
              else {
                response[fields.results] = response[fields.results].slice(0, settings.maxResults);
            ***REMOVED***
          ***REMOVED***
            if($.isFunction(template)) {
              html = template(response, fields, settings.preserveHTML);
          ***REMOVED***
            else {
              module.error(error.noTemplate, false);
          ***REMOVED***
        ***REMOVED***
          else if(settings.showNoResults) {
            html = module.displayMessage(error.noResults, 'empty', error.noResultsHeader);
        ***REMOVED***
          settings.onResults.call(element, response);
          return html;
 ***REMOVED*****REMOVED***

        displayMessage: function(text, type, header) {
          type = type || 'standard';
          module.debug('Displaying message', text, type, header);
          module.addResults( settings.templates.message(text, type, header) );
          return settings.templates.message(text, type, header);
 ***REMOVED*****REMOVED***

        setting: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            settings[name] = value;
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***
          if(Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***;
      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
      ***REMOVED***
        module.invoke(query);
    ***REMOVED***
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
      ***REMOVED***
        module.initialize();
    ***REMOVED***

  ***REMOVED***)
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
***REMOVED***;

$.fn.search.settings = {

  name              : 'Search',
  namespace         : 'search',

  silent            : false,
  debug             : false,
  verbose           : false,
  performance       : true,

  // template to use (specified in settings.templates)
  type              : 'standard',

  // minimum characters required to search
  minCharacters     : 1,

  // whether to select first result after searching automatically
  selectFirstResult : false,

  // API config
  apiSettings       : false,

  // object to search
  source            : false,

  // Whether search should query current term on focus
  searchOnFocus     : true,

  // fields to search
  searchFields   : [
    'id',
    'title',
    'description'
  ],

  // field to display in standard results template
  displayField   : '',

  // search anywhere in value (set to 'exact' to require exact matches
  fullTextSearch : 'exact',

  // match results also if they contain diacritics of the same base character (for example searching for "a" will also match "á" or "â" or "à", etc...)
  ignoreDiacritics : false,

  // whether to add events to prompt automatically
  automatic      : true,

  // delay before hiding menu after blur
  hideDelay      : 0,

  // delay before searching
  searchDelay    : 200,

  // maximum results returned from search
  maxResults     : 7,

  // whether to store lookups in local cache
  cache          : true,

  // whether no results errors should be shown
  showNoResults  : true,

  // preserve possible html of resultset values
  preserveHTML   : true,

  // transition settings
  transition     : 'scale',
  duration       : 200,
  easing         : 'easeOutExpo',

  // callbacks
  onSelect       : false,
  onResultsAdd   : false,

  onSearchQuery  : function(query){***REMOVED***,
  onResults      : function(response){***REMOVED***,

  onResultsOpen  : function(){***REMOVED***,
  onResultsClose : function(){***REMOVED***,

  className: {
    animating : 'animating',
    active    : 'active',
    empty     : 'empty',
    focus     : 'focus',
    hidden    : 'hidden',
    loading   : 'loading',
    results   : 'results',
    pressed   : 'down'
***REMOVED***

  error : {
    source          : 'Cannot search. No source used, and Semantic API module was not included',
    noResultsHeader : 'No Results',
    noResults       : 'Your search returned no results',
    logging         : 'Error in debug logging, exiting.',
    noEndpoint      : 'No search endpoint was specified',
    noTemplate      : 'A valid template name was not specified.',
    oldSearchSyntax : 'searchFullText setting has been renamed fullTextSearch for consistency, please adjust your settings.',
    serverError     : 'There was an issue querying the server.',
    maxResults      : 'Results must be an array to use maxResults setting',
    method          : 'The method you called is not defined.',
    noNormalize     : '"ignoreDiacritics" setting will be ignored. Browser does not support String().normalize(). You may consider including <https://cdn.jsdelivr.net/npm/unorm@1.4.1/lib/unorm.min.js> as a polyfill.'
***REMOVED***

  metadata: {
    cache   : 'cache',
    results : 'results',
    result  : 'result'
***REMOVED***

  regExp: {
    escape     : /[\-\[\]\/\{\***REMOVED***\(\)\*\+\?\.\\\^\$\|]/g,
    beginsWith : '(?:\s|^)'
***REMOVED***

  // maps api response attributes to internal representation
  fields: {
    categories      : 'results',     // array of categories (category view)
    categoryName    : 'name',        // name of category (category view)
    categoryResults : 'results',     // array of results (category view)
    description     : 'description', // result description
    image           : 'image',       // result image
    price           : 'price',       // result price
    results         : 'results',     // array of results (standard)
    title           : 'title',       // result title
    url             : 'url',         // result url
    action          : 'action',      // "view more" object name
    actionText      : 'text',        // "view more" text
    actionURL       : 'url'          // "view more" url
***REMOVED***

  selector : {
    prompt       : '.prompt',
    searchButton : '.search.button',
    results      : '.results',
    message      : '.results > .message',
    category     : '.category',
    result       : '.result',
    title        : '.title, .name'
***REMOVED***

  templates: {
    escape: function(string, preserveHTML) {
      if (preserveHTML){
        return string;
    ***REMOVED***
      var
        badChars     = /[<>"'`]/g,
        shouldEscape = /[&<>"'`]/,
        escape       = {
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#x27;",
          "`": "&#x60;"
 ***REMOVED*****REMOVED***
        escapedChar  = function(chr) {
          return escape[chr];
      ***REMOVED***
      ;
      if(shouldEscape.test(string)) {
        string = string.replace(/&(?![a-z0-9#]{1,6***REMOVED***;)/, "&amp;");
        return string.replace(badChars, escapedChar);
    ***REMOVED***
      return string;
  ***REMOVED***
    message: function(message, type, header) {
      var
        html = ''
      ;
      if(message !== undefined && type !== undefined) {
        html +=  ''
          + '<div class="message ' + type + '">'
        ;
        if(header) {
          html += ''
          + '<div class="header">' + header + '</div>'
          ;
      ***REMOVED***
        html += ' <div class="description">' + message + '</div>';
        html += '</div>';
    ***REMOVED***
      return html;
  ***REMOVED***
    category: function(response, fields, preserveHTML) {
      var
        html = '',
        escape = $.fn.search.settings.templates.escape
      ;
      if(response[fields.categoryResults] !== undefined) {

        // each category
        $.each(response[fields.categoryResults], function(index, category) {
          if(category[fields.results] !== undefined && category.results.length > 0) {

            html  += '<div class="category">';

            if(category[fields.categoryName] !== undefined) {
              html += '<div class="name">' + escape(category[fields.categoryName], preserveHTML) + '</div>';
          ***REMOVED***

            // each item inside category
            html += '<div class="results">';
            $.each(category.results, function(index, result) {
              if(result[fields.url]) {
                html  += '<a class="result" href="' + result[fields.url].replace(/"/g,"") + '">';
            ***REMOVED***
              else {
                html  += '<a class="result">';
            ***REMOVED***
              if(result[fields.image] !== undefined) {
                html += ''
                  + '<div class="image">'
                  + ' <img src="' + result[fields.image].replace(/"/g,"") + '">'
                  + '</div>'
                ;
            ***REMOVED***
              html += '<div class="content">';
              if(result[fields.price] !== undefined) {
                html += '<div class="price">' + escape(result[fields.price], preserveHTML) + '</div>';
            ***REMOVED***
              if(result[fields.title] !== undefined) {
                html += '<div class="title">' + escape(result[fields.title], preserveHTML) + '</div>';
            ***REMOVED***
              if(result[fields.description] !== undefined) {
                html += '<div class="description">' + escape(result[fields.description], preserveHTML) + '</div>';
            ***REMOVED***
              html  += ''
                + '</div>'
              ;
              html += '</a>';
          ***REMOVED***);
            html += '</div>';
            html  += ''
              + '</div>'
            ;
        ***REMOVED***
      ***REMOVED***);
        if(response[fields.action]) {
          if(fields.actionURL === false) {
            html += ''
            + '<div class="action">'
            +   escape(response[fields.action][fields.actionText], preserveHTML)
            + '</div>';
        ***REMOVED*** else {
            html += ''
            + '<a href="' + response[fields.action][fields.actionURL].replace(/"/g,"") + '" class="action">'
            +   escape(response[fields.action][fields.actionText], preserveHTML)
            + '</a>';
        ***REMOVED***
      ***REMOVED***
        return html;
    ***REMOVED***
      return false;
  ***REMOVED***
    standard: function(response, fields, preserveHTML) {
      var
        html = '',
        escape = $.fn.search.settings.templates.escape
      ;
      if(response[fields.results] !== undefined) {

        // each result
        $.each(response[fields.results], function(index, result) {
          if(result[fields.url]) {
            html  += '<a class="result" href="' + result[fields.url].replace(/"/g,"") + '">';
        ***REMOVED***
          else {
            html  += '<a class="result">';
        ***REMOVED***
          if(result[fields.image] !== undefined) {
            html += ''
              + '<div class="image">'
              + ' <img src="' + result[fields.image].replace(/"/g,"") + '">'
              + '</div>'
            ;
        ***REMOVED***
          html += '<div class="content">';
          if(result[fields.price] !== undefined) {
            html += '<div class="price">' + escape(result[fields.price], preserveHTML) + '</div>';
        ***REMOVED***
          if(result[fields.title] !== undefined) {
            html += '<div class="title">' + escape(result[fields.title], preserveHTML) + '</div>';
        ***REMOVED***
          if(result[fields.description] !== undefined) {
            html += '<div class="description">' + escape(result[fields.description], preserveHTML) + '</div>';
        ***REMOVED***
          html  += ''
            + '</div>'
          ;
          html += '</a>';
      ***REMOVED***);
        if(response[fields.action]) {
          if(fields.actionURL === false) {
            html += ''
            + '<div class="action">'
            +   escape(response[fields.action][fields.actionText], preserveHTML)
            + '</div>';
        ***REMOVED*** else {
            html += ''
            + '<a href="' + response[fields.action][fields.actionURL].replace(/"/g,"") + '" class="action">'
            +   escape(response[fields.action][fields.actionText], preserveHTML)
            + '</a>';
        ***REMOVED***
      ***REMOVED***
        return html;
    ***REMOVED***
      return false;
  ***REMOVED***
***REMOVED***
***REMOVED***;

***REMOVED***)( jQuery, window, document );

/*!
***REMOVED*** # Fomantic-UI - Shape
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

***REMOVED***;

$.isFunction = $.isFunction || function(obj) {
  return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.shape = function(parameters) {
  var
    $allModules     = $(this),

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    requestAnimationFrame = window.requestAnimationFrame
      || window.mozRequestAnimationFrame
      || window.webkitRequestAnimationFrame
      || window.msRequestAnimationFrame
      || function(callback) { setTimeout(callback, 0); ***REMOVED***,

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        moduleSelector = $allModules.selector || '',
        settings       = ( $.isPlainObject(parameters) )
          ? $.extend(true, {***REMOVED***, $.fn.shape.settings, parameters)
          : $.extend({***REMOVED***, $.fn.shape.settings),

        // internal aliases
        namespace     = settings.namespace,
        selector      = settings.selector,
        error         = settings.error,
        className     = settings.className,

        // define namespaces for modules
        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        // selector cache
        $module       = $(this),
        $sides        = $module.find('>' + selector.sides),
        $side         = $sides.find('>' + selector.side),

        // private variables
        nextIndex = false,
        $activeSide,
        $nextSide,

        // standard module
        element       = this,
        instance      = $module.data(moduleNamespace),
        module
      ;

      module = {

        initialize: function() {
          module.verbose('Initializing module for', element);
          module.set.defaultSide();
          module.instantiate();
 ***REMOVED*****REMOVED***

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
 ***REMOVED*****REMOVED***

        destroy: function() {
          module.verbose('Destroying previous module for', element);
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
 ***REMOVED*****REMOVED***

        refresh: function() {
          module.verbose('Refreshing selector cache for', element);
          $module = $(element);
          $sides  = $(this).find(selector.sides);
          $side   = $(this).find(selector.side);
 ***REMOVED*****REMOVED***

        repaint: function() {
          module.verbose('Forcing repaint event');
          var
            shape          = $sides[0] || document.createElement('div'),
            fakeAssignment = shape.offsetWidth
          ;
 ***REMOVED*****REMOVED***

        animate: function(propertyObject, callback) {
          module.verbose('Animating box with properties', propertyObject);
          callback = callback || function(event) {
            module.verbose('Executing animation callback');
            if(event !== undefined) {
              event.stopPropagation();
          ***REMOVED***
            module.reset();
            module.set.active();
        ***REMOVED***;
          settings.beforeChange.call($nextSide[0]);
          if(module.get.transitionEvent()) {
            module.verbose('Starting CSS animation');
            $module
              .addClass(className.animating)
            ;
            $sides
              .css(propertyObject)
              .one(module.get.transitionEvent(), callback)
            ;
            module.set.duration(settings.duration);
            requestAnimationFrame(function() {
              $module
                .addClass(className.animating)
              ;
              $activeSide
                .addClass(className.hidden)
              ;
          ***REMOVED***);
        ***REMOVED***
          else {
            callback();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        queue: function(method) {
          module.debug('Queueing animation of', method);
          $sides
            .one(module.get.transitionEvent(), function() {
              module.debug('Executing queued animation');
              setTimeout(function(){
                $module.shape(method);
  ***REMOVED*****REMOVED*****REMOVED*** 0);
          ***REMOVED***)
          ;
 ***REMOVED*****REMOVED***

        reset: function() {
          module.verbose('Animating states reset');
          $module
            .removeClass(className.animating)
            .attr('style', '')
            .removeAttr('style')
          ;
          // removeAttr style does not consistently work in safari
          $sides
            .attr('style', '')
            .removeAttr('style')
          ;
          $side
            .attr('style', '')
            .removeAttr('style')
            .removeClass(className.hidden)
          ;
          $nextSide
            .removeClass(className.animating)
            .attr('style', '')
            .removeAttr('style')
          ;
 ***REMOVED*****REMOVED***

        is: {
          complete: function() {
            return ($side.filter('.' + className.active)[0] == $nextSide[0]);
   ***REMOVED*****REMOVED***
          animating: function() {
            return $module.hasClass(className.animating);
   ***REMOVED*****REMOVED***
          hidden: function() {
            return $module.closest(':hidden').length > 0;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        set: {

          defaultSide: function() {
            $activeSide = $side.filter('.' + settings.className.active);
            $nextSide   = ( $activeSide.next(selector.side).length > 0 )
              ? $activeSide.next(selector.side)
              : $side.first()
            ;
            nextIndex = false;
            module.verbose('Active side set to', $activeSide);
            module.verbose('Next side set to', $nextSide);
   ***REMOVED*****REMOVED***

          duration: function(duration) {
            duration = duration || settings.duration;
            duration = (typeof duration == 'number')
              ? duration + 'ms'
              : duration
            ;
            module.verbose('Setting animation duration', duration);
            if(settings.duration || settings.duration === 0) {
              $sides.add($side)
                .css({
                  '-webkit-transition-duration': duration,
                  '-moz-transition-duration': duration,
                  '-ms-transition-duration': duration,
                  '-o-transition-duration': duration,
                  'transition-duration': duration
              ***REMOVED***)
              ;
          ***REMOVED***
   ***REMOVED*****REMOVED***

          currentStageSize: function() {
            var
              $activeSide = $side.filter('.' + settings.className.active),
              width       = $activeSide.outerWidth(true),
              height      = $activeSide.outerHeight(true)
            ;
            $module
              .css({
                width: width,
                height: height
            ***REMOVED***)
            ;
   ***REMOVED*****REMOVED***

          stageSize: function() {
            var
              $clone      = $module.clone().addClass(className.loading),
              $side       = $clone.find('>' + selector.sides + '>' + selector.side),
              $activeSide = $side.filter('.' + settings.className.active),
              $nextSide   = (nextIndex)
                ? $side.eq(nextIndex)
                : ( $activeSide.next(selector.side).length > 0 )
                  ? $activeSide.next(selector.side)
                  : $side.first(),
              newWidth    = (settings.width === 'next')
                ? $nextSide.outerWidth(true)
                : (settings.width === 'initial')
                  ? $module.width()
                  : settings.width,
              newHeight    = (settings.height === 'next')
                ? $nextSide.outerHeight(true)
                : (settings.height === 'initial')
                  ? $module.height()
                  : settings.height
            ;
            $activeSide.removeClass(className.active);
            $nextSide.addClass(className.active);
            $clone.insertAfter($module);
            $clone.remove();
            if(settings.width !== 'auto') {
              $module.css('width', newWidth + settings.jitter);
              module.verbose('Specifying width during animation', newWidth);
          ***REMOVED***
            if(settings.height !== 'auto') {
              $module.css('height', newHeight + settings.jitter);
              module.verbose('Specifying height during animation', newHeight);
          ***REMOVED***
   ***REMOVED*****REMOVED***

          nextSide: function(selector) {
            nextIndex = selector;
            $nextSide = $side.filter(selector);
            nextIndex = $side.index($nextSide);
            if($nextSide.length === 0) {
              module.set.defaultSide();
              module.error(error.side);
          ***REMOVED***
            module.verbose('Next side manually set to', $nextSide);
   ***REMOVED*****REMOVED***

          active: function() {
            module.verbose('Setting new side to active', $nextSide);
            $side
              .removeClass(className.active)
            ;
            $nextSide
              .addClass(className.active)
            ;
            settings.onChange.call($nextSide[0]);
            module.set.defaultSide();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        flip: {
          to: function(type,stage){
            if(module.is.hidden()) {
              module.debug('Module not visible', $nextSide);
              return;
          ***REMOVED***
            if(module.is.complete() && !module.is.animating() && !settings.allowRepeats) {
              module.debug('Side already visible', $nextSide);
              return;
          ***REMOVED***
            var
              transform = module.get.transform[type]()
            ;
            if( !module.is.animating()) {
              module.debug('Flipping '+type, $nextSide);
              module.set.stageSize();
              module.stage[stage]();
              module.animate(transform);
          ***REMOVED***
            else {
              module.queue('flip '+type);
          ***REMOVED***
   ***REMOVED*****REMOVED***

          up: function() {
            module.flip.to('up','above');
   ***REMOVED*****REMOVED***

          down: function() {
            module.flip.to('down','below');
   ***REMOVED*****REMOVED***

          left: function() {
            module.flip.to('left','left');
   ***REMOVED*****REMOVED***

          right: function() {
            module.flip.to('right','right');
   ***REMOVED*****REMOVED***

          over: function() {
            module.flip.to('over','behind');
   ***REMOVED*****REMOVED***

          back: function() {
            module.flip.to('back','behind');
        ***REMOVED***

 ***REMOVED*****REMOVED***

        get: {

          transform: {
            up: function() {
              var
                    translateZ = $activeSide.outerHeight(true) / 2,
                translateY = $nextSide.outerHeight(true) - translateZ
              ;
              return {
                transform: 'translateY(' + translateY + 'px) translateZ(-'+ translateZ + 'px) rotateX(-90deg)'
            ***REMOVED***;
***REMOVED*****REMOVED*****REMOVED***

            down: function() {
              var
                translate = {
                  z: $activeSide.outerHeight(true) / 2
              ***REMOVED***
              ;
              return {
                transform: 'translateY(-' + translate.z + 'px) translateZ(-'+ translate.z + 'px) rotateX(90deg)'
            ***REMOVED***;
***REMOVED*****REMOVED*****REMOVED***

            left: function() {
              var
                  translateZ = $activeSide.outerWidth(true) / 2,
                  translateX = $nextSide.outerWidth(true) - translateZ
              ;
              return {
                transform: 'translateX(' + translateX + 'px) translateZ(-' + translateZ + 'px) rotateY(90deg)'
            ***REMOVED***;
***REMOVED*****REMOVED*****REMOVED***

            right: function() {
              var
                translate = {
                  z : $activeSide.outerWidth(true) / 2
              ***REMOVED***
              ;
              return {
                transform: 'translateX(-' + translate.z + 'px) translateZ(-' + translate.z + 'px) rotateY(-90deg)'
            ***REMOVED***;
***REMOVED*****REMOVED*****REMOVED***

            over: function() {
              var
                translate = {
                  x : -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2)
              ***REMOVED***
              ;
              return {
                transform: 'translateX(' + translate.x + 'px) rotateY(180deg)'
            ***REMOVED***;
***REMOVED*****REMOVED*****REMOVED***

            back: function() {
              var
                translate = {
                  x : -(($activeSide.outerWidth(true) - $nextSide.outerWidth(true)) / 2)
              ***REMOVED***
              ;
              return {
                transform: 'translateX(' + translate.x + 'px) rotateY(-180deg)'
            ***REMOVED***;
          ***REMOVED***
   ***REMOVED*****REMOVED***

          transitionEvent: function() {
            var
              element     = document.createElement('element'),
              transitions = {
                'transition'       :'transitionend',
                'OTransition'      :'oTransitionEnd',
                'MozTransition'    :'transitionend',
                'WebkitTransition' :'webkitTransitionEnd'
  ***REMOVED*****REMOVED*****REMOVED***
              transition
            ;
            for(transition in transitions){
              if( element.style[transition] !== undefined ){
                return transitions[transition];
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***

          nextSide: function() {
            return ( $activeSide.next(selector.side).length > 0 )
              ? $activeSide.next(selector.side)
              : $side.first()
            ;
        ***REMOVED***

 ***REMOVED*****REMOVED***

        stage: {

          above: function() {
            var
              box = {
                origin : (($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),
                depth  : {
                  active : ($nextSide.outerHeight(true) / 2),
                  next   : ($activeSide.outerHeight(true) / 2)
              ***REMOVED***
            ***REMOVED***
            ;
            module.verbose('Setting the initial animation position as above', $nextSide, box);
            $activeSide
              .css({
                'transform' : 'rotateX(0deg)'
            ***REMOVED***)
            ;
            $nextSide
              .addClass(className.animating)
              .css({
                'top'       : box.origin + 'px',
                'transform' : 'rotateX(90deg) translateZ(' + box.depth.next + 'px) translateY(-' + box.depth.active + 'px)'
            ***REMOVED***)
            ;
   ***REMOVED*****REMOVED***

          below: function() {
            var
              box = {
                origin : (($activeSide.outerHeight(true) - $nextSide.outerHeight(true)) / 2),
                depth  : {
                  active : ($nextSide.outerHeight(true) / 2),
                  next   : ($activeSide.outerHeight(true) / 2)
              ***REMOVED***
            ***REMOVED***
            ;
            module.verbose('Setting the initial animation position as below', $nextSide, box);
            $activeSide
              .css({
                'transform' : 'rotateX(0deg)'
            ***REMOVED***)
            ;
            $nextSide
              .addClass(className.animating)
              .css({
                'top'       : box.origin + 'px',
                'transform' : 'rotateX(-90deg) translateZ(' + box.depth.next + 'px) translateY(' + box.depth.active + 'px)'
            ***REMOVED***)
            ;
   ***REMOVED*****REMOVED***

          left: function() {
            var
              height = {
                active : $activeSide.outerWidth(true),
                next   : $nextSide.outerWidth(true)
  ***REMOVED*****REMOVED*****REMOVED***
              box = {
                origin : ( ( height.active - height.next ) / 2),
                depth  : {
                  active : (height.next / 2),
                  next   : (height.active / 2)
              ***REMOVED***
            ***REMOVED***
            ;
            module.verbose('Setting the initial animation position as left', $nextSide, box);
            $activeSide
              .css({
                'transform' : 'rotateY(0deg)'
            ***REMOVED***)
            ;
            $nextSide
              .addClass(className.animating)
              .css({
                'left'      : box.origin + 'px',
                'transform' : 'rotateY(-90deg) translateZ(' + box.depth.next + 'px) translateX(-' + box.depth.active + 'px)'
            ***REMOVED***)
            ;
   ***REMOVED*****REMOVED***

          right: function() {
            var
              height = {
                active : $activeSide.outerWidth(true),
                next   : $nextSide.outerWidth(true)
  ***REMOVED*****REMOVED*****REMOVED***
              box = {
                origin : ( ( height.active - height.next ) / 2),
                depth  : {
                  active : (height.next / 2),
                  next   : (height.active / 2)
              ***REMOVED***
            ***REMOVED***
            ;
            module.verbose('Setting the initial animation position as right', $nextSide, box);
            $activeSide
              .css({
                'transform' : 'rotateY(0deg)'
            ***REMOVED***)
            ;
            $nextSide
              .addClass(className.animating)
              .css({
                'left'      : box.origin + 'px',
                'transform' : 'rotateY(90deg) translateZ(' + box.depth.next + 'px) translateX(' + box.depth.active + 'px)'
            ***REMOVED***)
            ;
   ***REMOVED*****REMOVED***

          behind: function() {
            var
              height = {
                active : $activeSide.outerWidth(true),
                next   : $nextSide.outerWidth(true)
  ***REMOVED*****REMOVED*****REMOVED***
              box = {
                origin : ( ( height.active - height.next ) / 2),
                depth  : {
                  active : (height.next / 2),
                  next   : (height.active / 2)
              ***REMOVED***
            ***REMOVED***
            ;
            module.verbose('Setting the initial animation position as behind', $nextSide, box);
            $activeSide
              .css({
                'transform' : 'rotateY(0deg)'
            ***REMOVED***)
            ;
            $nextSide
              .addClass(className.animating)
              .css({
                'left'      : box.origin + 'px',
                'transform' : 'rotateY(-180deg)'
            ***REMOVED***)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***
        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            if($.isPlainObject(settings[name])) {
              $.extend(true, settings[name], value);
          ***REMOVED***
            else {
              settings[name] = value;
          ***REMOVED***
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***
          if(Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***;

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
      ***REMOVED***
        var $inputs = $module.find('input');
        if( $inputs.length > 0) {
          $inputs.blur();
          setTimeout(function(){
            module.invoke(query);
   ***REMOVED*****REMOVED*** 150);
      ***REMOVED*** else {
          module.invoke(query);
      ***REMOVED***
    ***REMOVED***
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
      ***REMOVED***
        module.initialize();
    ***REMOVED***
  ***REMOVED***)
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
***REMOVED***;

$.fn.shape.settings = {

  // module info
  name : 'Shape',

  // hide all debug content
  silent     : false,

  // debug content outputted to console
  debug      : false,

  // verbose debug output
  verbose    : false,

  // fudge factor in pixels when swapping from 2d to 3d (can be useful to correct rounding errors)
  jitter     : 0,

  // performance data output
  performance: true,

  // event namespace
  namespace  : 'shape',

  // width during animation, can be set to 'auto', initial', 'next' or pixel amount
  width: 'initial',

  // height during animation, can be set to 'auto', 'initial', 'next' or pixel amount
  height: 'initial',

  // callback occurs on side change
  beforeChange : function() {***REMOVED***,
  onChange     : function() {***REMOVED***,

  // allow animation to same side
  allowRepeats: false,

  // animation duration
  duration   : false,

  // possible errors
  error: {
    side   : 'You tried to switch to a side that does not exist.',
    method : 'The method you called is not defined'
***REMOVED***

  // classnames used
  className   : {
    animating : 'animating',
    hidden    : 'hidden',
    loading   : 'loading',
    active    : 'active'
***REMOVED***

  // selectors used
  selector    : {
    sides : '.sides',
    side  : '.side'
***REMOVED***

***REMOVED***;


***REMOVED***)( jQuery, window, document );

/*!
***REMOVED*** # Fomantic-UI - Sidebar
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

***REMOVED***;

$.isFunction = $.isFunction || function(obj) {
  return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.sidebar = function(parameters) {
  var
    $allModules     = $(this),
    $window         = $(window),
    $document       = $(document),
    $html           = $('html'),
    $head           = $('head'),

    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    requestAnimationFrame = window.requestAnimationFrame
      || window.mozRequestAnimationFrame
      || window.webkitRequestAnimationFrame
      || window.msRequestAnimationFrame
      || function(callback) { setTimeout(callback, 0); ***REMOVED***,

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {***REMOVED***, $.fn.sidebar.settings, parameters)
          : $.extend({***REMOVED***, $.fn.sidebar.settings),

        selector        = settings.selector,
        className       = settings.className,
        namespace       = settings.namespace,
        regExp          = settings.regExp,
        error           = settings.error,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $module         = $(this),
        $context        = $(settings.context),

        $sidebars       = $module.children(selector.sidebar),
        $fixed          = $context.children(selector.fixed),
        $pusher         = $context.children(selector.pusher),
        $style,

        element         = this,
        instance        = $module.data(moduleNamespace),

        elementNamespace,
        id,
        currentScroll,
        transitionEvent,

        module
      ;

      module      = {

        initialize: function() {
          module.debug('Initializing sidebar', parameters);

          module.create.id();

          transitionEvent = module.get.transitionEvent();

          // avoids locking rendering if initialized in onReady
          if(settings.delaySetup) {
            requestAnimationFrame(module.setup.layout);
        ***REMOVED***
          else {
            module.setup.layout();
        ***REMOVED***

          requestAnimationFrame(function() {
            module.setup.cache();
        ***REMOVED***);

          module.instantiate();
 ***REMOVED*****REMOVED***

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
 ***REMOVED*****REMOVED***

        create: {
          id: function() {
            id = (Math.random().toString(16) + '000000000').substr(2,8);
            elementNamespace = '.' + id;
            module.verbose('Creating unique id for element', id);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        destroy: function() {
          module.verbose('Destroying previous module for', $module);
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
          if(module.is.ios()) {
            module.remove.ios();
        ***REMOVED***
          // bound by uuid
          $context.off(elementNamespace);
          $window.off(elementNamespace);
          $document.off(elementNamespace);
 ***REMOVED*****REMOVED***

        event: {
          clickaway: function(event) {
            if(settings.closable){
              var
                clickedInPusher = ($pusher.find(event.target).length > 0 || $pusher.is(event.target)),
                clickedContext  = ($context.is(event.target))
              ;
              if(clickedInPusher) {
                module.verbose('User clicked on dimmed page');
                module.hide();
            ***REMOVED***
              if(clickedContext) {
                module.verbose('User clicked on dimmable context (scaled out page)');
                module.hide();
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***
          touch: function(event) {
            //event.stopPropagation();
   ***REMOVED*****REMOVED***
          containScroll: function(event) {
            if(element.scrollTop <= 0)  {
              element.scrollTop = 1;
          ***REMOVED***
            if((element.scrollTop + element.offsetHeight) >= element.scrollHeight) {
              element.scrollTop = element.scrollHeight - element.offsetHeight - 1;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          scroll: function(event) {
            if( $(event.target).closest(selector.sidebar).length === 0 ) {
              event.preventDefault();
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        bind: {
          clickaway: function() {
            module.verbose('Adding clickaway events to context', $context);
            $context
              .on('click'    + elementNamespace, module.event.clickaway)
              .on('touchend' + elementNamespace, module.event.clickaway)
            ;
   ***REMOVED*****REMOVED***
          scrollLock: function() {
            if(settings.scrollLock) {
              module.debug('Disabling page scroll');
              $window
                .on('DOMMouseScroll' + elementNamespace, module.event.scroll)
              ;
          ***REMOVED***
            module.verbose('Adding events to contain sidebar scroll');
            $document
              .on('touchmove' + elementNamespace, module.event.touch)
            ;
            $module
              .on('scroll' + eventNamespace, module.event.containScroll)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***
        unbind: {
          clickaway: function() {
            module.verbose('Removing clickaway events from context', $context);
            $context.off(elementNamespace);
   ***REMOVED*****REMOVED***
          scrollLock: function() {
            module.verbose('Removing scroll lock from page');
            $document.off(elementNamespace);
            $window.off(elementNamespace);
            $module.off('scroll' + eventNamespace);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        add: {
          inlineCSS: function() {
            var
              width     = module.cache.width  || $module.outerWidth(),
              height    = module.cache.height || $module.outerHeight(),
              isRTL     = module.is.rtl(),
              direction = module.get.direction(),
              distance  = {
                left   : width,
                right  : -width,
                top    : height,
                bottom : -height
  ***REMOVED*****REMOVED*****REMOVED***
              style
            ;

            if(isRTL){
              module.verbose('RTL detected, flipping widths');
              distance.left = -width;
              distance.right = width;
          ***REMOVED***

            style  = '<style>';

            if(direction === 'left' || direction === 'right') {
              module.debug('Adding CSS rules for animation distance', width);
              style  += ''
                + ' .ui.visible.' + direction + '.sidebar ~ .fixed,'
                + ' .ui.visible.' + direction + '.sidebar ~ .pusher {'
                + '   -webkit-transform: translate3d('+ distance[direction] + 'px, 0, 0);'
                + '           transform: translate3d('+ distance[direction] + 'px, 0, 0);'
                + ' ***REMOVED***'
              ;
          ***REMOVED***
            else if(direction === 'top' || direction == 'bottom') {
              style  += ''
                + ' .ui.visible.' + direction + '.sidebar ~ .fixed,'
                + ' .ui.visible.' + direction + '.sidebar ~ .pusher {'
                + '   -webkit-transform: translate3d(0, ' + distance[direction] + 'px, 0);'
                + '           transform: translate3d(0, ' + distance[direction] + 'px, 0);'
                + ' ***REMOVED***'
              ;
          ***REMOVED***

            /* IE is only browser not to create context with transforms***REMOVED***/
            /* https://www.w3.org/Bugs/Public/show_bug.cgi?id=16328***REMOVED***/
            if( module.is.ie() ) {
              if(direction === 'left' || direction === 'right') {
                module.debug('Adding CSS rules for animation distance', width);
                style  += ''
                  + ' body.pushable > .ui.visible.' + direction + '.sidebar ~ .pusher:after {'
                  + '   -webkit-transform: translate3d('+ distance[direction] + 'px, 0, 0);'
                  + '           transform: translate3d('+ distance[direction] + 'px, 0, 0);'
                  + ' ***REMOVED***'
                ;
            ***REMOVED***
              else if(direction === 'top' || direction == 'bottom') {
                style  += ''
                  + ' body.pushable > .ui.visible.' + direction + '.sidebar ~ .pusher:after {'
                  + '   -webkit-transform: translate3d(0, ' + distance[direction] + 'px, 0);'
                  + '           transform: translate3d(0, ' + distance[direction] + 'px, 0);'
                  + ' ***REMOVED***'
                ;
            ***REMOVED***
              /* opposite sides visible forces content overlay***REMOVED***/
              style += ''
                + ' body.pushable > .ui.visible.left.sidebar ~ .ui.visible.right.sidebar ~ .pusher:after,'
                + ' body.pushable > .ui.visible.right.sidebar ~ .ui.visible.left.sidebar ~ .pusher:after {'
                + '   -webkit-transform: translate3d(0, 0, 0);'
                + '           transform: translate3d(0, 0, 0);'
                + ' ***REMOVED***'
              ;
          ***REMOVED***
            style += '</style>';
            $style = $(style)
              .appendTo($head)
            ;
            module.debug('Adding sizing css to head', $style);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        refresh: function() {
          module.verbose('Refreshing selector cache');
          $context  = $(settings.context);
          $sidebars = $context.children(selector.sidebar);
          $pusher   = $context.children(selector.pusher);
          $fixed    = $context.children(selector.fixed);
          module.clear.cache();
 ***REMOVED*****REMOVED***

        refreshSidebars: function() {
          module.verbose('Refreshing other sidebars');
          $sidebars = $context.children(selector.sidebar);
 ***REMOVED*****REMOVED***

        repaint: function() {
          module.verbose('Forcing repaint event');
          element.style.display = 'none';
          var ignored = element.offsetHeight;
          element.scrollTop = element.scrollTop;
          element.style.display = '';
 ***REMOVED*****REMOVED***

        setup: {
          cache: function() {
            module.cache = {
              width  : $module.outerWidth(),
              height : $module.outerHeight()
          ***REMOVED***;
   ***REMOVED*****REMOVED***
          layout: function() {
            if( $context.children(selector.pusher).length === 0 ) {
              module.debug('Adding wrapper element for sidebar');
              module.error(error.pusher);
              $pusher = $('<div class="pusher" />');
              $context
                .children()
                  .not(selector.omitted)
                  .not($sidebars)
                  .wrapAll($pusher)
              ;
              module.refresh();
          ***REMOVED***
            if($module.nextAll(selector.pusher).length === 0 || $module.nextAll(selector.pusher)[0] !== $pusher[0]) {
              module.debug('Moved sidebar to correct parent element');
              module.error(error.movedSidebar, element);
              $module.detach().prependTo($context);
              module.refresh();
          ***REMOVED***
            module.clear.cache();
            module.set.pushable();
            module.set.direction();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        attachEvents: function(selector, event) {
          var
            $toggle = $(selector)
          ;
          event = $.isFunction(module[event])
            ? module[event]
            : module.toggle
          ;
          if($toggle.length > 0) {
            module.debug('Attaching sidebar events to element', selector, event);
            $toggle
              .on('click' + eventNamespace, event)
            ;
        ***REMOVED***
          else {
            module.error(error.notFound, selector);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        show: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){***REMOVED***
          ;
          if(module.is.hidden()) {
            module.refreshSidebars();
            if(settings.overlay)  {
              module.error(error.overlay);
              settings.transition = 'overlay';
          ***REMOVED***
            module.refresh();
            if(module.othersActive()) {
              module.debug('Other sidebars currently visible');
              if(settings.exclusive) {
                // if not overlay queue animation after hide
                if(settings.transition != 'overlay') {
                  module.hideOthers(module.show);
                  return;
              ***REMOVED***
                else {
                  module.hideOthers();
              ***REMOVED***
            ***REMOVED***
              else {
                settings.transition = 'overlay';
            ***REMOVED***
          ***REMOVED***
            module.pushPage(function() {
              callback.call(element);
              settings.onShow.call(element);
          ***REMOVED***);
            settings.onChange.call(element);
            settings.onVisible.call(element);
        ***REMOVED***
          else {
            module.debug('Sidebar is already visible');
        ***REMOVED***
 ***REMOVED*****REMOVED***

        hide: function(callback) {
          callback = $.isFunction(callback)
            ? callback
            : function(){***REMOVED***
          ;
          if(module.is.visible() || module.is.animating()) {
            module.debug('Hiding sidebar', callback);
            module.refreshSidebars();
            module.pullPage(function() {
              callback.call(element);
              settings.onHidden.call(element);
          ***REMOVED***);
            settings.onChange.call(element);
            settings.onHide.call(element);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        othersAnimating: function() {
          return ($sidebars.not($module).filter('.' + className.animating).length > 0);
 ***REMOVED*****REMOVED***
        othersVisible: function() {
          return ($sidebars.not($module).filter('.' + className.visible).length > 0);
 ***REMOVED*****REMOVED***
        othersActive: function() {
          return(module.othersVisible() || module.othersAnimating());
 ***REMOVED*****REMOVED***

        hideOthers: function(callback) {
          var
            $otherSidebars = $sidebars.not($module).filter('.' + className.visible),
            sidebarCount   = $otherSidebars.length,
            callbackCount  = 0
          ;
          callback = callback || function(){***REMOVED***;
          $otherSidebars
            .sidebar('hide', function() {
              callbackCount++;
              if(callbackCount == sidebarCount) {
                callback();
            ***REMOVED***
          ***REMOVED***)
          ;
 ***REMOVED*****REMOVED***

        toggle: function() {
          module.verbose('Determining toggled direction');
          if(module.is.hidden()) {
            module.show();
        ***REMOVED***
          else {
            module.hide();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        pushPage: function(callback) {
          var
            transition = module.get.transition(),
            $transition = (transition === 'overlay' || module.othersActive())
              ? $module
              : $pusher,
            animate,
            dim,
            transitionEnd
          ;
          callback = $.isFunction(callback)
            ? callback
            : function(){***REMOVED***
          ;
          if(settings.transition == 'scale down') {
            module.scrollToTop();
        ***REMOVED***
          module.set.transition(transition);
          module.repaint();
          animate = function() {
            module.bind.clickaway();
            module.add.inlineCSS();
            module.set.animating();
            module.set.visible();
        ***REMOVED***;
          dim = function() {
            module.set.dimmed();
        ***REMOVED***;
          transitionEnd = function(event) {
            if( event.target == $transition[0] ) {
              $transition.off(transitionEvent + elementNamespace, transitionEnd);
              module.remove.animating();
              module.bind.scrollLock();
              callback.call(element);
          ***REMOVED***
        ***REMOVED***;
          $transition.off(transitionEvent + elementNamespace);
          $transition.on(transitionEvent + elementNamespace, transitionEnd);
          requestAnimationFrame(animate);
          if(settings.dimPage && !module.othersVisible()) {
            requestAnimationFrame(dim);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        pullPage: function(callback) {
          var
            transition = module.get.transition(),
            $transition = (transition == 'overlay' || module.othersActive())
              ? $module
              : $pusher,
            animate,
            transitionEnd
          ;
          callback = $.isFunction(callback)
            ? callback
            : function(){***REMOVED***
          ;
          module.verbose('Removing context push state', module.get.direction());

          module.unbind.clickaway();
          module.unbind.scrollLock();

          animate = function() {
            module.set.transition(transition);
            module.set.animating();
            module.remove.visible();
            if(settings.dimPage && !module.othersVisible()) {
              $pusher.removeClass(className.dimmed);
          ***REMOVED***
        ***REMOVED***;
          transitionEnd = function(event) {
            if( event.target == $transition[0] ) {
              $transition.off(transitionEvent + elementNamespace, transitionEnd);
              module.remove.animating();
              module.remove.transition();
              module.remove.inlineCSS();
              if(transition == 'scale down' || (settings.returnScroll && module.is.mobile()) ) {
                module.scrollBack();
            ***REMOVED***
              callback.call(element);
          ***REMOVED***
        ***REMOVED***;
          $transition.off(transitionEvent + elementNamespace);
          $transition.on(transitionEvent + elementNamespace, transitionEnd);
          requestAnimationFrame(animate);
 ***REMOVED*****REMOVED***

        scrollToTop: function() {
          module.verbose('Scrolling to top of page to avoid animation issues');
          currentScroll = $(window).scrollTop();
          $module.scrollTop(0);
          window.scrollTo(0, 0);
 ***REMOVED*****REMOVED***

        scrollBack: function() {
          module.verbose('Scrolling back to original page position');
          window.scrollTo(0, currentScroll);
 ***REMOVED*****REMOVED***

        clear: {
          cache: function() {
            module.verbose('Clearing cached dimensions');
            module.cache = {***REMOVED***;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        set: {

          // ios only (scroll on html not document). This prevent auto-resize canvas/scroll in ios
          // (This is no longer necessary in latest iOS)
          ios: function() {
            $html.addClass(className.ios);
   ***REMOVED*****REMOVED***

          // container
          pushed: function() {
            $context.addClass(className.pushed);
   ***REMOVED*****REMOVED***
          pushable: function() {
            $context.addClass(className.pushable);
   ***REMOVED*****REMOVED***

          // pusher
          dimmed: function() {
            $pusher.addClass(className.dimmed);
   ***REMOVED*****REMOVED***

          // sidebar
          active: function() {
            $module.addClass(className.active);
   ***REMOVED*****REMOVED***
          animating: function() {
            $module.addClass(className.animating);
   ***REMOVED*****REMOVED***
          transition: function(transition) {
            transition = transition || module.get.transition();
            $module.addClass(transition);
   ***REMOVED*****REMOVED***
          direction: function(direction) {
            direction = direction || module.get.direction();
            $module.addClass(className[direction]);
   ***REMOVED*****REMOVED***
          visible: function() {
            $module.addClass(className.visible);
   ***REMOVED*****REMOVED***
          overlay: function() {
            $module.addClass(className.overlay);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        remove: {

          inlineCSS: function() {
            module.debug('Removing inline css styles', $style);
            if($style && $style.length > 0) {
              $style.remove();
          ***REMOVED***
   ***REMOVED*****REMOVED***

          // ios scroll on html not document
          ios: function() {
            $html.removeClass(className.ios);
   ***REMOVED*****REMOVED***

          // context
          pushed: function() {
            $context.removeClass(className.pushed);
   ***REMOVED*****REMOVED***
          pushable: function() {
            $context.removeClass(className.pushable);
   ***REMOVED*****REMOVED***

          // sidebar
          active: function() {
            $module.removeClass(className.active);
   ***REMOVED*****REMOVED***
          animating: function() {
            $module.removeClass(className.animating);
   ***REMOVED*****REMOVED***
          transition: function(transition) {
            transition = transition || module.get.transition();
            $module.removeClass(transition);
   ***REMOVED*****REMOVED***
          direction: function(direction) {
            direction = direction || module.get.direction();
            $module.removeClass(className[direction]);
   ***REMOVED*****REMOVED***
          visible: function() {
            $module.removeClass(className.visible);
   ***REMOVED*****REMOVED***
          overlay: function() {
            $module.removeClass(className.overlay);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        get: {
          direction: function() {
            if($module.hasClass(className.top)) {
              return className.top;
          ***REMOVED***
            else if($module.hasClass(className.right)) {
              return className.right;
          ***REMOVED***
            else if($module.hasClass(className.bottom)) {
              return className.bottom;
          ***REMOVED***
            return className.left;
   ***REMOVED*****REMOVED***
          transition: function() {
            var
              direction = module.get.direction(),
              transition
            ;
            transition = ( module.is.mobile() )
              ? (settings.mobileTransition == 'auto')
                ? settings.defaultTransition.mobile[direction]
                : settings.mobileTransition
              : (settings.transition == 'auto')
                ? settings.defaultTransition.computer[direction]
                : settings.transition
            ;
            module.verbose('Determined transition', transition);
            return transition;
   ***REMOVED*****REMOVED***
          transitionEvent: function() {
            var
              element     = document.createElement('element'),
              transitions = {
                'transition'       :'transitionend',
                'OTransition'      :'oTransitionEnd',
                'MozTransition'    :'transitionend',
                'WebkitTransition' :'webkitTransitionEnd'
  ***REMOVED*****REMOVED*****REMOVED***
              transition
            ;
            for(transition in transitions){
              if( element.style[transition] !== undefined ){
                return transitions[transition];
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        is: {

          ie: function() {
            var
              isIE11 = (!(window.ActiveXObject) && 'ActiveXObject' in window),
              isIE   = ('ActiveXObject' in window)
            ;
            return (isIE11 || isIE);
   ***REMOVED*****REMOVED***

          ios: function() {
            var
              userAgent      = navigator.userAgent,
              isIOS          = userAgent.match(regExp.ios),
              isMobileChrome = userAgent.match(regExp.mobileChrome)
            ;
            if(isIOS && !isMobileChrome) {
              module.verbose('Browser was found to be iOS', userAgent);
              return true;
          ***REMOVED***
            else {
              return false;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          mobile: function() {
            var
              userAgent    = navigator.userAgent,
              isMobile     = userAgent.match(regExp.mobile)
            ;
            if(isMobile) {
              module.verbose('Browser was found to be mobile', userAgent);
              return true;
          ***REMOVED***
            else {
              module.verbose('Browser is not mobile, using regular transition', userAgent);
              return false;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          hidden: function() {
            return !module.is.visible();
   ***REMOVED*****REMOVED***
          visible: function() {
            return $module.hasClass(className.visible);
   ***REMOVED*****REMOVED***
          // alias
          open: function() {
            return module.is.visible();
   ***REMOVED*****REMOVED***
          closed: function() {
            return module.is.hidden();
   ***REMOVED*****REMOVED***
          vertical: function() {
            return $module.hasClass(className.top);
   ***REMOVED*****REMOVED***
          animating: function() {
            return $context.hasClass(className.animating);
   ***REMOVED*****REMOVED***
          rtl: function () {
            if(module.cache.rtl === undefined) {
              module.cache.rtl = $module.attr('dir') === 'rtl' || $module.css('direction') === 'rtl';
          ***REMOVED***
            return module.cache.rtl;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            if($.isPlainObject(settings[name])) {
              $.extend(true, settings[name], value);
          ***REMOVED***
            else {
              settings[name] = value;
          ***REMOVED***
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                module.error(error.method, query);
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***
          if(Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***
    ;

    if(methodInvoked) {
      if(instance === undefined) {
        module.initialize();
    ***REMOVED***
      module.invoke(query);
  ***REMOVED***
    else {
      if(instance !== undefined) {
        module.invoke('destroy');
    ***REMOVED***
      module.initialize();
  ***REMOVED***
***REMOVED***);

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
***REMOVED***;

$.fn.sidebar.settings = {

  name              : 'Sidebar',
  namespace         : 'sidebar',

  silent            : false,
  debug             : false,
  verbose           : false,
  performance       : true,

  transition        : 'auto',
  mobileTransition  : 'auto',

  defaultTransition : {
    computer: {
      left   : 'uncover',
      right  : 'uncover',
      top    : 'overlay',
      bottom : 'overlay'
  ***REMOVED***
    mobile: {
      left   : 'uncover',
      right  : 'uncover',
      top    : 'overlay',
      bottom : 'overlay'
  ***REMOVED***
***REMOVED***

  context           : 'body',
  exclusive         : false,
  closable          : true,
  dimPage           : true,
  scrollLock        : false,
  returnScroll      : false,
  delaySetup        : false,

  duration          : 500,

  onChange          : function(){***REMOVED***,
  onShow            : function(){***REMOVED***,
  onHide            : function(){***REMOVED***,

  onHidden          : function(){***REMOVED***,
  onVisible         : function(){***REMOVED***,

  className         : {
    active    : 'active',
    animating : 'animating',
    dimmed    : 'dimmed',
    ios       : 'ios',
    pushable  : 'pushable',
    pushed    : 'pushed',
    right     : 'right',
    top       : 'top',
    left      : 'left',
    bottom    : 'bottom',
    visible   : 'visible'
***REMOVED***

  selector: {
    fixed   : '.fixed',
    omitted : 'script, link, style, .ui.modal, .ui.dimmer, .ui.nag, .ui.fixed',
    pusher  : '.pusher',
    sidebar : '.ui.sidebar'
***REMOVED***

  regExp: {
    ios          : /(iPad|iPhone|iPod)/g,
    mobileChrome : /(CriOS)/g,
    mobile       : /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|NetFront|Silk-Accelerated|(hpw|web)OS|Fennec|Minimo|Opera M(obi|ini)|Blazer|Dolfin|Dolphin|Skyfire|Zune/g
***REMOVED***

  error   : {
    method       : 'The method you called is not defined.',
    pusher       : 'Had to add pusher element. For optimal performance make sure body content is inside a pusher element',
    movedSidebar : 'Had to move sidebar. For optimal performance make sure sidebar and pusher are direct children of your body tag',
    overlay      : 'The overlay setting is no longer supported, use animation: overlay',
    notFound     : 'There were no elements that matched the specified selector'
***REMOVED***

***REMOVED***;


***REMOVED***)( jQuery, window, document );

/*!
***REMOVED*** # Fomantic-UI - Sticky
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

***REMOVED***;

$.isFunction = $.isFunction || function(obj) {
  return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.sticky = function(parameters) {
  var
    $allModules    = $(this),
    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings              = ( $.isPlainObject(parameters) )
          ? $.extend(true, {***REMOVED***, $.fn.sticky.settings, parameters)
          : $.extend({***REMOVED***, $.fn.sticky.settings),

        className             = settings.className,
        namespace             = settings.namespace,
        error                 = settings.error,

        eventNamespace        = '.' + namespace,
        moduleNamespace       = 'module-' + namespace,

        $module               = $(this),
        $window               = $(window),
        $scroll               = $(settings.scrollContext),
        $container,
        $context,

        instance              = $module.data(moduleNamespace),

        requestAnimationFrame = window.requestAnimationFrame
          || window.mozRequestAnimationFrame
          || window.webkitRequestAnimationFrame
          || window.msRequestAnimationFrame
          || function(callback) { setTimeout(callback, 0); ***REMOVED***,

        element         = this,

        documentObserver,
        observer,
        module
      ;

      module      = {

        initialize: function() {

          module.determineContainer();
          module.determineContext();
          module.verbose('Initializing sticky', settings, $container);

          module.save.positions();
          module.checkErrors();
          module.bind.events();

          if(settings.observeChanges) {
            module.observeChanges();
        ***REMOVED***
          module.instantiate();
 ***REMOVED*****REMOVED***

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
 ***REMOVED*****REMOVED***

        destroy: function() {
          module.verbose('Destroying previous instance');
          module.reset();
          if(documentObserver) {
            documentObserver.disconnect();
        ***REMOVED***
          if(observer) {
            observer.disconnect();
        ***REMOVED***
          $window
            .off('load' + eventNamespace, module.event.load)
            .off('resize' + eventNamespace, module.event.resize)
          ;
          $scroll
            .off('scrollchange' + eventNamespace, module.event.scrollchange)
          ;
          $module.removeData(moduleNamespace);
 ***REMOVED*****REMOVED***

        observeChanges: function() {
          if('MutationObserver' in window) {
            documentObserver = new MutationObserver(module.event.documentChanged);
            observer         = new MutationObserver(module.event.changed);
            documentObserver.observe(document, {
              childList : true,
              subtree   : true
          ***REMOVED***);
            observer.observe(element, {
              childList : true,
              subtree   : true
          ***REMOVED***);
            observer.observe($context[0], {
              childList : true,
              subtree   : true
          ***REMOVED***);
            module.debug('Setting up mutation observer', observer);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        determineContainer: function() {
          if(settings.container) {
            $container = $(settings.container);
        ***REMOVED***
          else {
            $container = $module.offsetParent();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        determineContext: function() {
          if(settings.context) {
            $context = $(settings.context);
        ***REMOVED***
          else {
            $context = $container;
        ***REMOVED***
          if($context.length === 0) {
            module.error(error.invalidContext, settings.context, $module);
            return;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        checkErrors: function() {
          if( module.is.hidden() ) {
            module.error(error.visible, $module);
        ***REMOVED***
          if(module.cache.element.height > module.cache.context.height) {
            module.reset();
            module.error(error.elementSize, $module);
            return;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        bind: {
          events: function() {
            $window
              .on('load' + eventNamespace, module.event.load)
              .on('resize' + eventNamespace, module.event.resize)
            ;
            // pub/sub pattern
            $scroll
              .off('scroll' + eventNamespace)
              .on('scroll' + eventNamespace, module.event.scroll)
              .on('scrollchange' + eventNamespace, module.event.scrollchange)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        event: {
          changed: function(mutations) {
            clearTimeout(module.timer);
            module.timer = setTimeout(function() {
              module.verbose('DOM tree modified, updating sticky menu', mutations);
              module.refresh();
***REMOVED*****REMOVED*****REMOVED*** 100);
   ***REMOVED*****REMOVED***
          documentChanged: function(mutations) {
            [].forEach.call(mutations, function(mutation) {
              if(mutation.removedNodes) {
                [].forEach.call(mutation.removedNodes, function(node) {
                  if(node == element || $(node).find(element).length > 0) {
                    module.debug('Element removed from DOM, tearing down events');
                    module.destroy();
                ***REMOVED***
              ***REMOVED***);
            ***REMOVED***
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          load: function() {
            module.verbose('Page contents finished loading');
            requestAnimationFrame(module.refresh);
   ***REMOVED*****REMOVED***
          resize: function() {
            module.verbose('Window resized');
            requestAnimationFrame(module.refresh);
   ***REMOVED*****REMOVED***
          scroll: function() {
            requestAnimationFrame(function() {
              $scroll.triggerHandler('scrollchange' + eventNamespace, $scroll.scrollTop() );
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          scrollchange: function(event, scrollPosition) {
            module.stick(scrollPosition);
            settings.onScroll.call(element);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        refresh: function(hardRefresh) {
          module.reset();
          if(!settings.context) {
            module.determineContext();
        ***REMOVED***
          if(hardRefresh) {
            module.determineContainer();
        ***REMOVED***
          module.save.positions();
          module.stick();
          settings.onReposition.call(element);
 ***REMOVED*****REMOVED***

        supports: {
          sticky: function() {
            var
              $element = $('<div/>')
            ;
            $element.addClass(className.supported);
            return($element.css('position').match('sticky'));
        ***REMOVED***
 ***REMOVED*****REMOVED***

        save: {
          lastScroll: function(scroll) {
            module.lastScroll = scroll;
   ***REMOVED*****REMOVED***
          elementScroll: function(scroll) {
            module.elementScroll = scroll;
   ***REMOVED*****REMOVED***
          positions: function() {
            var
              scrollContext = {
                height : $scroll.height()
  ***REMOVED*****REMOVED*****REMOVED***
              element = {
                margin: {
                  top    : parseInt($module.css('margin-top'), 10),
                  bottom : parseInt($module.css('margin-bottom'), 10),
    ***REMOVED*****REMOVED*****REMOVED***
                offset : $module.offset(),
                width  : $module.outerWidth(),
                height : $module.outerHeight()
  ***REMOVED*****REMOVED*****REMOVED***
              context = {
                offset : $context.offset(),
                height : $context.outerHeight()
            ***REMOVED***
            ;
            if( !module.is.standardScroll() ) {
              module.debug('Non-standard scroll. Removing scroll offset from element offset');

              scrollContext.top  = $scroll.scrollTop();
              scrollContext.left = $scroll.scrollLeft();

              element.offset.top  += scrollContext.top;
              context.offset.top  += scrollContext.top;
              element.offset.left += scrollContext.left;
              context.offset.left += scrollContext.left;
          ***REMOVED***
            module.cache = {
              fits          : ( (element.height + settings.offset) <= scrollContext.height),
              sameHeight    : (element.height == context.height),
              scrollContext : {
                height : scrollContext.height
  ***REMOVED*****REMOVED*****REMOVED***
              element: {
                margin : element.margin,
                top    : element.offset.top - element.margin.top,
                left   : element.offset.left,
                width  : element.width,
                height : element.height,
                bottom : element.offset.top + element.height
  ***REMOVED*****REMOVED*****REMOVED***
              context: {
                top           : context.offset.top,
                height        : context.height,
                bottom        : context.offset.top + context.height
            ***REMOVED***
          ***REMOVED***;
            module.set.containerSize();

            module.stick();
            module.debug('Caching element positions', module.cache);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        get: {
          direction: function(scroll) {
            var
              direction = 'down'
            ;
            scroll = scroll || $scroll.scrollTop();
            if(module.lastScroll !== undefined) {
              if(module.lastScroll < scroll) {
                direction = 'down';
            ***REMOVED***
              else if(module.lastScroll > scroll) {
                direction = 'up';
            ***REMOVED***
          ***REMOVED***
            return direction;
   ***REMOVED*****REMOVED***
          scrollChange: function(scroll) {
            scroll = scroll || $scroll.scrollTop();
            return (module.lastScroll)
              ? (scroll - module.lastScroll)
              : 0
            ;
   ***REMOVED*****REMOVED***
          currentElementScroll: function() {
            if(module.elementScroll) {
              return module.elementScroll;
          ***REMOVED***
            return ( module.is.top() )
              ? Math.abs(parseInt($module.css('top'), 10))    || 0
              : Math.abs(parseInt($module.css('bottom'), 10)) || 0
            ;
   ***REMOVED*****REMOVED***

          elementScroll: function(scroll) {
            scroll = scroll || $scroll.scrollTop();
            var
              element        = module.cache.element,
              scrollContext  = module.cache.scrollContext,
              delta          = module.get.scrollChange(scroll),
              maxScroll      = (element.height - scrollContext.height + settings.offset),
              elementScroll  = module.get.currentElementScroll(),
              possibleScroll = (elementScroll + delta)
            ;
            if(module.cache.fits || possibleScroll < 0) {
              elementScroll = 0;
          ***REMOVED***
            else if(possibleScroll > maxScroll ) {
              elementScroll = maxScroll;
          ***REMOVED***
            else {
              elementScroll = possibleScroll;
          ***REMOVED***
            return elementScroll;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        remove: {
          lastScroll: function() {
            delete module.lastScroll;
   ***REMOVED*****REMOVED***
          elementScroll: function(scroll) {
            delete module.elementScroll;
   ***REMOVED*****REMOVED***
          minimumSize: function() {
            $container
              .css('min-height', '')
            ;
   ***REMOVED*****REMOVED***
          offset: function() {
            $module.css('margin-top', '');
        ***REMOVED***
 ***REMOVED*****REMOVED***

        set: {
          offset: function() {
            module.verbose('Setting offset on element', settings.offset);
            $module
              .css('margin-top', settings.offset)
            ;
   ***REMOVED*****REMOVED***
          containerSize: function() {
            var
              tagName = $container.get(0).tagName
            ;
            if(tagName === 'HTML' || tagName == 'body') {
              // this can trigger for too many reasons
              //module.error(error.container, tagName, $module);
              module.determineContainer();
          ***REMOVED***
            else {
              if( Math.abs($container.outerHeight() - module.cache.context.height) > settings.jitter) {
                module.debug('Context has padding, specifying exact height for container', module.cache.context.height);
                $container.css({
                  height: module.cache.context.height
              ***REMOVED***);
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***
          minimumSize: function() {
            var
              element   = module.cache.element
            ;
            $container
              .css('min-height', element.height)
            ;
   ***REMOVED*****REMOVED***
          scroll: function(scroll) {
            module.debug('Setting scroll on element', scroll);
            if(module.elementScroll == scroll) {
              return;
          ***REMOVED***
            if( module.is.top() ) {
              $module
                .css('bottom', '')
                .css('top', -scroll)
              ;
          ***REMOVED***
            if( module.is.bottom() ) {
              $module
                .css('top', '')
                .css('bottom', scroll)
              ;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          size: function() {
            if(module.cache.element.height !== 0 && module.cache.element.width !== 0) {
              element.style.setProperty('width',  module.cache.element.width  + 'px', 'important');
              element.style.setProperty('height', module.cache.element.height + 'px', 'important');
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        is: {
          standardScroll: function() {
            return ($scroll[0] == window);
   ***REMOVED*****REMOVED***
          top: function() {
            return $module.hasClass(className.top);
   ***REMOVED*****REMOVED***
          bottom: function() {
            return $module.hasClass(className.bottom);
   ***REMOVED*****REMOVED***
          initialPosition: function() {
            return (!module.is.fixed() && !module.is.bound());
   ***REMOVED*****REMOVED***
          hidden: function() {
            return (!$module.is(':visible'));
   ***REMOVED*****REMOVED***
          bound: function() {
            return $module.hasClass(className.bound);
   ***REMOVED*****REMOVED***
          fixed: function() {
            return $module.hasClass(className.fixed);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        stick: function(scroll) {
          var
            cachedPosition = scroll || $scroll.scrollTop(),
            cache          = module.cache,
            fits           = cache.fits,
            sameHeight     = cache.sameHeight,
            element        = cache.element,
            scrollContext  = cache.scrollContext,
            context        = cache.context,
            offset         = (module.is.bottom() && settings.pushing)
              ? settings.bottomOffset
              : settings.offset,
            scroll         = {
              top    : cachedPosition + offset,
              bottom : cachedPosition + offset + scrollContext.height
***REMOVED*****REMOVED*****REMOVED***
            elementScroll  = (fits)
              ? 0
              : module.get.elementScroll(scroll.top),

            // shorthand
            doesntFit      = !fits,
            elementVisible = (element.height !== 0)
          ;
          if(elementVisible && !sameHeight) {

            if( module.is.initialPosition() ) {
              if(scroll.top >= context.bottom) {
                module.debug('Initial element position is bottom of container');
                module.bindBottom();
            ***REMOVED***
              else if(scroll.top > element.top) {
                if( (element.height + scroll.top - elementScroll) >= context.bottom ) {
                  module.debug('Initial element position is bottom of container');
                  module.bindBottom();
              ***REMOVED***
                else {
                  module.debug('Initial element position is fixed');
                  module.fixTop();
              ***REMOVED***
            ***REMOVED***

          ***REMOVED***
            else if( module.is.fixed() ) {

              // currently fixed top
              if( module.is.top() ) {
                if( scroll.top <= element.top ) {
                  module.debug('Fixed element reached top of container');
                  module.setInitialPosition();
              ***REMOVED***
                else if( (element.height + scroll.top - elementScroll) >= context.bottom ) {
                  module.debug('Fixed element reached bottom of container');
                  module.bindBottom();
              ***REMOVED***
                // scroll element if larger than screen
                else if(doesntFit) {
                  module.set.scroll(elementScroll);
                  module.save.lastScroll(scroll.top);
                  module.save.elementScroll(elementScroll);
              ***REMOVED***
            ***REMOVED***

              // currently fixed bottom
              else if(module.is.bottom() ) {

                // top edge
                if( (scroll.bottom - element.height) <= element.top) {
                  module.debug('Bottom fixed rail has reached top of container');
                  module.setInitialPosition();
              ***REMOVED***
                // bottom edge
                else if(scroll.bottom >= context.bottom) {
                  module.debug('Bottom fixed rail has reached bottom of container');
                  module.bindBottom();
              ***REMOVED***
                // scroll element if larger than screen
                else if(doesntFit) {
                  module.set.scroll(elementScroll);
                  module.save.lastScroll(scroll.top);
                  module.save.elementScroll(elementScroll);
              ***REMOVED***

            ***REMOVED***
          ***REMOVED***
            else if( module.is.bottom() ) {
              if( scroll.top <= element.top ) {
                module.debug('Jumped from bottom fixed to top fixed, most likely used home/end button');
                module.setInitialPosition();
            ***REMOVED***
              else {
                if(settings.pushing) {
                  if(module.is.bound() && scroll.bottom <= context.bottom ) {
                    module.debug('Fixing bottom attached element to bottom of browser.');
                    module.fixBottom();
                ***REMOVED***
              ***REMOVED***
                else {
                  if(module.is.bound() && (scroll.top <= context.bottom - element.height) ) {
                    module.debug('Fixing bottom attached element to top of browser.');
                    module.fixTop();
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        bindTop: function() {
          module.debug('Binding element to top of parent container');
          module.remove.offset();
          $module
            .css({
              left         : '',
              top          : '',
              marginBottom : ''
          ***REMOVED***)
            .removeClass(className.fixed)
            .removeClass(className.bottom)
            .addClass(className.bound)
            .addClass(className.top)
          ;
          settings.onTop.call(element);
          settings.onUnstick.call(element);
 ***REMOVED*****REMOVED***
        bindBottom: function() {
          module.debug('Binding element to bottom of parent container');
          module.remove.offset();
          $module
            .css({
              left         : '',
              top          : ''
          ***REMOVED***)
            .removeClass(className.fixed)
            .removeClass(className.top)
            .addClass(className.bound)
            .addClass(className.bottom)
          ;
          settings.onBottom.call(element);
          settings.onUnstick.call(element);
 ***REMOVED*****REMOVED***

        setInitialPosition: function() {
          module.debug('Returning to initial position');
          module.unfix();
          module.unbind();
 ***REMOVED*****REMOVED***


        fixTop: function() {
          module.debug('Fixing element to top of page');
          if(settings.setSize) {
            module.set.size();
        ***REMOVED***
          module.set.minimumSize();
          module.set.offset();
          $module
            .css({
              left         : module.cache.element.left,
              bottom       : '',
              marginBottom : ''
          ***REMOVED***)
            .removeClass(className.bound)
            .removeClass(className.bottom)
            .addClass(className.fixed)
            .addClass(className.top)
          ;
          settings.onStick.call(element);
 ***REMOVED*****REMOVED***

        fixBottom: function() {
          module.debug('Sticking element to bottom of page');
          if(settings.setSize) {
            module.set.size();
        ***REMOVED***
          module.set.minimumSize();
          module.set.offset();
          $module
            .css({
              left         : module.cache.element.left,
              bottom       : '',
              marginBottom : ''
          ***REMOVED***)
            .removeClass(className.bound)
            .removeClass(className.top)
            .addClass(className.fixed)
            .addClass(className.bottom)
          ;
          settings.onStick.call(element);
 ***REMOVED*****REMOVED***

        unbind: function() {
          if( module.is.bound() ) {
            module.debug('Removing container bound position on element');
            module.remove.offset();
            $module
              .removeClass(className.bound)
              .removeClass(className.top)
              .removeClass(className.bottom)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        unfix: function() {
          if( module.is.fixed() ) {
            module.debug('Removing fixed position on element');
            module.remove.minimumSize();
            module.remove.offset();
            $module
              .removeClass(className.fixed)
              .removeClass(className.top)
              .removeClass(className.bottom)
            ;
            settings.onUnstick.call(element);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        reset: function() {
          module.debug('Resetting elements position');
          module.unbind();
          module.unfix();
          module.resetCSS();
          module.remove.offset();
          module.remove.lastScroll();
 ***REMOVED*****REMOVED***

        resetCSS: function() {
          $module
            .css({
              width  : '',
              height : ''
          ***REMOVED***)
          ;
          $container
            .css({
              height: ''
          ***REMOVED***)
          ;
 ***REMOVED*****REMOVED***

        setting: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            settings[name] = value;
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 0);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***
          if(Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***;

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
      ***REMOVED***
        module.invoke(query);
    ***REMOVED***
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
      ***REMOVED***
        module.initialize();
    ***REMOVED***
  ***REMOVED***)
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
***REMOVED***;

$.fn.sticky.settings = {

  name           : 'Sticky',
  namespace      : 'sticky',

  silent         : false,
  debug          : false,
  verbose        : true,
  performance    : true,

  // whether to stick in the opposite direction on scroll up
  pushing        : false,

  context        : false,
  container      : false,

  // Context to watch scroll events
  scrollContext  : window,

  // Offset to adjust scroll
  offset         : 0,

  // Offset to adjust scroll when attached to bottom of screen
  bottomOffset   : 0,

  // will only set container height if difference between context and container is larger than this number
  jitter         : 5,

  // set width of sticky element when it is fixed to page (used to make sure 100% width is maintained if no fixed size set)
  setSize        : true,

  // Whether to automatically observe changes with Mutation Observers
  observeChanges : false,

  // Called when position is recalculated
  onReposition   : function(){***REMOVED***,

  // Called on each scroll
  onScroll       : function(){***REMOVED***,

  // Called when element is stuck to viewport
  onStick        : function(){***REMOVED***,

  // Called when element is unstuck from viewport
  onUnstick      : function(){***REMOVED***,

  // Called when element reaches top of context
  onTop          : function(){***REMOVED***,

  // Called when element reaches bottom of context
  onBottom       : function(){***REMOVED***,

  error         : {
    container      : 'Sticky element must be inside a relative container',
    visible        : 'Element is hidden, you must call refresh after element becomes visible. Use silent setting to surpress this warning in production.',
    method         : 'The method you called is not defined.',
    invalidContext : 'Context specified does not exist',
    elementSize    : 'Sticky element is larger than its container, cannot create sticky.'
***REMOVED***

  className : {
    bound     : 'bound',
    fixed     : 'fixed',
    supported : 'native',
    top       : 'top',
    bottom    : 'bottom'
***REMOVED***

***REMOVED***;

***REMOVED***)( jQuery, window, document );

/*!
***REMOVED*** # Fomantic-UI - Tab
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

***REMOVED***;

$.isWindow = $.isWindow || function(obj) {
  return obj != null && obj === obj.window;
***REMOVED***;
$.isFunction = $.isFunction || function(obj) {
  return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.tab = function(parameters) {

  var
    // use window context if none specified
    $allModules     = $.isFunction(this)
        ? $(window)
        : $(this),

    moduleSelector  = $allModules.selector || '',
    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    initializedHistory = false,
    returnedValue
  ;

  $allModules
    .each(function() {
      var

        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {***REMOVED***, $.fn.tab.settings, parameters)
          : $.extend({***REMOVED***, $.fn.tab.settings),

        className       = settings.className,
        metadata        = settings.metadata,
        selector        = settings.selector,
        error           = settings.error,
        regExp          = settings.regExp,

        eventNamespace  = '.' + settings.namespace,
        moduleNamespace = 'module-' + settings.namespace,

        $module         = $(this),
        $context,
        $tabs,

        cache           = {***REMOVED***,
        firstLoad       = true,
        recursionDepth  = 0,
        element         = this,
        instance        = $module.data(moduleNamespace),

        activeTabPath,
        parameterArray,
        module,

        historyEvent

      ;

      module = {

        initialize: function() {
          module.debug('Initializing tab menu item', $module);
          module.fix.callbacks();
          module.determineTabs();

          module.debug('Determining tabs', settings.context, $tabs);
          // set up automatic routing
          if(settings.auto) {
            module.set.auto();
        ***REMOVED***
          module.bind.events();

          if(settings.history && !initializedHistory) {
            module.initializeHistory();
            initializedHistory = true;
        ***REMOVED***

          if(instance === undefined && module.determine.activeTab() == null) {
            module.debug('No active tab detected, setting first tab active', module.get.initialPath());
            module.changeTab(module.get.initialPath());
        ***REMOVED***;

          module.instantiate();
 ***REMOVED*****REMOVED***

        instantiate: function () {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
 ***REMOVED*****REMOVED***

        destroy: function() {
          module.debug('Destroying tabs', $module);
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
 ***REMOVED*****REMOVED***

        bind: {
          events: function() {
            // if using $.tab don't add events
            if( !$.isWindow( element ) ) {
              module.debug('Attaching tab activation events to element', $module);
              $module
                .on('click' + eventNamespace, module.event.click)
              ;
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        determineTabs: function() {
          var
            $reference
          ;

          // determine tab context
          if(settings.context === 'parent') {
            if($module.closest(selector.ui).length > 0) {
              $reference = $module.closest(selector.ui);
              module.verbose('Using closest UI element as parent', $reference);
          ***REMOVED***
            else {
              $reference = $module;
          ***REMOVED***
            $context = $reference.parent();
            module.verbose('Determined parent element for creating context', $context);
        ***REMOVED***
          else if(settings.context) {
            $context = $(settings.context);
            module.verbose('Using selector for tab context', settings.context, $context);
        ***REMOVED***
          else {
            $context = $('body');
        ***REMOVED***
          // find tabs
          if(settings.childrenOnly) {
            $tabs = $context.children(selector.tabs);
            module.debug('Searching tab context children for tabs', $context, $tabs);
        ***REMOVED***
          else {
            $tabs = $context.find(selector.tabs);
            module.debug('Searching tab context for tabs', $context, $tabs);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        fix: {
          callbacks: function() {
            if( $.isPlainObject(parameters) && (parameters.onTabLoad || parameters.onTabInit) ) {
              if(parameters.onTabLoad) {
                parameters.onLoad = parameters.onTabLoad;
                delete parameters.onTabLoad;
                module.error(error.legacyLoad, parameters.onLoad);
            ***REMOVED***
              if(parameters.onTabInit) {
                parameters.onFirstLoad = parameters.onTabInit;
                delete parameters.onTabInit;
                module.error(error.legacyInit, parameters.onFirstLoad);
            ***REMOVED***
              settings = $.extend(true, {***REMOVED***, $.fn.tab.settings, parameters);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        initializeHistory: function() {
          module.debug('Initializing page state');
          if( $.address === undefined ) {
            module.error(error.state);
            return false;
        ***REMOVED***
          else {
            if(settings.historyType == 'state') {
              module.debug('Using HTML5 to manage state');
              if(settings.path !== false) {
                $.address
                  .history(true)
                  .state(settings.path)
                ;
            ***REMOVED***
              else {
                module.error(error.path);
                return false;
            ***REMOVED***
          ***REMOVED***
            $.address
              .bind('change', module.event.history.change)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        event: {
          click: function(event) {
            var
              tabPath = $(this).data(metadata.tab)
            ;
            if(tabPath !== undefined) {
              if(settings.history) {
                module.verbose('Updating page state', event);
                $.address.value(tabPath);
            ***REMOVED***
              else {
                module.verbose('Changing tab', event);
                module.changeTab(tabPath);
            ***REMOVED***
              event.preventDefault();
          ***REMOVED***
            else {
              module.debug('No tab specified');
          ***REMOVED***
   ***REMOVED*****REMOVED***
          history: {
            change: function(event) {
              var
                tabPath   = event.pathNames.join('/') || module.get.initialPath(),
                pageTitle = settings.templates.determineTitle(tabPath) || false
              ;
              module.performance.display();
              module.debug('History change event', tabPath, event);
              historyEvent = event;
              if(tabPath !== undefined) {
                module.changeTab(tabPath);
            ***REMOVED***
              if(pageTitle) {
                $.address.title(pageTitle);
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        refresh: function() {
          if(activeTabPath) {
            module.debug('Refreshing tab', activeTabPath);
            module.changeTab(activeTabPath);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        cache: {

          read: function(cacheKey) {
            return (cacheKey !== undefined)
              ? cache[cacheKey]
              : false
            ;
   ***REMOVED*****REMOVED***
          add: function(cacheKey, content) {
            cacheKey = cacheKey || activeTabPath;
            module.debug('Adding cached content for', cacheKey);
            cache[cacheKey] = content;
   ***REMOVED*****REMOVED***
          remove: function(cacheKey) {
            cacheKey = cacheKey || activeTabPath;
            module.debug('Removing cached content for', cacheKey);
            delete cache[cacheKey];
        ***REMOVED***
 ***REMOVED*****REMOVED***

        escape: {
          string: function(text) {
            text =  String(text);
            return text.replace(regExp.escape, '\\$&');
        ***REMOVED***
 ***REMOVED*****REMOVED***

        set: {
          auto: function() {
            var
              url = (typeof settings.path == 'string')
                ? settings.path.replace(/\/$/, '') + '/{$tab***REMOVED***'
                : '/{$tab***REMOVED***'
            ;
            module.verbose('Setting up automatic tab retrieval from server', url);
            if($.isPlainObject(settings.apiSettings)) {
              settings.apiSettings.url = url;
          ***REMOVED***
            else {
              settings.apiSettings = {
                url: url
            ***REMOVED***;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          loading: function(tabPath) {
            var
              $tab      = module.get.tabElement(tabPath),
              isLoading = $tab.hasClass(className.loading)
            ;
            if(!isLoading) {
              module.verbose('Setting loading state for', $tab);
              $tab
                .addClass(className.loading)
                .siblings($tabs)
                  .removeClass(className.active + ' ' + className.loading)
              ;
              if($tab.length > 0) {
                settings.onRequest.call($tab[0], tabPath);
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***
          state: function(state) {
            $.address.value(state);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        changeTab: function(tabPath) {
          var
            pushStateAvailable = (window.history && window.history.pushState),
            shouldIgnoreLoad   = (pushStateAvailable && settings.ignoreFirstLoad && firstLoad),
            remoteContent      = (settings.auto || $.isPlainObject(settings.apiSettings) ),
            // only add default path if not remote content
            pathArray = (remoteContent && !shouldIgnoreLoad)
              ? module.utilities.pathToArray(tabPath)
              : module.get.defaultPathArray(tabPath)
          ;
          tabPath = module.utilities.arrayToPath(pathArray);
          $.each(pathArray, function(index, tab) {
            var
              currentPathArray   = pathArray.slice(0, index + 1),
              currentPath        = module.utilities.arrayToPath(currentPathArray),

              isTab              = module.is.tab(currentPath),
              isLastIndex        = (index + 1 == pathArray.length),

              $tab               = module.get.tabElement(currentPath),
              $anchor,
              nextPathArray,
              nextPath,
              isLastTab
            ;
            module.verbose('Looking for tab', tab);
            if(isTab) {
              module.verbose('Tab was found', tab);
              // scope up
              activeTabPath  = currentPath;
              parameterArray = module.utilities.filterArray(pathArray, currentPathArray);

              if(isLastIndex) {
                isLastTab = true;
            ***REMOVED***
              else {
                nextPathArray = pathArray.slice(0, index + 2);
                nextPath      = module.utilities.arrayToPath(nextPathArray);
                isLastTab     = ( !module.is.tab(nextPath) );
                if(isLastTab) {
                  module.verbose('Tab parameters found', nextPathArray);
              ***REMOVED***
            ***REMOVED***
              if(isLastTab && remoteContent) {
                if(!shouldIgnoreLoad) {
                  module.activate.navigation(currentPath);
                  module.fetch.content(currentPath, tabPath);
              ***REMOVED***
                else {
                  module.debug('Ignoring remote content on first tab load', currentPath);
                  firstLoad = false;
                  module.cache.add(tabPath, $tab.html());
                  module.activate.all(currentPath);
                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);
                  settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);
              ***REMOVED***
                return false;
            ***REMOVED***
              else {
                module.debug('Opened local tab', currentPath);
                module.activate.all(currentPath);
                if( !module.cache.read(currentPath) ) {
                  module.cache.add(currentPath, true);
                  module.debug('First time tab loaded calling tab init');
                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);
              ***REMOVED***
                settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);
            ***REMOVED***

          ***REMOVED***
            else if(tabPath.search('/') == -1 && tabPath !== '') {
              // look for in page anchor
              tabPath = module.escape.string(tabPath);
              $anchor     = $('#' + tabPath + ', a[name="' + tabPath + '"]');
              currentPath = $anchor.closest('[data-tab]').data(metadata.tab);
              $tab        = module.get.tabElement(currentPath);
              // if anchor exists use parent tab
              if($anchor && $anchor.length > 0 && currentPath) {
                module.debug('Anchor link used, opening parent tab', $tab, $anchor);
                if( !$tab.hasClass(className.active) ) {
                  setTimeout(function() {
                    module.scrollTo($anchor);
      ***REMOVED*****REMOVED*****REMOVED*** 0);
              ***REMOVED***
                module.activate.all(currentPath);
                if( !module.cache.read(currentPath) ) {
                  module.cache.add(currentPath, true);
                  module.debug('First time tab loaded calling tab init');
                  settings.onFirstLoad.call($tab[0], currentPath, parameterArray, historyEvent);
              ***REMOVED***
                settings.onLoad.call($tab[0], currentPath, parameterArray, historyEvent);
                return false;
            ***REMOVED***
          ***REMOVED***
            else {
              module.error(error.missingTab, $module, $context, currentPath);
              return false;
          ***REMOVED***
        ***REMOVED***);
 ***REMOVED*****REMOVED***

        scrollTo: function($element) {
          var
            scrollOffset = ($element && $element.length > 0)
              ? $element.offset().top
              : false
          ;
          if(scrollOffset !== false) {
            module.debug('Forcing scroll to an in-page link in a hidden tab', scrollOffset, $element);
            $(document).scrollTop(scrollOffset);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        update: {
          content: function(tabPath, html, evaluateScripts) {
            var
              $tab = module.get.tabElement(tabPath),
              tab  = $tab[0]
            ;
            evaluateScripts = (evaluateScripts !== undefined)
              ? evaluateScripts
              : settings.evaluateScripts
            ;
            if(typeof settings.cacheType == 'string' && settings.cacheType.toLowerCase() == 'dom' && typeof html !== 'string') {
              $tab
                .empty()
                .append($(html).clone(true))
              ;
          ***REMOVED***
            else {
              if(evaluateScripts) {
                module.debug('Updating HTML and evaluating inline scripts', tabPath, html);
                $tab.html(html);
            ***REMOVED***
              else {
                module.debug('Updating HTML', tabPath, html);
                tab.innerHTML = html;
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        fetch: {

          content: function(tabPath, fullTabPath) {
            var
              $tab        = module.get.tabElement(tabPath),
              apiSettings = {
                dataType         : 'html',
                encodeParameters : false,
                on               : 'now',
                cache            : settings.alwaysRefresh,
                headers          : {
                  'X-Remote': true
    ***REMOVED*****REMOVED*****REMOVED***
                onSuccess : function(response) {
                  if(settings.cacheType == 'response') {
                    module.cache.add(fullTabPath, response);
                ***REMOVED***
                  module.update.content(tabPath, response);
                  if(tabPath == activeTabPath) {
                    module.debug('Content loaded', tabPath);
                    module.activate.tab(tabPath);
                ***REMOVED***
                  else {
                    module.debug('Content loaded in background', tabPath);
                ***REMOVED***
                  settings.onFirstLoad.call($tab[0], tabPath, parameterArray, historyEvent);
                  settings.onLoad.call($tab[0], tabPath, parameterArray, historyEvent);

                  if(settings.loadOnce) {
                    module.cache.add(fullTabPath, true);
                ***REMOVED***
                  else if(typeof settings.cacheType == 'string' && settings.cacheType.toLowerCase() == 'dom' && $tab.children().length > 0) {
                    setTimeout(function() {
                      var
                        $clone = $tab.children().clone(true)
                      ;
                      $clone = $clone.not('script');
                      module.cache.add(fullTabPath, $clone);
        ***REMOVED*****REMOVED*****REMOVED*** 0);
                ***REMOVED***
                  else {
                    module.cache.add(fullTabPath, $tab.html());
                ***REMOVED***
    ***REMOVED*****REMOVED*****REMOVED***
                urlData: {
                  tab: fullTabPath
              ***REMOVED***
  ***REMOVED*****REMOVED*****REMOVED***
              request         = $tab.api('get request') || false,
              existingRequest = ( request && request.state() === 'pending' ),
              requestSettings,
              cachedContent
            ;

            fullTabPath   = fullTabPath || tabPath;
            cachedContent = module.cache.read(fullTabPath);


            if(settings.cache && cachedContent) {
              module.activate.tab(tabPath);
              module.debug('Adding cached content', fullTabPath);
              if(!settings.loadOnce) {
                if(settings.evaluateScripts == 'once') {
                  module.update.content(tabPath, cachedContent, false);
              ***REMOVED***
                else {
                  module.update.content(tabPath, cachedContent);
              ***REMOVED***
            ***REMOVED***
              settings.onLoad.call($tab[0], tabPath, parameterArray, historyEvent);
          ***REMOVED***
            else if(existingRequest) {
              module.set.loading(tabPath);
              module.debug('Content is already loading', fullTabPath);
          ***REMOVED***
            else if($.api !== undefined) {
              requestSettings = $.extend(true, {***REMOVED***, settings.apiSettings, apiSettings);
              module.debug('Retrieving remote content', fullTabPath, requestSettings);
              module.set.loading(tabPath);
              $tab.api(requestSettings);
          ***REMOVED***
            else {
              module.error(error.api);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        activate: {
          all: function(tabPath) {
            module.activate.tab(tabPath);
            module.activate.navigation(tabPath);
   ***REMOVED*****REMOVED***
          tab: function(tabPath) {
            var
              $tab          = module.get.tabElement(tabPath),
              $deactiveTabs = (settings.deactivate == 'siblings')
                ? $tab.siblings($tabs)
                : $tabs.not($tab),
              isActive      = $tab.hasClass(className.active)
            ;
            module.verbose('Showing tab content for', $tab);
            if(!isActive) {
              $tab
                .addClass(className.active)
              ;
              $deactiveTabs
                .removeClass(className.active + ' ' + className.loading)
              ;
              if($tab.length > 0) {
                settings.onVisible.call($tab[0], tabPath);
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***
          navigation: function(tabPath) {
            var
              $navigation         = module.get.navElement(tabPath),
              $deactiveNavigation = (settings.deactivate == 'siblings')
                ? $navigation.siblings($allModules)
                : $allModules.not($navigation),
              isActive    = $navigation.hasClass(className.active)
            ;
            module.verbose('Activating tab navigation for', $navigation, tabPath);
            if(!isActive) {
              $navigation
                .addClass(className.active)
              ;
              $deactiveNavigation
                .removeClass(className.active + ' ' + className.loading)
              ;
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        deactivate: {
          all: function() {
            module.deactivate.navigation();
            module.deactivate.tabs();
   ***REMOVED*****REMOVED***
          navigation: function() {
            $allModules
              .removeClass(className.active)
            ;
   ***REMOVED*****REMOVED***
          tabs: function() {
            $tabs
              .removeClass(className.active + ' ' + className.loading)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        is: {
          tab: function(tabName) {
            return (tabName !== undefined)
              ? ( module.get.tabElement(tabName).length > 0 )
              : false
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        get: {
          initialPath: function() {
            return $allModules.eq(0).data(metadata.tab) || $tabs.eq(0).data(metadata.tab);
   ***REMOVED*****REMOVED***
          path: function() {
            return $.address.value();
   ***REMOVED*****REMOVED***
          // adds default tabs to tab path
          defaultPathArray: function(tabPath) {
            return module.utilities.pathToArray( module.get.defaultPath(tabPath) );
   ***REMOVED*****REMOVED***
          defaultPath: function(tabPath) {
            var
              $defaultNav = $allModules.filter('[data-' + metadata.tab + '^="' + module.escape.string(tabPath) + '/"]').eq(0),
              defaultTab  = $defaultNav.data(metadata.tab) || false
            ;
            if( defaultTab ) {
              module.debug('Found default tab', defaultTab);
              if(recursionDepth < settings.maxDepth) {
                recursionDepth++;
                return module.get.defaultPath(defaultTab);
            ***REMOVED***
              module.error(error.recursion);
          ***REMOVED***
            else {
              module.debug('No default tabs found for', tabPath, $tabs);
          ***REMOVED***
            recursionDepth = 0;
            return tabPath;
   ***REMOVED*****REMOVED***
          navElement: function(tabPath) {
            tabPath = tabPath || activeTabPath;
            return $allModules.filter('[data-' + metadata.tab + '="' + module.escape.string(tabPath) + '"]');
   ***REMOVED*****REMOVED***
          tabElement: function(tabPath) {
            var
              $fullPathTab,
              $simplePathTab,
              tabPathArray,
              lastTab
            ;
            tabPath        = tabPath || activeTabPath;
            tabPathArray   = module.utilities.pathToArray(tabPath);
            lastTab        = module.utilities.last(tabPathArray);
            $fullPathTab   = $tabs.filter('[data-' + metadata.tab + '="' + module.escape.string(tabPath) + '"]');
            $simplePathTab = $tabs.filter('[data-' + metadata.tab + '="' + module.escape.string(lastTab) + '"]');
            return ($fullPathTab.length > 0)
              ? $fullPathTab
              : $simplePathTab
            ;
   ***REMOVED*****REMOVED***
          tab: function() {
            return activeTabPath;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        determine: {
          activeTab: function() {
            var activeTab = null;

            $tabs.each(function(_index, tab) {
              var $tab = $(tab);

              if( $tab.hasClass(className.active) ) {
                var
                  tabPath = $(this).data(metadata.tab),
                  $anchor = $allModules.filter('[data-' + metadata.tab + '="' + module.escape.string(tabPath) + '"]')
                ;

                if( $anchor.hasClass(className.active) ) {
                  activeTab = tabPath;
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***);

            return activeTab;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        utilities: {
          filterArray: function(keepArray, removeArray) {
            return $.grep(keepArray, function(keepValue) {
              return ( $.inArray(keepValue, removeArray) == -1);
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          last: function(array) {
            return Array.isArray(array)
              ? array[ array.length - 1]
              : false
            ;
   ***REMOVED*****REMOVED***
          pathToArray: function(pathName) {
            if(pathName === undefined) {
              pathName = activeTabPath;
          ***REMOVED***
            return typeof pathName == 'string'
              ? pathName.split('/')
              : [pathName]
            ;
   ***REMOVED*****REMOVED***
          arrayToPath: function(pathArray) {
            return Array.isArray(pathArray)
              ? pathArray.join('/')
              : false
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            if($.isPlainObject(settings[name])) {
              $.extend(true, settings[name], value);
          ***REMOVED***
            else {
              settings[name] = value;
          ***REMOVED***
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                module.error(error.method, query);
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***
          if(Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***;
      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
      ***REMOVED***
        module.invoke(query);
    ***REMOVED***
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
      ***REMOVED***
        module.initialize();
    ***REMOVED***
  ***REMOVED***)
  ;
  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;

***REMOVED***;

// shortcut for tabbed content with no defined navigation
$.tab = function() {
  $(window).tab.apply(this, arguments);
***REMOVED***;

$.fn.tab.settings = {

  name            : 'Tab',
  namespace       : 'tab',

  silent          : false,
  debug           : false,
  verbose         : false,
  performance     : true,

  auto            : false,      // uses pjax style endpoints fetching content from same url with remote-content headers
  history         : false,      // use browser history
  historyType     : 'hash',     // #/ or html5 state
  path            : false,      // base path of url

  context         : false,      // specify a context that tabs must appear inside
  childrenOnly    : false,      // use only tabs that are children of context
  maxDepth        : 25,         // max depth a tab can be nested

  deactivate      : 'siblings', // whether tabs should deactivate sibling menu elements or all elements initialized together

  alwaysRefresh   : false,      // load tab content new every tab click
  cache           : true,       // cache the content requests to pull locally
  loadOnce        : false,      // Whether tab data should only be loaded once when using remote content
  cacheType       : 'response', // Whether to cache exact response, or to html cache contents after scripts execute
  ignoreFirstLoad : false,      // don't load remote content on first load

  apiSettings     : false,      // settings for api call
  evaluateScripts : 'once',     // whether inline scripts should be parsed (true/false/once). Once will not re-evaluate on cached content

  onFirstLoad : function(tabPath, parameterArray, historyEvent) {***REMOVED***, // called first time loaded
  onLoad      : function(tabPath, parameterArray, historyEvent) {***REMOVED***, // called on every load
  onVisible   : function(tabPath, parameterArray, historyEvent) {***REMOVED***, // called every time tab visible
  onRequest   : function(tabPath, parameterArray, historyEvent) {***REMOVED***, // called ever time a tab beings loading remote content

  templates : {
    determineTitle: function(tabArray) {***REMOVED*** // returns page title for path
***REMOVED***

  error: {
    api        : 'You attempted to load content without API module',
    method     : 'The method you called is not defined',
    missingTab : 'Activated tab cannot be found. Tabs are case-sensitive.',
    noContent  : 'The tab you specified is missing a content url.',
    path       : 'History enabled, but no path was specified',
    recursion  : 'Max recursive depth reached',
    legacyInit : 'onTabInit has been renamed to onFirstLoad in 2.0, please adjust your code.',
    legacyLoad : 'onTabLoad has been renamed to onLoad in 2.0. Please adjust your code',
    state      : 'History requires Asual\'s Address library <https://github.com/asual/jquery-address>'
***REMOVED***

  regExp : {
    escape   : /[-[\]{***REMOVED***()*+?.,\\^$|#\s:=@]/g
***REMOVED***

  metadata : {
    tab    : 'tab',
    loaded : 'loaded',
    promise: 'promise'
***REMOVED***

  className   : {
    loading : 'loading',
    active  : 'active'
***REMOVED***

  selector    : {
    tabs : '.ui.tab',
    ui   : '.ui'
***REMOVED***

***REMOVED***;

***REMOVED***)( jQuery, window, document );

/*!
***REMOVED*** # Fomantic-UI - Toast
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

***REMOVED***;

$.isFunction = $.isFunction || function(obj) {
  return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.toast = function(parameters) {
  var
    $allModules    = $(this),
    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue
  ;
  $allModules
    .each(function() {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {***REMOVED***, $.fn.toast.settings, parameters)
          : $.extend({***REMOVED***, $.fn.toast.settings),

        className        = settings.className,
        selector         = settings.selector,
        error            = settings.error,
        namespace        = settings.namespace,
        fields           = settings.fields,

        eventNamespace   = '.' + namespace,
        moduleNamespace  = namespace + '-module',

        $module          = $(this),
        $toastBox,
        $toast,
        $actions,
        $progress,
        $progressBar,
        $animationObject,
        $close,
        $context         = (settings.context)
          ? $(settings.context)
          : $('body'),

        isToastComponent = $module.hasClass('toast') || $module.hasClass('message') || $module.hasClass('card'),

        element          = this,
        instance         = isToastComponent ? $module.data(moduleNamespace) : undefined,

        module
      ;
      module = {

        initialize: function() {
          module.verbose('Initializing element');
          if (!module.has.container()) {
            module.create.container();
        ***REMOVED***
          if(isToastComponent || settings.message !== '' || settings.title !== '' || module.get.iconClass() !== '' || settings.showImage || module.has.configActions()) {
            if(typeof settings.showProgress !== 'string' || [className.top,className.bottom].indexOf(settings.showProgress) === -1 ) {
              settings.showProgress = false;
          ***REMOVED***
            module.create.toast();
            if(settings.closeOnClick && (settings.closeIcon || $($toast).find(selector.input).length > 0 || module.has.configActions())){
              settings.closeOnClick = false;
          ***REMOVED***
            if(!settings.closeOnClick) {
              $toastBox.addClass(className.unclickable);
          ***REMOVED***
            module.bind.events();
        ***REMOVED***
          module.instantiate();
          if($toastBox) {
            module.show();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        instantiate: function() {
          module.verbose('Storing instance of toast');
          instance = module;
          $module
              .data(moduleNamespace, instance)
          ;
 ***REMOVED*****REMOVED***

        destroy: function() {
          if($toastBox) {
            module.debug('Removing toast', $toastBox);
            module.unbind.events();
            $toastBox.remove();
            $toastBox = undefined;
            $toast = undefined;
            $animationObject = undefined;
            settings.onRemove.call($toastBox, element);
            $progress = undefined;
            $progressBar = undefined;
            $close = undefined;
        ***REMOVED***
          $module
            .removeData(moduleNamespace)
          ;
 ***REMOVED*****REMOVED***

        show: function(callback) {
          callback = callback || function(){***REMOVED***;
          module.debug('Showing toast');
          if(settings.onShow.call($toastBox, element) === false) {
            module.debug('onShow callback returned false, cancelling toast animation');
            return;
        ***REMOVED***
          module.animate.show(callback);
 ***REMOVED*****REMOVED***

        close: function(callback) {
          callback = callback || function(){***REMOVED***;
          module.remove.visible();
          module.unbind.events();
          module.animate.close(callback);

 ***REMOVED*****REMOVED***

        create: {
          container: function() {
            module.verbose('Creating container');
            $context.append($('<div/>',{class: settings.position + ' ' + className.container***REMOVED***));
   ***REMOVED*****REMOVED***
          toast: function() {
            $toastBox = $('<div/>', {class: className.box***REMOVED***);
            if (!isToastComponent) {
              module.verbose('Creating toast');
              $toast = $('<div/>');
              var $content = $('<div/>', {class: className.content***REMOVED***);
              var iconClass = module.get.iconClass();
              if (iconClass !== '') {
                $toast.append($('<i/>', {class: iconClass + ' ' + className.icon***REMOVED***));
            ***REMOVED***

              if (settings.showImage) {
                $toast.append($('<img>', {
                  class: className.image + ' ' + settings.classImage,
                  src: settings.showImage
              ***REMOVED***));
            ***REMOVED***
              if (settings.title !== '') {
                $content.append($('<div/>', {
                  class: className.title,
                  text: settings.title
              ***REMOVED***));
            ***REMOVED***

              $content.append($('<div/>', {html: module.helpers.escape(settings.message, settings.preserveHTML)***REMOVED***));

              $toast
                .addClass(settings.class + ' ' + className.toast)
                .append($content)
              ;
              $toast.css('opacity', settings.opacity);
              if (settings.closeIcon) {
                $close = $('<i/>', {class: className.close + ' ' + (typeof settings.closeIcon === 'string' ? settings.closeIcon : '')***REMOVED***);
                if($close.hasClass(className.left)) {
                  $toast.prepend($close);
              ***REMOVED*** else {
                  $toast.append($close);
              ***REMOVED***
            ***REMOVED***
          ***REMOVED*** else {
              $toast = settings.cloneModule ? $module.clone().removeAttr('id') : $module;
              $close = $toast.find('> i'+module.helpers.toClass(className.close));
              settings.closeIcon = ($close.length > 0);
          ***REMOVED***
            if ($toast.hasClass(className.compact)) {
              settings.compact = true;
          ***REMOVED***
            if ($toast.hasClass('card')) {
              settings.compact = false;
          ***REMOVED***
            $actions = $toast.find('.actions');
            if (module.has.configActions()) {
              if ($actions.length === 0) {
                $actions = $('<div/>', {class: className.actions + ' ' + (settings.classActions || '')***REMOVED***).appendTo($toast);
            ***REMOVED***
              if($toast.hasClass('card') && !$actions.hasClass(className.attached)) {
                $actions.addClass(className.extraContent);
                if($actions.hasClass(className.vertical)) {
                  $actions.removeClass(className.vertical);
                  module.error(error.verticalCard);
              ***REMOVED***
            ***REMOVED***
              settings.actions.forEach(function (el) {
                var icon = el[fields.icon] ? '<i class="' + module.helpers.deQuote(el[fields.icon]) + ' icon"></i>' : '',
                  text = module.helpers.escape(el[fields.text] || '', settings.preserveHTML),
                  cls = module.helpers.deQuote(el[fields.class] || ''),
                  click = el[fields.click] && $.isFunction(el[fields.click]) ? el[fields.click] : function () {***REMOVED***;
                $actions.append($('<button/>', {
                  html: icon + text,
                  class: className.button + ' ' + cls,
                  click: function () {
                    if (click.call(element, $module) === false) {
                      return;
                  ***REMOVED***
                    module.close();
                ***REMOVED***
              ***REMOVED***));
            ***REMOVED***);
          ***REMOVED***
            if ($actions && $actions.hasClass(className.vertical)) {
                $toast.addClass(className.vertical);
          ***REMOVED***
            if($actions.length > 0 && !$actions.hasClass(className.attached)) {
              if ($actions && (!$actions.hasClass(className.basic) || $actions.hasClass(className.left))) {
                $toast.addClass(className.actions);
            ***REMOVED***
          ***REMOVED***
            if(settings.displayTime === 'auto'){
              settings.displayTime = Math.max(settings.minDisplayTime, $toast.text().split(" ").length / settings.wordsPerMinute***REMOVED*** 60000);
          ***REMOVED***
            $toastBox.append($toast);

            if($actions.length > 0 && $actions.hasClass(className.attached)) {
              $actions.addClass(className.buttons);
              $actions.detach();
              $toast.addClass(className.attached);
              if (!$actions.hasClass(className.vertical)) {
                if ($actions.hasClass(className.top)) {
                  $toastBox.prepend($actions);
                  $toast.addClass(className.bottom);
              ***REMOVED*** else {
                  $toastBox.append($actions);
                  $toast.addClass(className.top);
              ***REMOVED***
            ***REMOVED*** else {
                $toast.wrap(
                  $('<div/>',{
                    class:className.vertical + ' ' +
                          className.attached + ' ' +
                          (settings.compact ? className.compact : '')
                ***REMOVED***)
                );
                if($actions.hasClass(className.left)) {
                  $toast.addClass(className.left).parent().addClass(className.left).prepend($actions);
              ***REMOVED*** else {
                  $toast.parent().append($actions);
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
            if($module !== $toast) {
              $module = $toast;
              element = $toast[0];
          ***REMOVED***
            if(settings.displayTime > 0) {
              var progressingClass = className.progressing+' '+(settings.pauseOnHover ? className.pausable:'');
              if (!!settings.showProgress) {
                $progress = $('<div/>', {
                  class: className.progress + ' ' + (settings.classProgress || settings.class),
                  'data-percent': ''
              ***REMOVED***);
                if(!settings.classProgress) {
                  if ($toast.hasClass('toast') && !$toast.hasClass(className.inverted)) {
                    $progress.addClass(className.inverted);
                ***REMOVED*** else {
                    $progress.removeClass(className.inverted);
                ***REMOVED***
              ***REMOVED***
                $progressBar = $('<div/>', {class: 'bar '+(settings.progressUp ? 'up ' : 'down ')+progressingClass***REMOVED***);
                $progress
                    .addClass(settings.showProgress)
                    .append($progressBar);
                if ($progress.hasClass(className.top)) {
                  $toastBox.prepend($progress);
              ***REMOVED*** else {
                  $toastBox.append($progress);
              ***REMOVED***
                $progressBar.css('animation-duration', settings.displayTime / 1000 + 's');
            ***REMOVED***
              $animationObject = $('<span/>',{class:'wait '+progressingClass***REMOVED***);
              $animationObject.css('animation-duration', settings.displayTime / 1000 + 's');
              $animationObject.appendTo($toast);
          ***REMOVED***
            if (settings.compact) {
              $toastBox.addClass(className.compact);
              $toast.addClass(className.compact);
              if($progress) {
                $progress.addClass(className.compact);
            ***REMOVED***
          ***REMOVED***
            if (settings.newestOnTop) {
              $toastBox.prependTo(module.get.container());
          ***REMOVED***
            else {
              $toastBox.appendTo(module.get.container());
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        bind: {
          events: function() {
            module.debug('Binding events to toast');
            if(settings.closeOnClick || settings.closeIcon) {
              (settings.closeIcon ? $close : $toast)
                  .on('click' + eventNamespace, module.event.click)
              ;
          ***REMOVED***
            if($animationObject) {
              $animationObject.on('animationend' + eventNamespace, module.close);
          ***REMOVED***
            $toastBox
              .on('click' + eventNamespace, selector.approve, module.event.approve)
              .on('click' + eventNamespace, selector.deny, module.event.deny)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        unbind: {
          events: function() {
            module.debug('Unbinding events to toast');
            if(settings.closeOnClick || settings.closeIcon) {
              (settings.closeIcon ? $close : $toast)
                  .off('click' + eventNamespace)
              ;
          ***REMOVED***
            if($animationObject) {
              $animationObject.off('animationend' + eventNamespace);
          ***REMOVED***
            $toastBox
              .off('click' + eventNamespace)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        animate: {
          show: function(callback) {
            callback = $.isFunction(callback) ? callback : function(){***REMOVED***;
            if(settings.transition && module.can.useElement('transition') && $module.transition('is supported')) {
              module.set.visible();
              $toastBox
                .transition({
                  animation  : settings.transition.showMethod + ' in',
                  queue      : false,
                  debug      : settings.debug,
                  verbose    : settings.verbose,
                  duration   : settings.transition.showDuration,
                  onComplete : function() {
                    callback.call($toastBox, element);
                    settings.onVisible.call($toastBox, element);
                ***REMOVED***
              ***REMOVED***)
              ;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          close: function(callback) {
            callback = $.isFunction(callback) ? callback : function(){***REMOVED***;
            module.debug('Closing toast');
            if(settings.onHide.call($toastBox, element) === false) {
              module.debug('onHide callback returned false, cancelling toast animation');
              return;
          ***REMOVED***
            if(settings.transition && $.fn.transition !== undefined && $module.transition('is supported')) {
              $toastBox
                .transition({
                  animation  : settings.transition.hideMethod + ' out',
                  queue      : false,
                  duration   : settings.transition.hideDuration,
                  debug      : settings.debug,
                  verbose    : settings.verbose,
                  interval   : 50,

                  onBeforeHide: function(callback){
                      callback = $.isFunction(callback)?callback : function(){***REMOVED***;
                      if(settings.transition.closeEasing !== ''){
                          if($toastBox) {
                            $toastBox.css('opacity', 0);
                            $toastBox.wrap('<div/>').parent().slideUp(500, settings.transition.closeEasing, function () {
                              if ($toastBox) {
                                $toastBox.parent().remove();
                                callback.call($toastBox);
                            ***REMOVED***
                          ***REMOVED***);
                        ***REMOVED***
                    ***REMOVED*** else {
                        callback.call($toastBox);
                    ***REMOVED***
      ***REMOVED*****REMOVED*****REMOVED***
                  onComplete : function() {
                    callback.call($toastBox, element);
                    settings.onHidden.call($toastBox, element);
                    module.destroy();
                ***REMOVED***
              ***REMOVED***)
              ;
          ***REMOVED***
            else {
              module.error(error.noTransition);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          pause: function() {
            $animationObject.css('animationPlayState','paused');
            if($progressBar) {
              $progressBar.css('animationPlayState', 'paused');
          ***REMOVED***
   ***REMOVED*****REMOVED***
          continue: function() {
            $animationObject.css('animationPlayState','running');
            if($progressBar) {
              $progressBar.css('animationPlayState', 'running');
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        has: {
          container: function() {
            module.verbose('Determining if there is already a container');
            return ($context.find(module.helpers.toClass(settings.position) + selector.container).length > 0);
   ***REMOVED*****REMOVED***
          toast: function(){
            return !!module.get.toast();
   ***REMOVED*****REMOVED***
          toasts: function(){
            return module.get.toasts().length > 0;
   ***REMOVED*****REMOVED***
          configActions: function () {
            return Array.isArray(settings.actions) && settings.actions.length > 0;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        get: {
          container: function() {
            return ($context.find(module.helpers.toClass(settings.position) + selector.container)[0]);
   ***REMOVED*****REMOVED***
          toastBox: function() {
            return $toastBox || null;
   ***REMOVED*****REMOVED***
          toast: function() {
            return $toast || null;
   ***REMOVED*****REMOVED***
          toasts: function() {
            return $(module.get.container()).find(selector.box);
   ***REMOVED*****REMOVED***
          iconClass: function() {
            return typeof settings.showIcon === 'string' ? settings.showIcon : settings.showIcon && settings.icons[settings.class] ? settings.icons[settings.class] : '';
   ***REMOVED*****REMOVED***
          remainingTime: function() {
            return $animationObject ? $animationObject.css('opacity')***REMOVED*** settings.displayTime : 0;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        set: {
          visible: function() {
            $toast.addClass(className.visible);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        remove: {
          visible: function() {
            $toast.removeClass(className.visible);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        event: {
          click: function(event) {
            if($(event.target).closest('a').length === 0) {
              settings.onClick.call($toastBox, element);
              module.close();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          approve: function() {
            if(settings.onApprove.call(element, $module) === false) {
              module.verbose('Approve callback returned false cancelling close');
              return;
          ***REMOVED***
            module.close();
   ***REMOVED*****REMOVED***
          deny: function() {
            if(settings.onDeny.call(element, $module) === false) {
              module.verbose('Deny callback returned false cancelling close');
              return;
          ***REMOVED***
            module.close();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        helpers: {
          toClass: function(selector) {
            var
              classes = selector.split(' '),
              result = ''
            ;

            classes.forEach(function (element) {
              result += '.' + element;
          ***REMOVED***);

            return result;
   ***REMOVED*****REMOVED***
          deQuote: function(string) {
            return String(string).replace(/"/g,"");
   ***REMOVED*****REMOVED***
          escape: function(string, preserveHTML) {
            if (preserveHTML){
              return string;
          ***REMOVED***
            var
              badChars     = /[<>"'`]/g,
              shouldEscape = /[&<>"'`]/,
              escape       = {
                "<": "&lt;",
                ">": "&gt;",
                '"': "&quot;",
                "'": "&#x27;",
                "`": "&#x60;"
  ***REMOVED*****REMOVED*****REMOVED***
              escapedChar  = function(chr) {
                return escape[chr];
            ***REMOVED***
            ;
            if(shouldEscape.test(string)) {
              string = string.replace(/&(?![a-z0-9#]{1,6***REMOVED***;)/, "&amp;");
              return string.replace(badChars, escapedChar);
          ***REMOVED***
            return string;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        can: {
          useElement: function(element){
            if ($.fn[element] !== undefined) {
              return true;
          ***REMOVED***
            module.error(error.noElement.replace('{element***REMOVED***',element));
            return false;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            if($.isPlainObject(settings[name])) {
              $.extend(true, settings[name], value);
          ***REMOVED***
            else {
              settings[name] = value;
          ***REMOVED***
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                module.error(error.method, query);
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***
          if(Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***;

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
      ***REMOVED***
        module.invoke(query);
    ***REMOVED***
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
      ***REMOVED***
        module.initialize();
        returnedValue = $module;
    ***REMOVED***
  ***REMOVED***)
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
***REMOVED***;

$.fn.toast.settings = {

  name           : 'Toast',
  namespace      : 'toast',

  silent         : false,
  debug          : false,
  verbose        : false,
  performance    : true,

  context        : 'body',

  position       : 'top right',
  class          : 'neutral',
  classProgress  : false,
  classActions   : false,
  classImage     : 'mini',

  title          : '',
  message        : '',
  displayTime    : 3000, // set to zero to require manually dismissal, otherwise hides on its own
  minDisplayTime : 1000, // minimum displaytime in case displayTime is set to 'auto'
  wordsPerMinute : 120,
  showIcon       : false,
  newestOnTop    : false,
  showProgress   : false,
  pauseOnHover   : true,
  progressUp     : false, //if true, the bar will start at 0% and increase to 100%
  opacity        : 1,
  compact        : true,
  closeIcon      : false,
  closeOnClick   : true,
  cloneModule    : true,
  actions        : false,
  preserveHTML   : true,
  showImage      : false,

  // transition settings
  transition     : {
    showMethod   : 'scale',
    showDuration : 500,
    hideMethod   : 'scale',
    hideDuration : 500,
    closeEasing  : 'easeOutCubic'  //Set to empty string to stack the closed toast area immediately (old behaviour)
***REMOVED***

  error: {
    method       : 'The method you called is not defined.',
    noElement    : 'This module requires ui {element***REMOVED***',
    verticalCard : 'Vertical but not attached actions are not supported for card layout'
***REMOVED***

  className      : {
    container    : 'ui toast-container',
    box          : 'floating toast-box',
    progress     : 'ui attached active progress',
    toast        : 'ui toast',
    icon         : 'centered icon',
    visible      : 'visible',
    content      : 'content',
    title        : 'ui header',
    actions      : 'actions',
    extraContent : 'extra content',
    button       : 'ui button',
    buttons      : 'ui buttons',
    close        : 'close icon',
    image        : 'ui image',
    vertical     : 'vertical',
    attached     : 'attached',
    inverted     : 'inverted',
    compact      : 'compact',
    pausable     : 'pausable',
    progressing  : 'progressing',
    top          : 'top',
    bottom       : 'bottom',
    left         : 'left',
    basic        : 'basic',
    unclickable  : 'unclickable'
***REMOVED***

  icons          : {
    info         : 'info',
    success      : 'checkmark',
    warning      : 'warning',
    error        : 'times'
***REMOVED***

  selector       : {
    container    : '.ui.toast-container',
    box          : '.toast-box',
    toast        : '.ui.toast',
    input        : 'input:not([type="hidden"]), textarea, select, button, .ui.button, ui.dropdown',
    approve      : '.actions .positive, .actions .approve, .actions .ok',
    deny         : '.actions .negative, .actions .deny, .actions .cancel'
***REMOVED***

  fields         : {
    class        : 'class',
    text         : 'text',
    icon         : 'icon',
    click        : 'click'
***REMOVED***

  // callbacks
  onShow         : function(){***REMOVED***,
  onVisible      : function(){***REMOVED***,
  onClick        : function(){***REMOVED***,
  onHide         : function(){***REMOVED***,
  onHidden       : function(){***REMOVED***,
  onRemove       : function(){***REMOVED***,
  onApprove      : function(){***REMOVED***,
  onDeny         : function(){***REMOVED***
***REMOVED***;

$.extend( $.easing, {
    easeOutBounce: function (x, t, b, c, d) {
        if ((t/=d) < (1/2.75)) {
            return c*(7.5625*t*t) + b;
      ***REMOVED*** else if (t < (2/2.75)) {
            return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;
      ***REMOVED*** else if (t < (2.5/2.75)) {
            return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;
      ***REMOVED*** else {
            return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;
      ***REMOVED***
  ***REMOVED***
    easeOutCubic: function (t) {
      return (--t)*t*t+1;
  ***REMOVED***
***REMOVED***);


***REMOVED***)( jQuery, window, document );

/*!
***REMOVED*** # Fomantic-UI - Transition
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

***REMOVED***;

$.isFunction = $.isFunction || function(obj) {
  return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.transition = function() {
  var
    $allModules     = $(this),
    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    moduleArguments = arguments,
    query           = moduleArguments[0],
    queryArguments  = [].slice.call(arguments, 1),
    methodInvoked   = (typeof query === 'string'),

    returnedValue
  ;
  $allModules
    .each(function(index) {
      var
        $module  = $(this),
        element  = this,

        // set at run time
        settings,
        instance,

        error,
        className,
        metadata,
        animationEnd,

        moduleNamespace,
        eventNamespace,
        module
      ;

      module = {

        initialize: function() {

          // get full settings
          settings        = module.get.settings.apply(element, moduleArguments);

          // shorthand
          className       = settings.className;
          error           = settings.error;
          metadata        = settings.metadata;

          // define namespace
          eventNamespace  = '.' + settings.namespace;
          moduleNamespace = 'module-' + settings.namespace;
          instance        = $module.data(moduleNamespace) || module;

          // get vendor specific events
          animationEnd    = module.get.animationEndEvent();

          if(methodInvoked) {
            methodInvoked = module.invoke(query);
        ***REMOVED***

          // method not invoked, lets run an animation
          if(methodInvoked === false) {
            module.verbose('Converted arguments into settings object', settings);
            if(settings.interval) {
              module.delay(settings.animate);
          ***REMOVED***
            else  {
              module.animate();
          ***REMOVED***
            module.instantiate();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
 ***REMOVED*****REMOVED***

        destroy: function() {
          module.verbose('Destroying previous module for', element);
          $module
            .removeData(moduleNamespace)
          ;
 ***REMOVED*****REMOVED***

        refresh: function() {
          module.verbose('Refreshing display type on next animation');
          delete module.displayType;
 ***REMOVED*****REMOVED***

        forceRepaint: function() {
          module.verbose('Forcing element repaint');
          var
            $parentElement = $module.parent(),
            $nextElement = $module.next()
          ;
          if($nextElement.length === 0) {
            $module.detach().appendTo($parentElement);
        ***REMOVED***
          else {
            $module.detach().insertBefore($nextElement);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        repaint: function() {
          module.verbose('Repainting element');
          var
            fakeAssignment = element.offsetWidth
          ;
 ***REMOVED*****REMOVED***

        delay: function(interval) {
          var
            direction = module.get.animationDirection(),
            shouldReverse,
            delay
          ;
          if(!direction) {
            direction = module.can.transition()
              ? module.get.direction()
              : 'static'
            ;
        ***REMOVED***
          interval = (interval !== undefined)
            ? interval
            : settings.interval
          ;
          shouldReverse = (settings.reverse == 'auto' && direction == className.outward);
          delay = (shouldReverse || settings.reverse == true)
            ? ($allModules.length - index)***REMOVED*** settings.interval
            : index***REMOVED*** settings.interval
          ;
          module.debug('Delaying animation by', delay);
          setTimeout(module.animate, delay);
 ***REMOVED*****REMOVED***

        animate: function(overrideSettings) {
          settings = overrideSettings || settings;
          if(!module.is.supported()) {
            module.error(error.support);
            return false;
        ***REMOVED***
          module.debug('Preparing animation', settings.animation);
          if(module.is.animating()) {
            if(settings.queue) {
              if(!settings.allowRepeats && module.has.direction() && module.is.occurring() && module.queuing !== true) {
                module.debug('Animation is currently occurring, preventing queueing same animation', settings.animation);
            ***REMOVED***
              else {
                module.queue(settings.animation);
            ***REMOVED***
              return false;
          ***REMOVED***
            else if(!settings.allowRepeats && module.is.occurring()) {
              module.debug('Animation is already occurring, will not execute repeated animation', settings.animation);
              return false;
          ***REMOVED***
            else {
              module.debug('New animation started, completing previous early', settings.animation);
              instance.complete();
          ***REMOVED***
        ***REMOVED***
          if( module.can.animate() ) {
            module.set.animating(settings.animation);
        ***REMOVED***
          else {
            module.error(error.noAnimation, settings.animation, element);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        reset: function() {
          module.debug('Resetting animation to beginning conditions');
          module.remove.animationCallbacks();
          module.restore.conditions();
          module.remove.animating();
 ***REMOVED*****REMOVED***

        queue: function(animation) {
          module.debug('Queueing animation of', animation);
          module.queuing = true;
          $module
            .one(animationEnd + '.queue' + eventNamespace, function() {
              module.queuing = false;
              module.repaint();
              module.animate.apply(this, settings);
          ***REMOVED***)
          ;
 ***REMOVED*****REMOVED***

        complete: function (event) {
          if(event && event.target === element) {
              event.stopPropagation();
        ***REMOVED***
          module.debug('Animation complete', settings.animation);
          module.remove.completeCallback();
          module.remove.failSafe();
          if(!module.is.looping()) {
            if( module.is.outward() ) {
              module.verbose('Animation is outward, hiding element');
              module.restore.conditions();
              module.hide();
          ***REMOVED***
            else if( module.is.inward() ) {
              module.verbose('Animation is outward, showing element');
              module.restore.conditions();
              module.show();
          ***REMOVED***
            else {
              module.verbose('Static animation completed');
              module.restore.conditions();
              settings.onComplete.call(element);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        force: {
          visible: function() {
            var
              style          = $module.attr('style'),
              userStyle      = module.get.userStyle(style),
              displayType    = module.get.displayType(),
              overrideStyle  = userStyle + 'display: ' + displayType + ' !important;',
              inlineDisplay  = $module[0].style.display,
              mustStayHidden = !displayType || (inlineDisplay === 'none' && settings.skipInlineHidden) || $module[0].tagName.match(/(script|link|style)/i)
            ;
            if (mustStayHidden){
              module.remove.transition();
              return false;
          ***REMOVED***
            module.verbose('Overriding default display to show element', displayType);
            $module
              .attr('style', overrideStyle)
            ;
            return true;
   ***REMOVED*****REMOVED***
          hidden: function() {
            var
              style          = $module.attr('style'),
              currentDisplay = $module.css('display'),
              emptyStyle     = (style === undefined || style === '')
            ;
            if(currentDisplay !== 'none' && !module.is.hidden()) {
              module.verbose('Overriding default display to hide element');
              $module
                .css('display', 'none')
              ;
          ***REMOVED***
            else if(emptyStyle) {
              $module
                .removeAttr('style')
              ;
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        has: {
          direction: function(animation) {
            var
              hasDirection = false
            ;
            animation = animation || settings.animation;
            if(typeof animation === 'string') {
              animation = animation.split(' ');
              $.each(animation, function(index, word){
                if(word === className.inward || word === className.outward) {
                  hasDirection = true;
              ***REMOVED***
            ***REMOVED***);
          ***REMOVED***
            return hasDirection;
   ***REMOVED*****REMOVED***
          inlineDisplay: function() {
            var
              style = $module.attr('style') || ''
            ;
            return Array.isArray(style.match(/display.*?;/, ''));
        ***REMOVED***
 ***REMOVED*****REMOVED***

        set: {
          animating: function(animation) {
            // remove previous callbacks
            module.remove.completeCallback();

            // determine exact animation
            animation = animation || settings.animation;
            var animationClass = module.get.animationClass(animation);

              // save animation class in cache to restore class names
            module.save.animation(animationClass);

            if(module.force.visible()) {
              module.remove.hidden();
              module.remove.direction();

              module.start.animation(animationClass);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          duration: function(animationName, duration) {
            duration = duration || settings.duration;
            duration = (typeof duration == 'number')
              ? duration + 'ms'
              : duration
            ;
            if(duration || duration === 0) {
              module.verbose('Setting animation duration', duration);
              $module
                .css({
                  'animation-duration':  duration
              ***REMOVED***)
              ;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          direction: function(direction) {
            direction = direction || module.get.direction();
            if(direction == className.inward) {
              module.set.inward();
          ***REMOVED***
            else {
              module.set.outward();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          looping: function() {
            module.debug('Transition set to loop');
            $module
              .addClass(className.looping)
            ;
   ***REMOVED*****REMOVED***
          hidden: function() {
            $module
              .addClass(className.transition)
              .addClass(className.hidden)
            ;
   ***REMOVED*****REMOVED***
          inward: function() {
            module.debug('Setting direction to inward');
            $module
              .removeClass(className.outward)
              .addClass(className.inward)
            ;
   ***REMOVED*****REMOVED***
          outward: function() {
            module.debug('Setting direction to outward');
            $module
              .removeClass(className.inward)
              .addClass(className.outward)
            ;
   ***REMOVED*****REMOVED***
          visible: function() {
            $module
              .addClass(className.transition)
              .addClass(className.visible)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        start: {
          animation: function(animationClass) {
            animationClass = animationClass || module.get.animationClass();
            module.debug('Starting tween', animationClass);
            $module
              .addClass(animationClass)
              .one(animationEnd + '.complete' + eventNamespace, module.complete)
            ;
            if(settings.useFailSafe) {
              module.add.failSafe();
          ***REMOVED***
            module.set.duration(settings.duration);
            settings.onStart.call(element);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        save: {
          animation: function(animation) {
            if(!module.cache) {
              module.cache = {***REMOVED***;
          ***REMOVED***
            module.cache.animation = animation;
   ***REMOVED*****REMOVED***
          displayType: function(displayType) {
            if(displayType !== 'none') {
              $module.data(metadata.displayType, displayType);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          transitionExists: function(animation, exists) {
            $.fn.transition.exists[animation] = exists;
            module.verbose('Saving existence of transition', animation, exists);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        restore: {
          conditions: function() {
            var
              animation = module.get.currentAnimation()
            ;
            if(animation) {
              $module
                .removeClass(animation)
              ;
              module.verbose('Removing animation class', module.cache);
          ***REMOVED***
            module.remove.duration();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        add: {
          failSafe: function() {
            var
              duration = module.get.duration()
            ;
            module.timer = setTimeout(function() {
              $module.triggerHandler(animationEnd);
***REMOVED*****REMOVED*****REMOVED*** duration + settings.failSafeDelay);
            module.verbose('Adding fail safe timer', module.timer);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        remove: {
          animating: function() {
            $module.removeClass(className.animating);
   ***REMOVED*****REMOVED***
          animationCallbacks: function() {
            module.remove.queueCallback();
            module.remove.completeCallback();
   ***REMOVED*****REMOVED***
          queueCallback: function() {
            $module.off('.queue' + eventNamespace);
   ***REMOVED*****REMOVED***
          completeCallback: function() {
            $module.off('.complete' + eventNamespace);
   ***REMOVED*****REMOVED***
          display: function() {
            $module.css('display', '');
   ***REMOVED*****REMOVED***
          direction: function() {
            $module
              .removeClass(className.inward)
              .removeClass(className.outward)
            ;
   ***REMOVED*****REMOVED***
          duration: function() {
            $module
              .css('animation-duration', '')
            ;
   ***REMOVED*****REMOVED***
          failSafe: function() {
            module.verbose('Removing fail safe timer', module.timer);
            if(module.timer) {
              clearTimeout(module.timer);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          hidden: function() {
            $module.removeClass(className.hidden);
   ***REMOVED*****REMOVED***
          visible: function() {
            $module.removeClass(className.visible);
   ***REMOVED*****REMOVED***
          looping: function() {
            module.debug('Transitions are no longer looping');
            if( module.is.looping() ) {
              module.reset();
              $module
                .removeClass(className.looping)
              ;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          transition: function() {
            $module
              .removeClass(className.transition)
              .removeClass(className.visible)
              .removeClass(className.hidden)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***
        get: {
          settings: function(animation, duration, onComplete) {
            // single settings object
            if(typeof animation == 'object') {
              return $.extend(true, {***REMOVED***, $.fn.transition.settings, animation);
          ***REMOVED***
            // all arguments provided
            else if(typeof onComplete == 'function') {
              return $.extend({***REMOVED***, $.fn.transition.settings, {
                animation  : animation,
                onComplete : onComplete,
                duration   : duration
            ***REMOVED***);
          ***REMOVED***
            // only duration provided
            else if(typeof duration == 'string' || typeof duration == 'number') {
              return $.extend({***REMOVED***, $.fn.transition.settings, {
                animation : animation,
                duration  : duration
            ***REMOVED***);
          ***REMOVED***
            // duration is actually settings object
            else if(typeof duration == 'object') {
              return $.extend({***REMOVED***, $.fn.transition.settings, duration, {
                animation : animation
            ***REMOVED***);
          ***REMOVED***
            // duration is actually callback
            else if(typeof duration == 'function') {
              return $.extend({***REMOVED***, $.fn.transition.settings, {
                animation  : animation,
                onComplete : duration
            ***REMOVED***);
          ***REMOVED***
            // only animation provided
            else {
              return $.extend({***REMOVED***, $.fn.transition.settings, {
                animation : animation
            ***REMOVED***);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          animationClass: function(animation) {
            var
              animationClass = animation || settings.animation,
              directionClass = (module.can.transition() && !module.has.direction())
                ? module.get.direction() + ' '
                : ''
            ;
            return className.animating + ' '
              + className.transition + ' '
              + directionClass
              + animationClass
            ;
   ***REMOVED*****REMOVED***
          currentAnimation: function() {
            return (module.cache && module.cache.animation !== undefined)
              ? module.cache.animation
              : false
            ;
   ***REMOVED*****REMOVED***
          currentDirection: function() {
            return module.is.inward()
              ? className.inward
              : className.outward
            ;
   ***REMOVED*****REMOVED***
          direction: function() {
            return module.is.hidden() || !module.is.visible()
              ? className.inward
              : className.outward
            ;
   ***REMOVED*****REMOVED***
          animationDirection: function(animation) {
            var
              direction
            ;
            animation = animation || settings.animation;
            if(typeof animation === 'string') {
              animation = animation.split(' ');
              // search animation name for out/in class
              $.each(animation, function(index, word){
                if(word === className.inward) {
                  direction = className.inward;
              ***REMOVED***
                else if(word === className.outward) {
                  direction = className.outward;
              ***REMOVED***
            ***REMOVED***);
          ***REMOVED***
            // return found direction
            if(direction) {
              return direction;
          ***REMOVED***
            return false;
   ***REMOVED*****REMOVED***
          duration: function(duration) {
            duration = duration || settings.duration;
            if(duration === false) {
              duration = $module.css('animation-duration') || 0;
          ***REMOVED***
            return (typeof duration === 'string')
              ? (duration.indexOf('ms') > -1)
                ? parseFloat(duration)
                : parseFloat(duration)***REMOVED*** 1000
              : duration
            ;
   ***REMOVED*****REMOVED***
          displayType: function(shouldDetermine) {
            shouldDetermine = (shouldDetermine !== undefined)
              ? shouldDetermine
              : true
            ;
            if(settings.displayType) {
              return settings.displayType;
          ***REMOVED***
            if(shouldDetermine && $module.data(metadata.displayType) === undefined) {
              var currentDisplay = $module.css('display');
              if(currentDisplay === '' || currentDisplay === 'none'){
              // create fake element to determine display state
                module.can.transition(true);
            ***REMOVED*** else {
                module.save.displayType(currentDisplay);
            ***REMOVED***
          ***REMOVED***
            return $module.data(metadata.displayType);
   ***REMOVED*****REMOVED***
          userStyle: function(style) {
            style = style || $module.attr('style') || '';
            return style.replace(/display.*?;/, '');
   ***REMOVED*****REMOVED***
          transitionExists: function(animation) {
            return $.fn.transition.exists[animation];
   ***REMOVED*****REMOVED***
          animationStartEvent: function() {
            var
              element     = document.createElement('div'),
              animations  = {
                'animation'       :'animationstart',
                'OAnimation'      :'oAnimationStart',
                'MozAnimation'    :'mozAnimationStart',
                'WebkitAnimation' :'webkitAnimationStart'
  ***REMOVED*****REMOVED*****REMOVED***
              animation
            ;
            for(animation in animations){
              if( element.style[animation] !== undefined ){
                return animations[animation];
            ***REMOVED***
          ***REMOVED***
            return false;
   ***REMOVED*****REMOVED***
          animationEndEvent: function() {
            var
              element     = document.createElement('div'),
              animations  = {
                'animation'       :'animationend',
                'OAnimation'      :'oAnimationEnd',
                'MozAnimation'    :'mozAnimationEnd',
                'WebkitAnimation' :'webkitAnimationEnd'
  ***REMOVED*****REMOVED*****REMOVED***
              animation
            ;
            for(animation in animations){
              if( element.style[animation] !== undefined ){
                return animations[animation];
            ***REMOVED***
          ***REMOVED***
            return false;
        ***REMOVED***

 ***REMOVED*****REMOVED***

        can: {
          transition: function(forced) {
            var
              animation         = settings.animation,
              transitionExists  = module.get.transitionExists(animation),
              displayType       = module.get.displayType(false),
              elementClass,
              tagName,
              $clone,
              currentAnimation,
              inAnimation,
              directionExists
            ;
            if( transitionExists === undefined || forced) {
              module.verbose('Determining whether animation exists');
              elementClass = $module.attr('class');
              tagName      = $module.prop('tagName');

              $clone = $('<' + tagName + ' />').addClass( elementClass ).insertAfter($module);
              currentAnimation = $clone
                .addClass(animation)
                .removeClass(className.inward)
                .removeClass(className.outward)
                .addClass(className.animating)
                .addClass(className.transition)
                .css('animationName')
              ;
              inAnimation = $clone
                .addClass(className.inward)
                .css('animationName')
              ;
              if(!displayType) {
                displayType = $clone
                  .attr('class', elementClass)
                  .removeAttr('style')
                  .removeClass(className.hidden)
                  .removeClass(className.visible)
                  .show()
                  .css('display')
                ;
                module.verbose('Determining final display state', displayType);
                module.save.displayType(displayType);
            ***REMOVED***

              $clone.remove();
              if(currentAnimation != inAnimation) {
                module.debug('Direction exists for animation', animation);
                directionExists = true;
            ***REMOVED***
              else if(currentAnimation == 'none' || !currentAnimation) {
                module.debug('No animation defined in css', animation);
                return;
            ***REMOVED***
              else {
                module.debug('Static animation found', animation, displayType);
                directionExists = false;
            ***REMOVED***
              module.save.transitionExists(animation, directionExists);
          ***REMOVED***
            return (transitionExists !== undefined)
              ? transitionExists
              : directionExists
            ;
   ***REMOVED*****REMOVED***
          animate: function() {
            // can transition does not return a value if animation does not exist
            return (module.can.transition() !== undefined);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        is: {
          animating: function() {
            return $module.hasClass(className.animating);
   ***REMOVED*****REMOVED***
          inward: function() {
            return $module.hasClass(className.inward);
   ***REMOVED*****REMOVED***
          outward: function() {
            return $module.hasClass(className.outward);
   ***REMOVED*****REMOVED***
          looping: function() {
            return $module.hasClass(className.looping);
   ***REMOVED*****REMOVED***
          occurring: function(animation) {
            animation = animation || settings.animation;
            animation = '.' + animation.replace(' ', '.');
            return ( $module.filter(animation).length > 0 );
   ***REMOVED*****REMOVED***
          visible: function() {
            return $module.is(':visible');
   ***REMOVED*****REMOVED***
          hidden: function() {
            return $module.css('visibility') === 'hidden';
   ***REMOVED*****REMOVED***
          supported: function() {
            return(animationEnd !== false);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        hide: function() {
          module.verbose('Hiding element');
          if( module.is.animating() ) {
            module.reset();
        ***REMOVED***
          element.blur(); // IE will trigger focus change if element is not blurred before hiding
          module.remove.display();
          module.remove.visible();
          if($.isFunction(settings.onBeforeHide)){
            settings.onBeforeHide.call(element,function(){
                module.hideNow();
          ***REMOVED***);
        ***REMOVED*** else {
              module.hideNow();
        ***REMOVED***

 ***REMOVED*****REMOVED***

        hideNow: function() {
            module.set.hidden();
            module.force.hidden();
            settings.onHide.call(element);
            settings.onComplete.call(element);
            // module.repaint();
 ***REMOVED*****REMOVED***

        show: function(display) {
          module.verbose('Showing element', display);
          if(module.force.visible()) {
            module.remove.hidden();
            module.set.visible();
            settings.onShow.call(element);
            settings.onComplete.call(element);
            // module.repaint();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        toggle: function() {
          if( module.is.visible() ) {
            module.hide();
        ***REMOVED***
          else {
            module.show();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        stop: function() {
          module.debug('Stopping current animation');
          $module.triggerHandler(animationEnd);
 ***REMOVED*****REMOVED***

        stopAll: function() {
          module.debug('Stopping all animation');
          module.remove.queueCallback();
          $module.triggerHandler(animationEnd);
 ***REMOVED*****REMOVED***

        clear: {
          queue: function() {
            module.debug('Clearing animation queue');
            module.remove.queueCallback();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        enable: function() {
          module.verbose('Starting animation');
          $module.removeClass(className.disabled);
 ***REMOVED*****REMOVED***

        disable: function() {
          module.debug('Stopping animation');
          $module.addClass(className.disabled);
 ***REMOVED*****REMOVED***

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            if($.isPlainObject(settings[name])) {
              $.extend(true, settings[name], value);
          ***REMOVED***
            else {
              settings[name] = value;
          ***REMOVED***
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if($allModules.length > 1) {
              title += ' ' + '(' + $allModules.length + ')';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        // modified for transition to return invoke success
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***

          if(Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return (found !== undefined)
            ? found
            : false
          ;
      ***REMOVED***
    ***REMOVED***;
      module.initialize();
  ***REMOVED***)
  ;
  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
***REMOVED***;

// Records if CSS transition is available
$.fn.transition.exists = {***REMOVED***;

$.fn.transition.settings = {

  // module info
  name          : 'Transition',

  // hide all output from this component regardless of other settings
  silent        : false,

  // debug content outputted to console
  debug         : false,

  // verbose debug output
  verbose       : false,

  // performance data output
  performance   : true,

  // event namespace
  namespace     : 'transition',

  // delay between animations in group
  interval      : 0,

  // whether group animations should be reversed
  reverse       : 'auto',

  // animation callback event
  onStart       : function() {***REMOVED***,
  onComplete    : function() {***REMOVED***,
  onShow        : function() {***REMOVED***,
  onHide        : function() {***REMOVED***,

  // whether timeout should be used to ensure callback fires in cases animationend does not
  useFailSafe   : true,

  // delay in ms for fail safe
  failSafeDelay : 100,

  // whether EXACT animation can occur twice in a row
  allowRepeats  : false,

  // Override final display type on visible
  displayType   : false,

  // animation duration
  animation     : 'fade',
  duration      : false,

  // new animations will occur after previous ones
  queue         : true,

// whether initially inline hidden objects should be skipped for transition
  skipInlineHidden: false,

  metadata : {
    displayType: 'display'
***REMOVED***

  className   : {
    animating  : 'animating',
    disabled   : 'disabled',
    hidden     : 'hidden',
    inward     : 'in',
    loading    : 'loading',
    looping    : 'looping',
    outward    : 'out',
    transition : 'transition',
    visible    : 'visible'
***REMOVED***

  // possible errors
  error: {
    noAnimation : 'Element is no longer attached to DOM. Unable to animate.  Use silent setting to surpress this warning in production.',
    repeated    : 'That animation is already occurring, cancelling repeated animation',
    method      : 'The method you called is not defined',
    support     : 'This browser does not support CSS animations'
***REMOVED***

***REMOVED***;


***REMOVED***)( jQuery, window, document );

/*!
***REMOVED*** # Fomantic-UI - API
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

***REMOVED***;

$.isWindow = $.isWindow || function(obj) {
  return obj != null && obj === obj.window;
***REMOVED***;

  window = (typeof window != 'undefined' && window.Math == Math)
    ? window
    : (typeof self != 'undefined' && self.Math == Math)
      ? self
      : Function('return this')()
;

$.api = $.fn.api = function(parameters) {

  var
    // use window context if none specified
    $allModules     = $.isFunction(this)
        ? $(window)
        : $(this),
    moduleSelector = $allModules.selector || '',
    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),

    returnedValue
  ;

  $allModules
    .each(function() {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {***REMOVED***, $.fn.api.settings, parameters)
          : $.extend({***REMOVED***, $.fn.api.settings),

        // internal aliases
        namespace       = settings.namespace,
        metadata        = settings.metadata,
        selector        = settings.selector,
        error           = settings.error,
        className       = settings.className,

        // define namespaces for modules
        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        // element that creates request
        $module         = $(this),
        $form           = $module.closest(selector.form),

        // context used for state
        $context        = (settings.stateContext)
          ? $(settings.stateContext)
          : $module,

        // request details
        ajaxSettings,
        requestSettings,
        url,
        data,
        requestStartTime,

        // standard module
        element         = this,
        context         = $context[0],
        instance        = $module.data(moduleNamespace),
        module
      ;

      module = {

        initialize: function() {
          if(!methodInvoked) {
            module.bind.events();
        ***REMOVED***
          module.instantiate();
 ***REMOVED*****REMOVED***

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, instance)
          ;
 ***REMOVED*****REMOVED***

        destroy: function() {
          module.verbose('Destroying previous module for', element);
          $module
            .removeData(moduleNamespace)
            .off(eventNamespace)
          ;
 ***REMOVED*****REMOVED***

        bind: {
          events: function() {
            var
              triggerEvent = module.get.event()
            ;
            if( triggerEvent ) {
              module.verbose('Attaching API events to element', triggerEvent);
              $module
                .on(triggerEvent + eventNamespace, module.event.trigger)
              ;
          ***REMOVED***
            else if(settings.on == 'now') {
              module.debug('Querying API endpoint immediately');
              module.query();
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        decode: {
          json: function(response) {
            if(response !== undefined && typeof response == 'string') {
              try {
               response = JSON.parse(response);
            ***REMOVED***
              catch(e) {
                // isnt json string
            ***REMOVED***
          ***REMOVED***
            return response;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        read: {
          cachedResponse: function(url) {
            var
              response
            ;
            if(window.Storage === undefined) {
              module.error(error.noStorage);
              return;
          ***REMOVED***
            response = sessionStorage.getItem(url);
            module.debug('Using cached response', url, response);
            response = module.decode.json(response);
            return response;
        ***REMOVED***
 ***REMOVED*****REMOVED***
        write: {
          cachedResponse: function(url, response) {
            if(response && response === '') {
              module.debug('Response empty, not caching', response);
              return;
          ***REMOVED***
            if(window.Storage === undefined) {
              module.error(error.noStorage);
              return;
          ***REMOVED***
            if( $.isPlainObject(response) ) {
              response = JSON.stringify(response);
          ***REMOVED***
            sessionStorage.setItem(url, response);
            module.verbose('Storing cached response for url', url, response);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        query: function() {

          if(module.is.disabled()) {
            module.debug('Element is disabled API request aborted');
            return;
        ***REMOVED***

          if(module.is.loading()) {
            if(settings.interruptRequests) {
              module.debug('Interrupting previous request');
              module.abort();
          ***REMOVED***
            else {
              module.debug('Cancelling request, previous request is still pending');
              return;
          ***REMOVED***
        ***REMOVED***

          // pass element metadata to url (value, text)
          if(settings.defaultData) {
            $.extend(true, settings.urlData, module.get.defaultData());
        ***REMOVED***

          // Add form content
          if(settings.serializeForm) {
            settings.data = module.add.formData(settings.data);
        ***REMOVED***

          // call beforesend and get any settings changes
          requestSettings = module.get.settings();

          // check if before send cancelled request
          if(requestSettings === false) {
            module.cancelled = true;
            module.error(error.beforeSend);
            return;
        ***REMOVED***
          else {
            module.cancelled = false;
        ***REMOVED***

          // get url
          url = module.get.templatedURL();

          if(!url && !module.is.mocked()) {
            module.error(error.missingURL);
            return;
        ***REMOVED***

          // replace variables
          url = module.add.urlData( url );
          // missing url parameters
          if( !url && !module.is.mocked()) {
            return;
        ***REMOVED***

          requestSettings.url = settings.base + url;

          // look for jQuery ajax parameters in settings
          ajaxSettings = $.extend(true, {***REMOVED***, settings, {
            type       : settings.method || settings.type,
            data       : data,
            url        : settings.base + url,
            beforeSend : settings.beforeXHR,
            success    : function() {***REMOVED***,
            failure    : function() {***REMOVED***,
            complete   : function() {***REMOVED***
        ***REMOVED***);

          module.debug('Querying URL', ajaxSettings.url);
          module.verbose('Using AJAX settings', ajaxSettings);
          if(settings.cache === 'local' && module.read.cachedResponse(url)) {
            module.debug('Response returned from local cache');
            module.request = module.create.request();
            module.request.resolveWith(context, [ module.read.cachedResponse(url) ]);
            return;
        ***REMOVED***

          if( !settings.throttle ) {
            module.debug('Sending request', data, ajaxSettings.method);
            module.send.request();
        ***REMOVED***
          else {
            if(!settings.throttleFirstRequest && !module.timer) {
              module.debug('Sending request', data, ajaxSettings.method);
              module.send.request();
              module.timer = setTimeout(function(){***REMOVED***, settings.throttle);
          ***REMOVED***
            else {
              module.debug('Throttling request', settings.throttle);
              clearTimeout(module.timer);
              module.timer = setTimeout(function() {
                if(module.timer) {
                  delete module.timer;
              ***REMOVED***
                module.debug('Sending throttled request', data, ajaxSettings.method);
                module.send.request();
  ***REMOVED*****REMOVED*****REMOVED*** settings.throttle);
          ***REMOVED***
        ***REMOVED***

 ***REMOVED*****REMOVED***

        should: {
          removeError: function() {
            return ( settings.hideError === true || (settings.hideError === 'auto' && !module.is.form()) );
        ***REMOVED***
 ***REMOVED*****REMOVED***

        is: {
          disabled: function() {
            return ($module.filter(selector.disabled).length > 0);
   ***REMOVED*****REMOVED***
          expectingJSON: function() {
            return settings.dataType === 'json' || settings.dataType === 'jsonp';
   ***REMOVED*****REMOVED***
          form: function() {
            return $module.is('form') || $context.is('form');
   ***REMOVED*****REMOVED***
          mocked: function() {
            return (settings.mockResponse || settings.mockResponseAsync || settings.response || settings.responseAsync);
   ***REMOVED*****REMOVED***
          input: function() {
            return $module.is('input');
   ***REMOVED*****REMOVED***
          loading: function() {
            return (module.request)
              ? (module.request.state() == 'pending')
              : false
            ;
   ***REMOVED*****REMOVED***
          abortedRequest: function(xhr) {
            if(xhr && xhr.readyState !== undefined && xhr.readyState === 0) {
              module.verbose('XHR request determined to be aborted');
              return true;
          ***REMOVED***
            else {
              module.verbose('XHR request was not aborted');
              return false;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          validResponse: function(response) {
            if( (!module.is.expectingJSON()) || !$.isFunction(settings.successTest) ) {
              module.verbose('Response is not JSON, skipping validation', settings.successTest, response);
              return true;
          ***REMOVED***
            module.debug('Checking JSON returned success', settings.successTest, response);
            if( settings.successTest(response) ) {
              module.debug('Response passed success test', response);
              return true;
          ***REMOVED***
            else {
              module.debug('Response failed success test', response);
              return false;
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        was: {
          cancelled: function() {
            return (module.cancelled || false);
   ***REMOVED*****REMOVED***
          succesful: function() {
            module.verbose('This behavior will be deleted due to typo. Use "was successful" instead.');
            return module.was.successful();
   ***REMOVED*****REMOVED***
          successful: function() {
            return (module.request && module.request.state() == 'resolved');
   ***REMOVED*****REMOVED***
          failure: function() {
            return (module.request && module.request.state() == 'rejected');
   ***REMOVED*****REMOVED***
          complete: function() {
            return (module.request && (module.request.state() == 'resolved' || module.request.state() == 'rejected') );
        ***REMOVED***
 ***REMOVED*****REMOVED***

        add: {
          urlData: function(url, urlData) {
            var
              requiredVariables,
              optionalVariables
            ;
            if(url) {
              requiredVariables = url.match(settings.regExp.required);
              optionalVariables = url.match(settings.regExp.optional);
              urlData           = urlData || settings.urlData;
              if(requiredVariables) {
                module.debug('Looking for required URL variables', requiredVariables);
                $.each(requiredVariables, function(index, templatedString) {
                  var
                    // allow legacy {$var***REMOVED*** style
                    variable = (templatedString.indexOf('$') !== -1)
                      ? templatedString.substr(2, templatedString.length - 3)
                      : templatedString.substr(1, templatedString.length - 2),
                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)
                      ? urlData[variable]
                      : ($module.data(variable) !== undefined)
                        ? $module.data(variable)
                        : ($context.data(variable) !== undefined)
                          ? $context.data(variable)
                          : urlData[variable]
                  ;
                  // remove value
                  if(value === undefined) {
                    module.error(error.requiredParameter, variable, url);
                    url = false;
                    return false;
                ***REMOVED***
                  else {
                    module.verbose('Found required variable', variable, value);
                    value = (settings.encodeParameters)
                      ? module.get.urlEncodedValue(value)
                      : value
                    ;
                    url = url.replace(templatedString, value);
                ***REMOVED***
              ***REMOVED***);
            ***REMOVED***
              if(optionalVariables) {
                module.debug('Looking for optional URL variables', requiredVariables);
                $.each(optionalVariables, function(index, templatedString) {
                  var
                    // allow legacy {/$var***REMOVED*** style
                    variable = (templatedString.indexOf('$') !== -1)
                      ? templatedString.substr(3, templatedString.length - 4)
                      : templatedString.substr(2, templatedString.length - 3),
                    value   = ($.isPlainObject(urlData) && urlData[variable] !== undefined)
                      ? urlData[variable]
                      : ($module.data(variable) !== undefined)
                        ? $module.data(variable)
                        : ($context.data(variable) !== undefined)
                          ? $context.data(variable)
                          : urlData[variable]
                  ;
                  // optional replacement
                  if(value !== undefined) {
                    module.verbose('Optional variable Found', variable, value);
                    url = url.replace(templatedString, value);
                ***REMOVED***
                  else {
                    module.verbose('Optional variable not found', variable);
                    // remove preceding slash if set
                    if(url.indexOf('/' + templatedString) !== -1) {
                      url = url.replace('/' + templatedString, '');
                  ***REMOVED***
                    else {
                      url = url.replace(templatedString, '');
                  ***REMOVED***
                ***REMOVED***
              ***REMOVED***);
            ***REMOVED***
          ***REMOVED***
            return url;
   ***REMOVED*****REMOVED***
          formData: function(data) {
            var
              canSerialize = ($.fn.serializeObject !== undefined),
              formData     = (canSerialize)
                ? $form.serializeObject()
                : $form.serialize(),
              hasOtherData
            ;
            data         = data || settings.data;
            hasOtherData = $.isPlainObject(data);

            if(hasOtherData) {
              if(canSerialize) {
                module.debug('Extending existing data with form data', data, formData);
                data = $.extend(true, {***REMOVED***, data, formData);
            ***REMOVED***
              else {
                module.error(error.missingSerialize);
                module.debug('Cant extend data. Replacing data with form data', data, formData);
                data = formData;
            ***REMOVED***
          ***REMOVED***
            else {
              module.debug('Adding form data', formData);
              data = formData;
          ***REMOVED***
            return data;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        send: {
          request: function() {
            module.set.loading();
            module.request = module.create.request();
            if( module.is.mocked() ) {
              module.mockedXHR = module.create.mockedXHR();
          ***REMOVED***
            else {
              module.xhr = module.create.xhr();
          ***REMOVED***
            settings.onRequest.call(context, module.request, module.xhr);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        event: {
          trigger: function(event) {
            module.query();
            if(event.type == 'submit' || event.type == 'click') {
              event.preventDefault();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          xhr: {
            always: function() {
              // nothing special
***REMOVED*****REMOVED*****REMOVED***
            done: function(response, textStatus, xhr) {
              var
                context            = this,
                elapsedTime        = (new Date().getTime() - requestStartTime),
                timeLeft           = (settings.loadingDuration - elapsedTime),
                translatedResponse = ( $.isFunction(settings.onResponse) )
                  ? module.is.expectingJSON() && !settings.rawResponse
                    ? settings.onResponse.call(context, $.extend(true, {***REMOVED***, response))
                    : settings.onResponse.call(context, response)
                  : false
              ;
              timeLeft = (timeLeft > 0)
                ? timeLeft
                : 0
              ;
              if(translatedResponse) {
                module.debug('Modified API response in onResponse callback', settings.onResponse, translatedResponse, response);
                response = translatedResponse;
            ***REMOVED***
              if(timeLeft > 0) {
                module.debug('Response completed early delaying state change by', timeLeft);
            ***REMOVED***
              setTimeout(function() {
                if( module.is.validResponse(response) ) {
                  module.request.resolveWith(context, [response, xhr]);
              ***REMOVED***
                else {
                  module.request.rejectWith(context, [xhr, 'invalid']);
              ***REMOVED***
  ***REMOVED*****REMOVED*****REMOVED*** timeLeft);
***REMOVED*****REMOVED*****REMOVED***
            fail: function(xhr, status, httpMessage) {
              var
                context     = this,
                elapsedTime = (new Date().getTime() - requestStartTime),
                timeLeft    = (settings.loadingDuration - elapsedTime)
              ;
              timeLeft = (timeLeft > 0)
                ? timeLeft
                : 0
              ;
              if(timeLeft > 0) {
                module.debug('Response completed early delaying state change by', timeLeft);
            ***REMOVED***
              setTimeout(function() {
                if( module.is.abortedRequest(xhr) ) {
                  module.request.rejectWith(context, [xhr, 'aborted', httpMessage]);
              ***REMOVED***
                else {
                  module.request.rejectWith(context, [xhr, 'error', status, httpMessage]);
              ***REMOVED***
  ***REMOVED*****REMOVED*****REMOVED*** timeLeft);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          request: {
            done: function(response, xhr) {
              module.debug('Successful API Response', response);
              if(settings.cache === 'local' && url) {
                module.write.cachedResponse(url, response);
                module.debug('Saving server response locally', module.cache);
            ***REMOVED***
              settings.onSuccess.call(context, response, $module, xhr);
***REMOVED*****REMOVED*****REMOVED***
            complete: function(firstParameter, secondParameter) {
              var
                xhr,
                response
              ;
              // have to guess callback parameters based on request success
              if( module.was.successful() ) {
                response = firstParameter;
                xhr      = secondParameter;
            ***REMOVED***
              else {
                xhr      = firstParameter;
                response = module.get.responseFromXHR(xhr);
            ***REMOVED***
              module.remove.loading();
              settings.onComplete.call(context, response, $module, xhr);
***REMOVED*****REMOVED*****REMOVED***
            fail: function(xhr, status, httpMessage) {
              var
                // pull response from xhr if available
                response     = module.get.responseFromXHR(xhr),
                errorMessage = module.get.errorFromRequest(response, status, httpMessage)
              ;
              if(status == 'aborted') {
                module.debug('XHR Aborted (Most likely caused by page navigation or CORS Policy)', status, httpMessage);
                settings.onAbort.call(context, status, $module, xhr);
                return true;
            ***REMOVED***
              else if(status == 'invalid') {
                module.debug('JSON did not pass success test. A server-side error has most likely occurred', response);
            ***REMOVED***
              else if(status == 'error') {
                if(xhr !== undefined) {
                  module.debug('XHR produced a server error', status, httpMessage);
                  // make sure we have an error to display to console
                  if( (xhr.status < 200 || xhr.status >= 300) && httpMessage !== undefined && httpMessage !== '') {
                    module.error(error.statusMessage + httpMessage, ajaxSettings.url);
                ***REMOVED***
                  settings.onError.call(context, errorMessage, $module, xhr);
              ***REMOVED***
            ***REMOVED***

              if(settings.errorDuration && status !== 'aborted') {
                module.debug('Adding error state');
                module.set.error();
                if( module.should.removeError() ) {
                  setTimeout(module.remove.error, settings.errorDuration);
              ***REMOVED***
            ***REMOVED***
              module.debug('API Request failed', errorMessage, xhr);
              settings.onFailure.call(context, response, $module, xhr);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        create: {

          request: function() {
            // api request promise
            return $.Deferred()
              .always(module.event.request.complete)
              .done(module.event.request.done)
              .fail(module.event.request.fail)
            ;
   ***REMOVED*****REMOVED***

          mockedXHR: function () {
            var
              // xhr does not simulate these properties of xhr but must return them
              textStatus     = false,
              status         = false,
              httpMessage    = false,
              responder      = settings.mockResponse      || settings.response,
              asyncResponder = settings.mockResponseAsync || settings.responseAsync,
              asyncCallback,
              response,
              mockedXHR
            ;

            mockedXHR = $.Deferred()
              .always(module.event.xhr.complete)
              .done(module.event.xhr.done)
              .fail(module.event.xhr.fail)
            ;

            if(responder) {
              if( $.isFunction(responder) ) {
                module.debug('Using specified synchronous callback', responder);
                response = responder.call(context, requestSettings);
            ***REMOVED***
              else {
                module.debug('Using settings specified response', responder);
                response = responder;
            ***REMOVED***
              // simulating response
              mockedXHR.resolveWith(context, [ response, textStatus, { responseText: response ***REMOVED***]);
          ***REMOVED***
            else if( $.isFunction(asyncResponder) ) {
              asyncCallback = function(response) {
                module.debug('Async callback returned response', response);

                if(response) {
                  mockedXHR.resolveWith(context, [ response, textStatus, { responseText: response ***REMOVED***]);
              ***REMOVED***
                else {
                  mockedXHR.rejectWith(context, [{ responseText: response ***REMOVED***, status, httpMessage]);
              ***REMOVED***
            ***REMOVED***;
              module.debug('Using specified async response callback', asyncResponder);
              asyncResponder.call(context, requestSettings, asyncCallback);
          ***REMOVED***
            return mockedXHR;
   ***REMOVED*****REMOVED***

          xhr: function() {
            var
              xhr
            ;
            // ajax request promise
            xhr = $.ajax(ajaxSettings)
              .always(module.event.xhr.always)
              .done(module.event.xhr.done)
              .fail(module.event.xhr.fail)
            ;
            module.verbose('Created server request', xhr, ajaxSettings);
            return xhr;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        set: {
          error: function() {
            module.verbose('Adding error state to element', $context);
            $context.addClass(className.error);
   ***REMOVED*****REMOVED***
          loading: function() {
            module.verbose('Adding loading state to element', $context);
            $context.addClass(className.loading);
            requestStartTime = new Date().getTime();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        remove: {
          error: function() {
            module.verbose('Removing error state from element', $context);
            $context.removeClass(className.error);
   ***REMOVED*****REMOVED***
          loading: function() {
            module.verbose('Removing loading state from element', $context);
            $context.removeClass(className.loading);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        get: {
          responseFromXHR: function(xhr) {
            return $.isPlainObject(xhr)
              ? (module.is.expectingJSON())
                ? module.decode.json(xhr.responseText)
                : xhr.responseText
              : false
            ;
   ***REMOVED*****REMOVED***
          errorFromRequest: function(response, status, httpMessage) {
            return ($.isPlainObject(response) && response.error !== undefined)
              ? response.error // use json error message
              : (settings.error[status] !== undefined) // use server error message
                ? settings.error[status]
                : httpMessage
            ;
   ***REMOVED*****REMOVED***
          request: function() {
            return module.request || false;
   ***REMOVED*****REMOVED***
          xhr: function() {
            return module.xhr || false;
   ***REMOVED*****REMOVED***
          settings: function() {
            var
              runSettings
            ;
            runSettings = settings.beforeSend.call($module, settings);
            if(runSettings) {
              if(runSettings.success !== undefined) {
                module.debug('Legacy success callback detected', runSettings);
                module.error(error.legacyParameters, runSettings.success);
                runSettings.onSuccess = runSettings.success;
            ***REMOVED***
              if(runSettings.failure !== undefined) {
                module.debug('Legacy failure callback detected', runSettings);
                module.error(error.legacyParameters, runSettings.failure);
                runSettings.onFailure = runSettings.failure;
            ***REMOVED***
              if(runSettings.complete !== undefined) {
                module.debug('Legacy complete callback detected', runSettings);
                module.error(error.legacyParameters, runSettings.complete);
                runSettings.onComplete = runSettings.complete;
            ***REMOVED***
          ***REMOVED***
            if(runSettings === undefined) {
              module.error(error.noReturnedValue);
          ***REMOVED***
            if(runSettings === false) {
              return runSettings;
          ***REMOVED***
            return (runSettings !== undefined)
              ? $.extend(true, {***REMOVED***, runSettings)
              : $.extend(true, {***REMOVED***, settings)
            ;
   ***REMOVED*****REMOVED***
          urlEncodedValue: function(value) {
            var
              decodedValue   = window.decodeURIComponent(value),
              encodedValue   = window.encodeURIComponent(value),
              alreadyEncoded = (decodedValue !== value)
            ;
            if(alreadyEncoded) {
              module.debug('URL value is already encoded, avoiding double encoding', value);
              return value;
          ***REMOVED***
            module.verbose('Encoding value using encodeURIComponent', value, encodedValue);
            return encodedValue;
   ***REMOVED*****REMOVED***
          defaultData: function() {
            var
              data = {***REMOVED***
            ;
            if( !$.isWindow(element) ) {
              if( module.is.input() ) {
                data.value = $module.val();
            ***REMOVED***
              else if( module.is.form() ) {

            ***REMOVED***
              else {
                data.text = $module.text();
            ***REMOVED***
          ***REMOVED***
            return data;
   ***REMOVED*****REMOVED***
          event: function() {
            if( $.isWindow(element) || settings.on == 'now' ) {
              module.debug('API called without element, no events attached');
              return false;
          ***REMOVED***
            else if(settings.on == 'auto') {
              if( $module.is('input') ) {
                return (element.oninput !== undefined)
                  ? 'input'
                  : (element.onpropertychange !== undefined)
                    ? 'propertychange'
                    : 'keyup'
                ;
            ***REMOVED***
              else if( $module.is('form') ) {
                return 'submit';
            ***REMOVED***
              else {
                return 'click';
            ***REMOVED***
          ***REMOVED***
            else {
              return settings.on;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          templatedURL: function(action) {
            action = action || $module.data(metadata.action) || settings.action || false;
            url    = $module.data(metadata.url) || settings.url || false;
            if(url) {
              module.debug('Using specified url', url);
              return url;
          ***REMOVED***
            if(action) {
              module.debug('Looking up url for action', action, settings.api);
              if(settings.api[action] === undefined && !module.is.mocked()) {
                module.error(error.missingAction, settings.action, settings.api);
                return;
            ***REMOVED***
              url = settings.api[action];
          ***REMOVED***
            else if( module.is.form() ) {
              url = $module.attr('action') || $context.attr('action') || false;
              module.debug('No url or action specified, defaulting to form action', url);
          ***REMOVED***
            return url;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        abort: function() {
          var
            xhr = module.get.xhr()
          ;
          if( xhr && xhr.state() !== 'resolved') {
            module.debug('Cancelling API request');
            xhr.abort();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        // reset state
        reset: function() {
          module.remove.error();
          module.remove.loading();
 ***REMOVED*****REMOVED***

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            if($.isPlainObject(settings[name])) {
              $.extend(true, settings[name], value);
          ***REMOVED***
            else {
              settings[name] = value;
          ***REMOVED***
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                //'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                module.error(error.method, query);
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***
          if(Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***;

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
      ***REMOVED***
        module.invoke(query);
    ***REMOVED***
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
      ***REMOVED***
        module.initialize();
    ***REMOVED***
  ***REMOVED***)
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
***REMOVED***;

$.api.settings = {

  name              : 'API',
  namespace         : 'api',

  debug             : false,
  verbose           : false,
  performance       : true,

  // object containing all templates endpoints
  api               : {***REMOVED***,

  // whether to cache responses
  cache             : true,

  // whether new requests should abort previous requests
  interruptRequests : true,

  // event binding
  on                : 'auto',

  // context for applying state classes
  stateContext      : false,

  // duration for loading state
  loadingDuration   : 0,

  // whether to hide errors after a period of time
  hideError         : 'auto',

  // duration for error state
  errorDuration     : 2000,

  // whether parameters should be encoded with encodeURIComponent
  encodeParameters  : true,

  // API action to use
  action            : false,

  // templated URL to use
  url               : false,

  // base URL to apply to all endpoints
  base              : '',

  // data that will
  urlData           : {***REMOVED***,

  // whether to add default data to url data
  defaultData          : true,

  // whether to serialize closest form
  serializeForm        : false,

  // how long to wait before request should occur
  throttle             : 0,

  // whether to throttle first request or only repeated
  throttleFirstRequest : true,

  // standard ajax settings
  method            : 'get',
  data              : {***REMOVED***,
  dataType          : 'json',

  // mock response
  mockResponse      : false,
  mockResponseAsync : false,

  // aliases for mock
  response          : false,
  responseAsync     : false,

// whether onResponse should work with response value without force converting into an object
  rawResponse       : false,

  // callbacks before request
  beforeSend  : function(settings) { return settings; ***REMOVED***,
  beforeXHR   : function(xhr) {***REMOVED***,
  onRequest   : function(promise, xhr) {***REMOVED***,

  // after request
  onResponse  : false, // function(response) { ***REMOVED***,

  // response was successful, if JSON passed validation
  onSuccess   : function(response, $module) {***REMOVED***,

  // request finished without aborting
  onComplete  : function(response, $module) {***REMOVED***,

  // failed JSON success test
  onFailure   : function(response, $module) {***REMOVED***,

  // server error
  onError     : function(errorMessage, $module) {***REMOVED***,

  // request aborted
  onAbort     : function(errorMessage, $module) {***REMOVED***,

  successTest : false,

  // errors
  error : {
    beforeSend        : 'The before send function has aborted the request',
    error             : 'There was an error with your request',
    exitConditions    : 'API Request Aborted. Exit conditions met',
    JSONParse         : 'JSON could not be parsed during error handling',
    legacyParameters  : 'You are using legacy API success callback names',
    method            : 'The method you called is not defined',
    missingAction     : 'API action used but no url was defined',
    missingSerialize  : 'jquery-serialize-object is required to add form data to an existing data object',
    missingURL        : 'No URL specified for api event',
    noReturnedValue   : 'The beforeSend callback must return a settings object, beforeSend ignored.',
    noStorage         : 'Caching responses locally requires session storage',
    parseError        : 'There was an error parsing your request',
    requiredParameter : 'Missing a required URL parameter: ',
    statusMessage     : 'Server gave an error: ',
    timeout           : 'Your request timed out'
***REMOVED***

  regExp  : {
    required : /\{\$*[A-z0-9]+\***REMOVED***/g,
    optional : /\{\/\$*[A-z0-9]+\***REMOVED***/g,
***REMOVED***

  className: {
    loading : 'loading',
    error   : 'error'
***REMOVED***

  selector: {
    disabled : '.disabled',
    form      : 'form'
***REMOVED***

  metadata: {
    action  : 'action',
    url     : 'url'
***REMOVED***
***REMOVED***;



***REMOVED***)( jQuery, window, document );

/*!
***REMOVED*** # Fomantic-UI - State
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

"use strict";

$.isFunction = $.isFunction || function(obj) {
  return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.state = function(parameters) {
  var
    $allModules     = $(this),

    moduleSelector  = $allModules.selector || '',

    time            = new Date().getTime(),
    performance     = [],

    query           = arguments[0],
    methodInvoked   = (typeof query == 'string'),
    queryArguments  = [].slice.call(arguments, 1),

    returnedValue
  ;
  $allModules
    .each(function() {
      var
        settings          = ( $.isPlainObject(parameters) )
          ? $.extend(true, {***REMOVED***, $.fn.state.settings, parameters)
          : $.extend({***REMOVED***, $.fn.state.settings),

        error           = settings.error,
        metadata        = settings.metadata,
        className       = settings.className,
        namespace       = settings.namespace,
        states          = settings.states,
        text            = settings.text,

        eventNamespace  = '.' + namespace,
        moduleNamespace = namespace + '-module',

        $module         = $(this),

        element         = this,
        instance        = $module.data(moduleNamespace),

        module
      ;
      module = {

        initialize: function() {
          module.verbose('Initializing module');

          // allow module to guess desired state based on element
          if(settings.automatic) {
            module.add.defaults();
        ***REMOVED***

          // bind events with delegated events
          if(settings.context && moduleSelector !== '') {
            $(settings.context)
              .on(moduleSelector, 'mouseenter' + eventNamespace, module.change.text)
              .on(moduleSelector, 'mouseleave' + eventNamespace, module.reset.text)
              .on(moduleSelector, 'click'      + eventNamespace, module.toggle.state)
            ;
        ***REMOVED***
          else {
            $module
              .on('mouseenter' + eventNamespace, module.change.text)
              .on('mouseleave' + eventNamespace, module.reset.text)
              .on('click'      + eventNamespace, module.toggle.state)
            ;
        ***REMOVED***
          module.instantiate();
 ***REMOVED*****REMOVED***

        instantiate: function() {
          module.verbose('Storing instance of module', module);
          instance = module;
          $module
            .data(moduleNamespace, module)
          ;
 ***REMOVED*****REMOVED***

        destroy: function() {
          module.verbose('Destroying previous module', instance);
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
 ***REMOVED*****REMOVED***

        refresh: function() {
          module.verbose('Refreshing selector cache');
          $module = $(element);
 ***REMOVED*****REMOVED***

        add: {
          defaults: function() {
            var
              userStates = parameters && $.isPlainObject(parameters.states)
                ? parameters.states
                : {***REMOVED***
            ;
            $.each(settings.defaults, function(type, typeStates) {
              if( module.is[type] !== undefined && module.is[type]() ) {
                module.verbose('Adding default states', type, element);
                $.extend(settings.states, typeStates, userStates);
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        is: {

          active: function() {
            return $module.hasClass(className.active);
   ***REMOVED*****REMOVED***
          loading: function() {
            return $module.hasClass(className.loading);
   ***REMOVED*****REMOVED***
          inactive: function() {
            return !( $module.hasClass(className.active) );
   ***REMOVED*****REMOVED***
          state: function(state) {
            if(className[state] === undefined) {
              return false;
          ***REMOVED***
            return $module.hasClass( className[state] );
   ***REMOVED*****REMOVED***

          enabled: function() {
            return !( $module.is(settings.filter.active) );
   ***REMOVED*****REMOVED***
          disabled: function() {
            return ( $module.is(settings.filter.active) );
   ***REMOVED*****REMOVED***
          textEnabled: function() {
            return !( $module.is(settings.filter.text) );
   ***REMOVED*****REMOVED***

          // definitions for automatic type detection
          button: function() {
            return $module.is('.button:not(a, .submit)');
   ***REMOVED*****REMOVED***
          input: function() {
            return $module.is('input');
   ***REMOVED*****REMOVED***
          progress: function() {
            return $module.is('.ui.progress');
        ***REMOVED***
 ***REMOVED*****REMOVED***

        allow: function(state) {
          module.debug('Now allowing state', state);
          states[state] = true;
 ***REMOVED*****REMOVED***
        disallow: function(state) {
          module.debug('No longer allowing', state);
          states[state] = false;
 ***REMOVED*****REMOVED***

        allows: function(state) {
          return states[state] || false;
 ***REMOVED*****REMOVED***

        enable: function() {
          $module.removeClass(className.disabled);
 ***REMOVED*****REMOVED***

        disable: function() {
          $module.addClass(className.disabled);
 ***REMOVED*****REMOVED***

        setState: function(state) {
          if(module.allows(state)) {
            $module.addClass( className[state] );
        ***REMOVED***
 ***REMOVED*****REMOVED***

        removeState: function(state) {
          if(module.allows(state)) {
            $module.removeClass( className[state] );
        ***REMOVED***
 ***REMOVED*****REMOVED***

        toggle: {
          state: function() {
            var
              apiRequest,
              requestCancelled
            ;
            if( module.allows('active') && module.is.enabled() ) {
              module.refresh();
              if($.fn.api !== undefined) {
                apiRequest       = $module.api('get request');
                requestCancelled = $module.api('was cancelled');
                if( requestCancelled ) {
                  module.debug('API Request cancelled by beforesend');
                  settings.activateTest   = function(){ return false; ***REMOVED***;
                  settings.deactivateTest = function(){ return false; ***REMOVED***;
              ***REMOVED***
                else if(apiRequest) {
                  module.listenTo(apiRequest);
                  return;
              ***REMOVED***
            ***REMOVED***
              module.change.state();
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        listenTo: function(apiRequest) {
          module.debug('API request detected, waiting for state signal', apiRequest);
          if(apiRequest) {
            if(text.loading) {
              module.update.text(text.loading);
          ***REMOVED***
            $.when(apiRequest)
              .then(function() {
                if(apiRequest.state() == 'resolved') {
                  module.debug('API request succeeded');
                  settings.activateTest   = function(){ return true; ***REMOVED***;
                  settings.deactivateTest = function(){ return true; ***REMOVED***;
              ***REMOVED***
                else {
                  module.debug('API request failed');
                  settings.activateTest   = function(){ return false; ***REMOVED***;
                  settings.deactivateTest = function(){ return false; ***REMOVED***;
              ***REMOVED***
                module.change.state();
            ***REMOVED***)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        // checks whether active/inactive state can be given
        change: {

          state: function() {
            module.debug('Determining state change direction');
            // inactive to active change
            if( module.is.inactive() ) {
              module.activate();
          ***REMOVED***
            else {
              module.deactivate();
          ***REMOVED***
            if(settings.sync) {
              module.sync();
          ***REMOVED***
            settings.onChange.call(element);
   ***REMOVED*****REMOVED***

          text: function() {
            if( module.is.textEnabled() ) {
              if(module.is.disabled() ) {
                module.verbose('Changing text to disabled text', text.hover);
                module.update.text(text.disabled);
            ***REMOVED***
              else if( module.is.active() ) {
                if(text.hover) {
                  module.verbose('Changing text to hover text', text.hover);
                  module.update.text(text.hover);
              ***REMOVED***
                else if(text.deactivate) {
                  module.verbose('Changing text to deactivating text', text.deactivate);
                  module.update.text(text.deactivate);
              ***REMOVED***
            ***REMOVED***
              else {
                if(text.hover) {
                  module.verbose('Changing text to hover text', text.hover);
                  module.update.text(text.hover);
              ***REMOVED***
                else if(text.activate){
                  module.verbose('Changing text to activating text', text.activate);
                  module.update.text(text.activate);
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***

 ***REMOVED*****REMOVED***

        activate: function() {
          if( settings.activateTest.call(element) ) {
            module.debug('Setting state to active');
            $module
              .addClass(className.active)
            ;
            module.update.text(text.active);
            settings.onActivate.call(element);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        deactivate: function() {
          if( settings.deactivateTest.call(element) ) {
            module.debug('Setting state to inactive');
            $module
              .removeClass(className.active)
            ;
            module.update.text(text.inactive);
            settings.onDeactivate.call(element);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        sync: function() {
          module.verbose('Syncing other buttons to current state');
          if( module.is.active() ) {
            $allModules
              .not($module)
                .state('activate');
        ***REMOVED***
          else {
            $allModules
              .not($module)
                .state('deactivate')
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        get: {
          text: function() {
            return (settings.selector.text)
              ? $module.find(settings.selector.text).text()
              : $module.html()
            ;
   ***REMOVED*****REMOVED***
          textFor: function(state) {
            return text[state] || false;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        flash: {
          text: function(text, duration, callback) {
            var
              previousText = module.get.text()
            ;
            module.debug('Flashing text message', text, duration);
            text     = text     || settings.text.flash;
            duration = duration || settings.flashDuration;
            callback = callback || function() {***REMOVED***;
            module.update.text(text);
            setTimeout(function(){
              module.update.text(previousText);
              callback.call(element);
***REMOVED*****REMOVED*****REMOVED*** duration);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        reset: {
          // on mouseout sets text to previous value
          text: function() {
            var
              activeText   = text.active   || $module.data(metadata.storedText),
              inactiveText = text.inactive || $module.data(metadata.storedText)
            ;
            if( module.is.textEnabled() ) {
              if( module.is.active() && activeText) {
                module.verbose('Resetting active text', activeText);
                module.update.text(activeText);
            ***REMOVED***
              else if(inactiveText) {
                module.verbose('Resetting inactive text', activeText);
                module.update.text(inactiveText);
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        update: {
          text: function(text) {
            var
              currentText = module.get.text()
            ;
            if(text && text !== currentText) {
              module.debug('Updating text', text);
              if(settings.selector.text) {
                $module
                  .data(metadata.storedText, text)
                  .find(settings.selector.text)
                    .text(text)
                ;
            ***REMOVED***
              else {
                $module
                  .data(metadata.storedText, text)
                  .html(text)
                ;
            ***REMOVED***
          ***REMOVED***
            else {
              module.debug('Text is already set, ignoring update', text);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        setting: function(name, value) {
          module.debug('Changing setting', name, value);
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            if($.isPlainObject(settings[name])) {
              $.extend(true, settings[name], value);
          ***REMOVED***
            else {
              settings[name] = value;
          ***REMOVED***
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                module.error(error.method, query);
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***
          if(Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***;

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
      ***REMOVED***
        module.invoke(query);
    ***REMOVED***
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
      ***REMOVED***
        module.initialize();
    ***REMOVED***
  ***REMOVED***)
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
***REMOVED***;

$.fn.state.settings = {

  // module info
  name           : 'State',

  // debug output
  debug          : false,

  // verbose debug output
  verbose        : false,

  // namespace for events
  namespace      : 'state',

  // debug data includes performance
  performance    : true,

  // callback occurs on state change
  onActivate     : function() {***REMOVED***,
  onDeactivate   : function() {***REMOVED***,
  onChange       : function() {***REMOVED***,

  // state test functions
  activateTest   : function() { return true; ***REMOVED***,
  deactivateTest : function() { return true; ***REMOVED***,

  // whether to automatically map default states
  automatic      : true,

  // activate / deactivate changes all elements instantiated at same time
  sync           : false,

  // default flash text duration, used for temporarily changing text of an element
  flashDuration  : 1000,

  // selector filter
  filter     : {
    text   : '.loading, .disabled',
    active : '.disabled'
***REMOVED***

  context    : false,

  // error
  error: {
    beforeSend : 'The before send function has cancelled state change',
    method     : 'The method you called is not defined.'
***REMOVED***

  // metadata
  metadata: {
    promise    : 'promise',
    storedText : 'stored-text'
***REMOVED***

  // change class on state
  className: {
    active   : 'active',
    disabled : 'disabled',
    error    : 'error',
    loading  : 'loading',
    success  : 'success',
    warning  : 'warning'
***REMOVED***

  selector: {
    // selector for text node
    text: false
***REMOVED***

  defaults : {
    input: {
      disabled : true,
      loading  : true,
      active   : true
  ***REMOVED***
    button: {
      disabled : true,
      loading  : true,
      active   : true,
  ***REMOVED***
    progress: {
      active   : true,
      success  : true,
      warning  : true,
      error    : true
  ***REMOVED***
***REMOVED***

  states     : {
    active   : true,
    disabled : true,
    error    : true,
    loading  : true,
    success  : true,
    warning  : true
***REMOVED***

  text     : {
    disabled   : false,
    flash      : false,
    hover      : false,
    active     : false,
    inactive   : false,
    activate   : false,
    deactivate : false
***REMOVED***

***REMOVED***;



***REMOVED***)( jQuery, window, document );

/*!
***REMOVED*** # Fomantic-UI - Visibility
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

;(function ($, window, document, undefined) {

***REMOVED***;

$.isFunction = $.isFunction || function(obj) {
  return typeof obj === "function" && typeof obj.nodeType !== "number";
***REMOVED***;

window = (typeof window != 'undefined' && window.Math == Math)
  ? window
  : (typeof self != 'undefined' && self.Math == Math)
    ? self
    : Function('return this')()
;

$.fn.visibility = function(parameters) {
  var
    $allModules    = $(this),
    moduleSelector = $allModules.selector || '',

    time           = new Date().getTime(),
    performance    = [],

    query          = arguments[0],
    methodInvoked  = (typeof query == 'string'),
    queryArguments = [].slice.call(arguments, 1),
    returnedValue,

    moduleCount    = $allModules.length,
    loadedCount    = 0
  ;

  $allModules
    .each(function() {
      var
        settings        = ( $.isPlainObject(parameters) )
          ? $.extend(true, {***REMOVED***, $.fn.visibility.settings, parameters)
          : $.extend({***REMOVED***, $.fn.visibility.settings),

        className       = settings.className,
        namespace       = settings.namespace,
        error           = settings.error,
        metadata        = settings.metadata,

        eventNamespace  = '.' + namespace,
        moduleNamespace = 'module-' + namespace,

        $window         = $(window),

        $module         = $(this),
        $context        = $(settings.context),

        $placeholder,

        instance        = $module.data(moduleNamespace),

        requestAnimationFrame = window.requestAnimationFrame
          || window.mozRequestAnimationFrame
          || window.webkitRequestAnimationFrame
          || window.msRequestAnimationFrame
          || function(callback) { setTimeout(callback, 0); ***REMOVED***,

        element         = this,
        disabled        = false,

        contextObserver,
        observer,
        module
      ;

      module = {

        initialize: function() {
          module.debug('Initializing', settings);

          module.setup.cache();

          if( module.should.trackChanges() ) {

            if(settings.type == 'image') {
              module.setup.image();
          ***REMOVED***
            if(settings.type == 'fixed') {
              module.setup.fixed();
          ***REMOVED***

            if(settings.observeChanges) {
              module.observeChanges();
          ***REMOVED***
            module.bind.events();
        ***REMOVED***

          module.save.position();
          if( !module.is.visible() ) {
            module.error(error.visible, $module);
        ***REMOVED***

          if(settings.initialCheck) {
            module.checkVisibility();
        ***REMOVED***
          module.instantiate();
 ***REMOVED*****REMOVED***

        instantiate: function() {
          module.debug('Storing instance', module);
          $module
            .data(moduleNamespace, module)
          ;
          instance = module;
 ***REMOVED*****REMOVED***

        destroy: function() {
          module.verbose('Destroying previous module');
          if(observer) {
            observer.disconnect();
        ***REMOVED***
          if(contextObserver) {
            contextObserver.disconnect();
        ***REMOVED***
          $window
            .off('load'   + eventNamespace, module.event.load)
            .off('resize' + eventNamespace, module.event.resize)
          ;
          $context
            .off('scroll'       + eventNamespace, module.event.scroll)
            .off('scrollchange' + eventNamespace, module.event.scrollchange)
          ;
          if(settings.type == 'fixed') {
            module.resetFixed();
            module.remove.placeholder();
        ***REMOVED***
          $module
            .off(eventNamespace)
            .removeData(moduleNamespace)
          ;
 ***REMOVED*****REMOVED***

        observeChanges: function() {
          if('MutationObserver' in window) {
            contextObserver = new MutationObserver(module.event.contextChanged);
            observer        = new MutationObserver(module.event.changed);
            contextObserver.observe(document, {
              childList : true,
              subtree   : true
          ***REMOVED***);
            observer.observe(element, {
              childList : true,
              subtree   : true
          ***REMOVED***);
            module.debug('Setting up mutation observer', observer);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        bind: {
          events: function() {
            module.verbose('Binding visibility events to scroll and resize');
            if(settings.refreshOnLoad) {
              $window
                .on('load'   + eventNamespace, module.event.load)
              ;
          ***REMOVED***
            $window
              .on('resize' + eventNamespace, module.event.resize)
            ;
            // pub/sub pattern
            $context
              .off('scroll'      + eventNamespace)
              .on('scroll'       + eventNamespace, module.event.scroll)
              .on('scrollchange' + eventNamespace, module.event.scrollchange)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        event: {
          changed: function(mutations) {
            module.verbose('DOM tree modified, updating visibility calculations');
            module.timer = setTimeout(function() {
              module.verbose('DOM tree modified, updating sticky menu');
              module.refresh();
***REMOVED*****REMOVED*****REMOVED*** 100);
   ***REMOVED*****REMOVED***
          contextChanged: function(mutations) {
            [].forEach.call(mutations, function(mutation) {
              if(mutation.removedNodes) {
                [].forEach.call(mutation.removedNodes, function(node) {
                  if(node == element || $(node).find(element).length > 0) {
                    module.debug('Element removed from DOM, tearing down events');
                    module.destroy();
                ***REMOVED***
              ***REMOVED***);
            ***REMOVED***
          ***REMOVED***);
   ***REMOVED*****REMOVED***
          resize: function() {
            module.debug('Window resized');
            if(settings.refreshOnResize) {
              requestAnimationFrame(module.refresh);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          load: function() {
            module.debug('Page finished loading');
            requestAnimationFrame(module.refresh);
   ***REMOVED*****REMOVED***
          // publishes scrollchange event on one scroll
          scroll: function() {
            if(settings.throttle) {
              clearTimeout(module.timer);
              module.timer = setTimeout(function() {
                $context.triggerHandler('scrollchange' + eventNamespace, [ $context.scrollTop() ]);
  ***REMOVED*****REMOVED*****REMOVED*** settings.throttle);
          ***REMOVED***
            else {
              requestAnimationFrame(function() {
                $context.triggerHandler('scrollchange' + eventNamespace, [ $context.scrollTop() ]);
            ***REMOVED***);
          ***REMOVED***
   ***REMOVED*****REMOVED***
          // subscribes to scrollchange
          scrollchange: function(event, scrollPosition) {
            module.checkVisibility(scrollPosition);
   ***REMOVED*****REMOVED***
 ***REMOVED*****REMOVED***

        precache: function(images, callback) {
          if (!(images instanceof Array)) {
            images = [images];
        ***REMOVED***
          var
            imagesLength  = images.length,
            loadedCounter = 0,
            cache         = [],
            cacheImage    = document.createElement('img'),
            handleLoad    = function() {
              loadedCounter++;
              if (loadedCounter >= images.length) {
                if ($.isFunction(callback)) {
                  callback();
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***
          ;
          while (imagesLength--) {
            cacheImage         = document.createElement('img');
            cacheImage.onload  = handleLoad;
            cacheImage.onerror = handleLoad;
            cacheImage.src     = images[imagesLength];
            cache.push(cacheImage);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        enableCallbacks: function() {
          module.debug('Allowing callbacks to occur');
          disabled = false;
 ***REMOVED*****REMOVED***

        disableCallbacks: function() {
          module.debug('Disabling all callbacks temporarily');
          disabled = true;
 ***REMOVED*****REMOVED***

        should: {
          trackChanges: function() {
            if(methodInvoked) {
              module.debug('One time query, no need to bind events');
              return false;
          ***REMOVED***
            module.debug('Callbacks being attached');
            return true;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        setup: {
          cache: function() {
            module.cache = {
              occurred : {***REMOVED***,
              screen   : {***REMOVED***,
              element  : {***REMOVED***,
          ***REMOVED***;
   ***REMOVED*****REMOVED***
          image: function() {
            var
              src = $module.data(metadata.src)
            ;
            if(src) {
              module.verbose('Lazy loading image', src);
              settings.once           = true;
              settings.observeChanges = false;

              // show when top visible
              settings.onOnScreen = function() {
                module.debug('Image on screen', element);
                module.precache(src, function() {
                  module.set.image(src, function() {
                    loadedCount++;
                    if(loadedCount == moduleCount) {
                      settings.onAllLoaded.call(this);
                  ***REMOVED***
                    settings.onLoad.call(this);
                ***REMOVED***);
              ***REMOVED***);
            ***REMOVED***;
          ***REMOVED***
   ***REMOVED*****REMOVED***
          fixed: function() {
            module.debug('Setting up fixed');
            settings.once           = false;
            settings.observeChanges = false;
            settings.initialCheck   = true;
            settings.refreshOnLoad  = true;
            if(!parameters.transition) {
              settings.transition = false;
          ***REMOVED***
            module.create.placeholder();
            module.debug('Added placeholder', $placeholder);
            settings.onTopPassed = function() {
              module.debug('Element passed, adding fixed position', $module);
              module.show.placeholder();
              module.set.fixed();
              if(settings.transition) {
                if($.fn.transition !== undefined) {
                  $module.transition(settings.transition, settings.duration);
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***;
            settings.onTopPassedReverse = function() {
              module.debug('Element returned to position, removing fixed', $module);
              module.hide.placeholder();
              module.remove.fixed();
          ***REMOVED***;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        create: {
          placeholder: function() {
            module.verbose('Creating fixed position placeholder');
            $placeholder = $module
              .clone(false)
              .css('display', 'none')
              .addClass(className.placeholder)
              .insertAfter($module)
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        show: {
          placeholder: function() {
            module.verbose('Showing placeholder');
            $placeholder
              .css('display', 'block')
              .css('visibility', 'hidden')
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***
        hide: {
          placeholder: function() {
            module.verbose('Hiding placeholder');
            $placeholder
              .css('display', 'none')
              .css('visibility', '')
            ;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        set: {
          fixed: function() {
            module.verbose('Setting element to fixed position');
            $module
              .addClass(className.fixed)
              .css({
                position : 'fixed',
                top      : settings.offset + 'px',
                left     : 'auto',
                zIndex   : settings.zIndex
            ***REMOVED***)
            ;
            settings.onFixed.call(element);
   ***REMOVED*****REMOVED***
          image: function(src, callback) {
            $module
              .attr('src', src)
            ;
            if(settings.transition) {
              if( $.fn.transition !== undefined) {
                if($module.hasClass(className.visible)) {
                  module.debug('Transition already occurred on this image, skipping animation');
                  return;
              ***REMOVED***
                $module.transition(settings.transition, settings.duration, callback);
            ***REMOVED***
              else {
                $module.fadeIn(settings.duration, callback);
            ***REMOVED***
          ***REMOVED***
            else {
              $module.show();
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        is: {
          onScreen: function() {
            var
              calculations   = module.get.elementCalculations()
            ;
            return calculations.onScreen;
   ***REMOVED*****REMOVED***
          offScreen: function() {
            var
              calculations   = module.get.elementCalculations()
            ;
            return calculations.offScreen;
   ***REMOVED*****REMOVED***
          visible: function() {
            if(module.cache && module.cache.element) {
              return !(module.cache.element.width === 0 && module.cache.element.offset.top === 0);
          ***REMOVED***
            return false;
   ***REMOVED*****REMOVED***
          verticallyScrollableContext: function() {
            var
              overflowY = ($context.get(0) !== window)
                ? $context.css('overflow-y')
                : false
            ;
            return (overflowY == 'auto' || overflowY == 'scroll');
   ***REMOVED*****REMOVED***
          horizontallyScrollableContext: function() {
            var
              overflowX = ($context.get(0) !== window)
                ? $context.css('overflow-x')
                : false
            ;
            return (overflowX == 'auto' || overflowX == 'scroll');
        ***REMOVED***
 ***REMOVED*****REMOVED***

        refresh: function() {
          module.debug('Refreshing constants (width/height)');
          if(settings.type == 'fixed') {
            module.resetFixed();
        ***REMOVED***
          module.reset();
          module.save.position();
          if(settings.checkOnRefresh) {
            module.checkVisibility();
        ***REMOVED***
          settings.onRefresh.call(element);
 ***REMOVED*****REMOVED***

        resetFixed: function () {
          module.remove.fixed();
          module.remove.occurred();
 ***REMOVED*****REMOVED***

        reset: function() {
          module.verbose('Resetting all cached values');
          if( $.isPlainObject(module.cache) ) {
            module.cache.screen = {***REMOVED***;
            module.cache.element = {***REMOVED***;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        checkVisibility: function(scroll) {
          module.verbose('Checking visibility of element', module.cache.element);

          if( !disabled && module.is.visible() ) {

            // save scroll position
            module.save.scroll(scroll);

            // update calculations derived from scroll
            module.save.calculations();

            // percentage
            module.passed();

            // reverse (must be first)
            module.passingReverse();
            module.topVisibleReverse();
            module.bottomVisibleReverse();
            module.topPassedReverse();
            module.bottomPassedReverse();

            // one time
            module.onScreen();
            module.offScreen();
            module.passing();
            module.topVisible();
            module.bottomVisible();
            module.topPassed();
            module.bottomPassed();

            // on update callback
            if(settings.onUpdate) {
              settings.onUpdate.call(element, module.get.elementCalculations());
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        passed: function(amount, newCallback) {
          var
            calculations   = module.get.elementCalculations()
          ;
          // assign callback
          if(amount && newCallback) {
            settings.onPassed[amount] = newCallback;
        ***REMOVED***
          else if(amount !== undefined) {
            return (module.get.pixelsPassed(amount) > calculations.pixelsPassed);
        ***REMOVED***
          else if(calculations.passing) {
            $.each(settings.onPassed, function(amount, callback) {
              if(calculations.bottomVisible || calculations.pixelsPassed > module.get.pixelsPassed(amount)) {
                module.execute(callback, amount);
            ***REMOVED***
              else if(!settings.once) {
                module.remove.occurred(callback);
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
 ***REMOVED*****REMOVED***

        onScreen: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onOnScreen,
            callbackName = 'onScreen'
          ;
          if(newCallback) {
            module.debug('Adding callback for onScreen', newCallback);
            settings.onOnScreen = newCallback;
        ***REMOVED***
          if(calculations.onScreen) {
            module.execute(callback, callbackName);
        ***REMOVED***
          else if(!settings.once) {
            module.remove.occurred(callbackName);
        ***REMOVED***
          if(newCallback !== undefined) {
            return calculations.onOnScreen;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        offScreen: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onOffScreen,
            callbackName = 'offScreen'
          ;
          if(newCallback) {
            module.debug('Adding callback for offScreen', newCallback);
            settings.onOffScreen = newCallback;
        ***REMOVED***
          if(calculations.offScreen) {
            module.execute(callback, callbackName);
        ***REMOVED***
          else if(!settings.once) {
            module.remove.occurred(callbackName);
        ***REMOVED***
          if(newCallback !== undefined) {
            return calculations.onOffScreen;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        passing: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onPassing,
            callbackName = 'passing'
          ;
          if(newCallback) {
            module.debug('Adding callback for passing', newCallback);
            settings.onPassing = newCallback;
        ***REMOVED***
          if(calculations.passing) {
            module.execute(callback, callbackName);
        ***REMOVED***
          else if(!settings.once) {
            module.remove.occurred(callbackName);
        ***REMOVED***
          if(newCallback !== undefined) {
            return calculations.passing;
        ***REMOVED***
 ***REMOVED*****REMOVED***


        topVisible: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onTopVisible,
            callbackName = 'topVisible'
          ;
          if(newCallback) {
            module.debug('Adding callback for top visible', newCallback);
            settings.onTopVisible = newCallback;
        ***REMOVED***
          if(calculations.topVisible) {
            module.execute(callback, callbackName);
        ***REMOVED***
          else if(!settings.once) {
            module.remove.occurred(callbackName);
        ***REMOVED***
          if(newCallback === undefined) {
            return calculations.topVisible;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        bottomVisible: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onBottomVisible,
            callbackName = 'bottomVisible'
          ;
          if(newCallback) {
            module.debug('Adding callback for bottom visible', newCallback);
            settings.onBottomVisible = newCallback;
        ***REMOVED***
          if(calculations.bottomVisible) {
            module.execute(callback, callbackName);
        ***REMOVED***
          else if(!settings.once) {
            module.remove.occurred(callbackName);
        ***REMOVED***
          if(newCallback === undefined) {
            return calculations.bottomVisible;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        topPassed: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onTopPassed,
            callbackName = 'topPassed'
          ;
          if(newCallback) {
            module.debug('Adding callback for top passed', newCallback);
            settings.onTopPassed = newCallback;
        ***REMOVED***
          if(calculations.topPassed) {
            module.execute(callback, callbackName);
        ***REMOVED***
          else if(!settings.once) {
            module.remove.occurred(callbackName);
        ***REMOVED***
          if(newCallback === undefined) {
            return calculations.topPassed;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        bottomPassed: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onBottomPassed,
            callbackName = 'bottomPassed'
          ;
          if(newCallback) {
            module.debug('Adding callback for bottom passed', newCallback);
            settings.onBottomPassed = newCallback;
        ***REMOVED***
          if(calculations.bottomPassed) {
            module.execute(callback, callbackName);
        ***REMOVED***
          else if(!settings.once) {
            module.remove.occurred(callbackName);
        ***REMOVED***
          if(newCallback === undefined) {
            return calculations.bottomPassed;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        passingReverse: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onPassingReverse,
            callbackName = 'passingReverse'
          ;
          if(newCallback) {
            module.debug('Adding callback for passing reverse', newCallback);
            settings.onPassingReverse = newCallback;
        ***REMOVED***
          if(!calculations.passing) {
            if(module.get.occurred('passing')) {
              module.execute(callback, callbackName);
          ***REMOVED***
        ***REMOVED***
          else if(!settings.once) {
            module.remove.occurred(callbackName);
        ***REMOVED***
          if(newCallback !== undefined) {
            return !calculations.passing;
        ***REMOVED***
 ***REMOVED*****REMOVED***


        topVisibleReverse: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onTopVisibleReverse,
            callbackName = 'topVisibleReverse'
          ;
          if(newCallback) {
            module.debug('Adding callback for top visible reverse', newCallback);
            settings.onTopVisibleReverse = newCallback;
        ***REMOVED***
          if(!calculations.topVisible) {
            if(module.get.occurred('topVisible')) {
              module.execute(callback, callbackName);
          ***REMOVED***
        ***REMOVED***
          else if(!settings.once) {
            module.remove.occurred(callbackName);
        ***REMOVED***
          if(newCallback === undefined) {
            return !calculations.topVisible;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        bottomVisibleReverse: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onBottomVisibleReverse,
            callbackName = 'bottomVisibleReverse'
          ;
          if(newCallback) {
            module.debug('Adding callback for bottom visible reverse', newCallback);
            settings.onBottomVisibleReverse = newCallback;
        ***REMOVED***
          if(!calculations.bottomVisible) {
            if(module.get.occurred('bottomVisible')) {
              module.execute(callback, callbackName);
          ***REMOVED***
        ***REMOVED***
          else if(!settings.once) {
            module.remove.occurred(callbackName);
        ***REMOVED***
          if(newCallback === undefined) {
            return !calculations.bottomVisible;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        topPassedReverse: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onTopPassedReverse,
            callbackName = 'topPassedReverse'
          ;
          if(newCallback) {
            module.debug('Adding callback for top passed reverse', newCallback);
            settings.onTopPassedReverse = newCallback;
        ***REMOVED***
          if(!calculations.topPassed) {
            if(module.get.occurred('topPassed')) {
              module.execute(callback, callbackName);
          ***REMOVED***
        ***REMOVED***
          else if(!settings.once) {
            module.remove.occurred(callbackName);
        ***REMOVED***
          if(newCallback === undefined) {
            return !calculations.onTopPassed;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        bottomPassedReverse: function(newCallback) {
          var
            calculations = module.get.elementCalculations(),
            callback     = newCallback || settings.onBottomPassedReverse,
            callbackName = 'bottomPassedReverse'
          ;
          if(newCallback) {
            module.debug('Adding callback for bottom passed reverse', newCallback);
            settings.onBottomPassedReverse = newCallback;
        ***REMOVED***
          if(!calculations.bottomPassed) {
            if(module.get.occurred('bottomPassed')) {
              module.execute(callback, callbackName);
          ***REMOVED***
        ***REMOVED***
          else if(!settings.once) {
            module.remove.occurred(callbackName);
        ***REMOVED***
          if(newCallback === undefined) {
            return !calculations.bottomPassed;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        execute: function(callback, callbackName) {
          var
            calculations = module.get.elementCalculations(),
            screen       = module.get.screenCalculations()
          ;
          callback = callback || false;
          if(callback) {
            if(settings.continuous) {
              module.debug('Callback being called continuously', callbackName, calculations);
              callback.call(element, calculations, screen);
          ***REMOVED***
            else if(!module.get.occurred(callbackName)) {
              module.debug('Conditions met', callbackName, calculations);
              callback.call(element, calculations, screen);
          ***REMOVED***
        ***REMOVED***
          module.save.occurred(callbackName);
 ***REMOVED*****REMOVED***

        remove: {
          fixed: function() {
            module.debug('Removing fixed position');
            $module
              .removeClass(className.fixed)
              .css({
                position : '',
                top      : '',
                left     : '',
                zIndex   : ''
            ***REMOVED***)
            ;
            settings.onUnfixed.call(element);
   ***REMOVED*****REMOVED***
          placeholder: function() {
            module.debug('Removing placeholder content');
            if($placeholder) {
              $placeholder.remove();
          ***REMOVED***
   ***REMOVED*****REMOVED***
          occurred: function(callback) {
            if(callback) {
              var
                occurred = module.cache.occurred
              ;
              if(occurred[callback] !== undefined && occurred[callback] === true) {
                module.debug('Callback can now be called again', callback);
                module.cache.occurred[callback] = false;
            ***REMOVED***
          ***REMOVED***
            else {
              module.cache.occurred = {***REMOVED***;
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***

        save: {
          calculations: function() {
            module.verbose('Saving all calculations necessary to determine positioning');
            module.save.direction();
            module.save.screenCalculations();
            module.save.elementCalculations();
   ***REMOVED*****REMOVED***
          occurred: function(callback) {
            if(callback) {
              if(module.cache.occurred[callback] === undefined || (module.cache.occurred[callback] !== true)) {
                module.verbose('Saving callback occurred', callback);
                module.cache.occurred[callback] = true;
            ***REMOVED***
          ***REMOVED***
   ***REMOVED*****REMOVED***
          scroll: function(scrollPosition) {
            scrollPosition      = scrollPosition + settings.offset || $context.scrollTop() + settings.offset;
            module.cache.scroll = scrollPosition;
   ***REMOVED*****REMOVED***
          direction: function() {
            var
              scroll     = module.get.scroll(),
              lastScroll = module.get.lastScroll(),
              direction
            ;
            if(scroll > lastScroll && lastScroll) {
              direction = 'down';
          ***REMOVED***
            else if(scroll < lastScroll && lastScroll) {
              direction = 'up';
          ***REMOVED***
            else {
              direction = 'static';
          ***REMOVED***
            module.cache.direction = direction;
            return module.cache.direction;
   ***REMOVED*****REMOVED***
          elementPosition: function() {
            var
              element = module.cache.element,
              screen  = module.get.screenSize()
            ;
            module.verbose('Saving element position');
            // (quicker than $.extend)
            element.fits          = (element.height < screen.height);
            element.offset        = $module.offset();
            element.width         = $module.outerWidth();
            element.height        = $module.outerHeight();
            // compensate for scroll in context
            if(module.is.verticallyScrollableContext()) {
              element.offset.top += $context.scrollTop() - $context.offset().top;
          ***REMOVED***
            if(module.is.horizontallyScrollableContext()) {
              element.offset.left += $context.scrollLeft - $context.offset().left;
          ***REMOVED***
            // store
            module.cache.element = element;
            return element;
   ***REMOVED*****REMOVED***
          elementCalculations: function() {
            var
              screen     = module.get.screenCalculations(),
              element    = module.get.elementPosition()
            ;
            // offset
            if(settings.includeMargin) {
              element.margin        = {***REMOVED***;
              element.margin.top    = parseInt($module.css('margin-top'), 10);
              element.margin.bottom = parseInt($module.css('margin-bottom'), 10);
              element.top    = element.offset.top - element.margin.top;
              element.bottom = element.offset.top + element.height + element.margin.bottom;
          ***REMOVED***
            else {
              element.top    = element.offset.top;
              element.bottom = element.offset.top + element.height;
          ***REMOVED***

            // visibility
            element.topPassed        = (screen.top >= element.top);
            element.bottomPassed     = (screen.top >= element.bottom);
            element.topVisible       = (screen.bottom >= element.top) && !element.topPassed;
            element.bottomVisible    = (screen.bottom >= element.bottom) && !element.bottomPassed;
            element.pixelsPassed     = 0;
            element.percentagePassed = 0;

            // meta calculations
            element.onScreen  = ((element.topVisible || element.passing) && !element.bottomPassed);
            element.passing   = (element.topPassed && !element.bottomPassed);
            element.offScreen = (!element.onScreen);

            // passing calculations
            if(element.passing) {
              element.pixelsPassed     = (screen.top - element.top);
              element.percentagePassed = (screen.top - element.top) / element.height;
          ***REMOVED***
            module.cache.element = element;
            module.verbose('Updated element calculations', element);
            return element;
   ***REMOVED*****REMOVED***
          screenCalculations: function() {
            var
              scroll = module.get.scroll()
            ;
            module.save.direction();
            module.cache.screen.top    = scroll;
            module.cache.screen.bottom = scroll + module.cache.screen.height;
            return module.cache.screen;
   ***REMOVED*****REMOVED***
          screenSize: function() {
            module.verbose('Saving window position');
            module.cache.screen = {
              height: $context.height()
          ***REMOVED***;
   ***REMOVED*****REMOVED***
          position: function() {
            module.save.screenSize();
            module.save.elementPosition();
        ***REMOVED***
 ***REMOVED*****REMOVED***

        get: {
          pixelsPassed: function(amount) {
            var
              element = module.get.elementCalculations()
            ;
            if(amount.search('%') > -1) {
              return ( element.height***REMOVED*** (parseInt(amount, 10) / 100) );
          ***REMOVED***
            return parseInt(amount, 10);
   ***REMOVED*****REMOVED***
          occurred: function(callback) {
            return (module.cache.occurred !== undefined)
              ? module.cache.occurred[callback] || false
              : false
            ;
   ***REMOVED*****REMOVED***
          direction: function() {
            if(module.cache.direction === undefined) {
              module.save.direction();
          ***REMOVED***
            return module.cache.direction;
   ***REMOVED*****REMOVED***
          elementPosition: function() {
            if(module.cache.element === undefined) {
              module.save.elementPosition();
          ***REMOVED***
            return module.cache.element;
   ***REMOVED*****REMOVED***
          elementCalculations: function() {
            if(module.cache.element === undefined) {
              module.save.elementCalculations();
          ***REMOVED***
            return module.cache.element;
   ***REMOVED*****REMOVED***
          screenCalculations: function() {
            if(module.cache.screen === undefined) {
              module.save.screenCalculations();
          ***REMOVED***
            return module.cache.screen;
   ***REMOVED*****REMOVED***
          screenSize: function() {
            if(module.cache.screen === undefined) {
              module.save.screenSize();
          ***REMOVED***
            return module.cache.screen;
   ***REMOVED*****REMOVED***
          scroll: function() {
            if(module.cache.scroll === undefined) {
              module.save.scroll();
          ***REMOVED***
            return module.cache.scroll;
   ***REMOVED*****REMOVED***
          lastScroll: function() {
            if(module.cache.screen === undefined) {
              module.debug('First scroll event, no last scroll could be found');
              return false;
          ***REMOVED***
            return module.cache.screen.top;
        ***REMOVED***
 ***REMOVED*****REMOVED***

        setting: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, settings, name);
        ***REMOVED***
          else if(value !== undefined) {
            settings[name] = value;
        ***REMOVED***
          else {
            return settings[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        internal: function(name, value) {
          if( $.isPlainObject(name) ) {
            $.extend(true, module, name);
        ***REMOVED***
          else if(value !== undefined) {
            module[name] = value;
        ***REMOVED***
          else {
            return module[name];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        debug: function() {
          if(!settings.silent && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.debug = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.debug.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        verbose: function() {
          if(!settings.silent && settings.verbose && settings.debug) {
            if(settings.performance) {
              module.performance.log(arguments);
          ***REMOVED***
            else {
              module.verbose = Function.prototype.bind.call(console.info, console, settings.name + ':');
              module.verbose.apply(console, arguments);
          ***REMOVED***
        ***REMOVED***
 ***REMOVED*****REMOVED***
        error: function() {
          if(!settings.silent) {
            module.error = Function.prototype.bind.call(console.error, console, settings.name + ':');
            module.error.apply(console, arguments);
        ***REMOVED***
 ***REMOVED*****REMOVED***
        performance: {
          log: function(message) {
            var
              currentTime,
              executionTime,
              previousTime
            ;
            if(settings.performance) {
              currentTime   = new Date().getTime();
              previousTime  = time || currentTime;
              executionTime = currentTime - previousTime;
              time          = currentTime;
              performance.push({
                'Name'           : message[0],
                'Arguments'      : [].slice.call(message, 1) || '',
                'Element'        : element,
                'Execution Time' : executionTime
            ***REMOVED***);
          ***REMOVED***
            clearTimeout(module.performance.timer);
            module.performance.timer = setTimeout(module.performance.display, 500);
   ***REMOVED*****REMOVED***
          display: function() {
            var
              title = settings.name + ':',
              totalTime = 0
            ;
            time = false;
            clearTimeout(module.performance.timer);
            $.each(performance, function(index, data) {
              totalTime += data['Execution Time'];
          ***REMOVED***);
            title += ' ' + totalTime + 'ms';
            if(moduleSelector) {
              title += ' \'' + moduleSelector + '\'';
          ***REMOVED***
            if( (console.group !== undefined || console.table !== undefined) && performance.length > 0) {
              console.groupCollapsed(title);
              if(console.table) {
                console.table(performance);
            ***REMOVED***
              else {
                $.each(performance, function(index, data) {
                  console.log(data['Name'] + ': ' + data['Execution Time']+'ms');
              ***REMOVED***);
            ***REMOVED***
              console.groupEnd();
          ***REMOVED***
            performance = [];
        ***REMOVED***
 ***REMOVED*****REMOVED***
        invoke: function(query, passedArguments, context) {
          var
            object = instance,
            maxDepth,
            found,
            response
          ;
          passedArguments = passedArguments || queryArguments;
          context         = element         || context;
          if(typeof query == 'string' && object !== undefined) {
            query    = query.split(/[\. ]/);
            maxDepth = query.length - 1;
            $.each(query, function(depth, value) {
              var camelCaseValue = (depth != maxDepth)
                ? value + query[depth + 1].charAt(0).toUpperCase() + query[depth + 1].slice(1)
                : query
              ;
              if( $.isPlainObject( object[camelCaseValue] ) && (depth != maxDepth) ) {
                object = object[camelCaseValue];
            ***REMOVED***
              else if( object[camelCaseValue] !== undefined ) {
                found = object[camelCaseValue];
                return false;
            ***REMOVED***
              else if( $.isPlainObject( object[value] ) && (depth != maxDepth) ) {
                object = object[value];
            ***REMOVED***
              else if( object[value] !== undefined ) {
                found = object[value];
                return false;
            ***REMOVED***
              else {
                module.error(error.method, query);
                return false;
            ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
          if ( $.isFunction( found ) ) {
            response = found.apply(context, passedArguments);
        ***REMOVED***
          else if(found !== undefined) {
            response = found;
        ***REMOVED***
          if(Array.isArray(returnedValue)) {
            returnedValue.push(response);
        ***REMOVED***
          else if(returnedValue !== undefined) {
            returnedValue = [returnedValue, response];
        ***REMOVED***
          else if(response !== undefined) {
            returnedValue = response;
        ***REMOVED***
          return found;
      ***REMOVED***
    ***REMOVED***;

      if(methodInvoked) {
        if(instance === undefined) {
          module.initialize();
      ***REMOVED***
        instance.save.scroll();
        instance.save.calculations();
        module.invoke(query);
    ***REMOVED***
      else {
        if(instance !== undefined) {
          instance.invoke('destroy');
      ***REMOVED***
        module.initialize();
    ***REMOVED***
  ***REMOVED***)
  ;

  return (returnedValue !== undefined)
    ? returnedValue
    : this
  ;
***REMOVED***;

$.fn.visibility.settings = {

  name                   : 'Visibility',
  namespace              : 'visibility',

  debug                  : false,
  verbose                : false,
  performance            : true,

  // whether to use mutation observers to follow changes
  observeChanges         : true,

  // check position immediately on init
  initialCheck           : true,

  // whether to refresh calculations after all page images load
  refreshOnLoad          : true,

  // whether to refresh calculations after page resize event
  refreshOnResize        : true,

  // should call callbacks on refresh event (resize, etc)
  checkOnRefresh         : true,

  // callback should only occur one time
  once                   : true,

  // callback should fire continuously whe evaluates to true
  continuous             : false,

  // offset to use with scroll top
  offset                 : 0,

  // whether to include margin in elements position
  includeMargin          : false,

  // scroll context for visibility checks
  context                : window,

  // visibility check delay in ms (defaults to animationFrame)
  throttle               : false,

  // special visibility type (image, fixed)
  type                   : false,

  // z-index to use with visibility 'fixed'
  zIndex                 : '10',

  // image only animation settings
  transition             : 'fade in',
  duration               : 1000,

  // array of callbacks for percentage
  onPassed               : {***REMOVED***,

  // standard callbacks
  onOnScreen             : false,
  onOffScreen            : false,
  onPassing              : false,
  onTopVisible           : false,
  onBottomVisible        : false,
  onTopPassed            : false,
  onBottomPassed         : false,

  // reverse callbacks
  onPassingReverse       : false,
  onTopVisibleReverse    : false,
  onBottomVisibleReverse : false,
  onTopPassedReverse     : false,
  onBottomPassedReverse  : false,

  // special callbacks for image
  onLoad                 : function() {***REMOVED***,
  onAllLoaded            : function() {***REMOVED***,

  // special callbacks for fixed position
  onFixed                : function() {***REMOVED***,
  onUnfixed              : function() {***REMOVED***,

  // utility callbacks
  onUpdate               : false, // disabled by default for performance
  onRefresh              : function(){***REMOVED***,

  metadata : {
    src: 'src'
***REMOVED***

  className: {
    fixed       : 'fixed',
    placeholder : 'constraint',
    visible     : 'visible'
***REMOVED***

  error : {
    method  : 'The method you called is not defined.',
    visible : 'Element is hidden, you must call refresh after element becomes visible'
***REMOVED***

***REMOVED***;

***REMOVED***)( jQuery, window, document );
