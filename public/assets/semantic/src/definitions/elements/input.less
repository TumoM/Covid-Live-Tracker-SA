/*!
***REMOVED*** # Fomantic-UI - Input
***REMOVED*** http://github.com/fomantic/Fomantic-UI/
***REMOVED***
***REMOVED***
***REMOVED*** Released under the MIT license
***REMOVED*** http://opensource.org/licenses/MIT
***REMOVED***
***REMOVED***/

***REMOVED********************************
            Theme
*******************************/

@type    : 'element';
@element : 'input';

@import (multiple) '../../theme.config';


***REMOVED********************************
           Standard
*******************************/


/*--------------------
        Inputs
---------------------*/

.ui.input {
  position: relative;
  font-weight: @normal;
  font-style: normal;
  display: inline-flex;
  color: @inputColor;
***REMOVED***
.ui.input > input {
  margin: 0;
  max-width: 100%;
  flex: 1 0 auto;
  outline: none;
  -webkit-tap-highlight-color: rgba(255, 255, 255, 0);
  text-align: @textAlign;
  line-height: @lineHeight;

  font-family: @inputFont;
  padding: @padding;

  background: @background;
  border: @border;
  color: @inputColor;
  border-radius: @borderRadius;
  transition: @transition;

  box-shadow: @boxShadow;
***REMOVED***


/*--------------------
      Placeholder
---------------------*/

/* browsers require these rules separate***REMOVED***/

.ui.input > input::-webkit-input-placeholder {
  color: @placeholderColor;
***REMOVED***
.ui.input > input::-moz-placeholder {
  color: @placeholderColor;
***REMOVED***
.ui.input > input:-ms-input-placeholder {
  color: @placeholderColor;
***REMOVED***


***REMOVED********************************
            States
*******************************/
& when (@variationInputDisabled) {
  /*--------------------
          Disabled
  ---------------------*/

  .ui.disabled.input,
  .ui.input:not(.disabled) input[disabled] {
    opacity: @disabledOpacity;
***REMOVED***

  .ui.disabled.input > input,
  .ui.input:not(.disabled) input[disabled] {
    pointer-events: none;
***REMOVED***
***REMOVED***

/*--------------------
        Active
---------------------*/

.ui.input > input:active,
.ui.input.down input {
  border-color: @downBorderColor;
  background: @downBackground;
  color: @downColor;
  box-shadow: @downBoxShadow;
***REMOVED***

& when (@variationInputLoading) {
  /*--------------------
         Loading
  ---------------------*/

  .ui.loading.loading.input > i.icon:before {
    position: absolute;
    content: '';
    top: 50%;
    left: 50%;

    margin: @loaderMargin;
    width: @loaderSize;
    height: @loaderSize;

    border-radius: @circularRadius;
    border: @loaderLineWidth solid @loaderFillColor;
***REMOVED***
  .ui.loading.loading.input > i.icon:after {
    position: absolute;
    content: '';
    top: 50%;
    left: 50%;

    margin: @loaderMargin;
    width: @loaderSize;
    height: @loaderSize;

    animation: loader @loaderSpeed infinite linear;

    border: @loaderLineWidth solid @loaderLineColor;
    border-radius: @circularRadius;

    box-shadow: 0 0 0 1px transparent;
***REMOVED***
***REMOVED***


/*--------------------
        Focus
---------------------*/

.ui.input.focus > input,
.ui.input > input:focus  {
  border-color: @focusBorderColor;
  background: @focusBackground;
  color: @focusColor;
  box-shadow: @focusBoxShadow;
***REMOVED***
.ui.input.focus > input::-webkit-input-placeholder,
.ui.input > input:focus::-webkit-input-placeholder {
  color: @placeholderFocusColor;
***REMOVED***
.ui.input.focus > input::-moz-placeholder,
.ui.input > input:focus::-moz-placeholder {
  color: @placeholderFocusColor;
***REMOVED***
.ui.input.focus > input:-ms-input-placeholder,
.ui.input > input:focus:-ms-input-placeholder {
  color: @placeholderFocusColor;
***REMOVED***


& when (@variationInputStates) {
  /*--------------------
          States
  ---------------------*/
  each(@formStates, {
    @state: replace(@key, '@', '');

    .ui.input.@{state***REMOVED*** > input {
      background-color: @formStates[@@state][background];
      border-color: @formStates[@@state][borderColor];
      color: @formStates[@@state][color];
      box-shadow: @formStates[@@state][boxShadow];
  ***REMOVED***

    /* Placeholder***REMOVED***/
    .ui.input.@{state***REMOVED*** > input::-webkit-input-placeholder {
      color: @formStates[@@state][inputPlaceholderColor];
  ***REMOVED***
    .ui.input.@{state***REMOVED*** > input::-moz-placeholder {
      color: @formStates[@@state][inputPlaceholderColor];
  ***REMOVED***
    .ui.input.@{state***REMOVED*** > input:-ms-input-placeholder {
      color: @formStates[@@state][inputPlaceholderColor] !important;
  ***REMOVED***

    /* Focused Placeholder***REMOVED***/
    .ui.input.@{state***REMOVED*** > input:focus::-webkit-input-placeholder {
      color: @formStates[@@state][inputPlaceholderFocusColor];
  ***REMOVED***
    .ui.input.@{state***REMOVED*** > input:focus::-moz-placeholder {
      color: @formStates[@@state][inputPlaceholderFocusColor];
  ***REMOVED***
    .ui.input.@{state***REMOVED*** > input:focus:-ms-input-placeholder {
      color: @formStates[@@state][inputPlaceholderFocusColor] !important;
  ***REMOVED***
***REMOVED***)
***REMOVED***
***REMOVED********************************
           Variations
*******************************/

& when (@variationInputTransparent) {
  /*--------------------
        Transparent
  ---------------------*/


  .ui.transparent.input > textarea,
  .ui.transparent.input > input {
    border-color: transparent !important;
    background-color: transparent !important;
    padding: 0;
    box-shadow: none !important;
    border-radius: 0 !important;
***REMOVED***
  .field .ui.transparent.input > textarea {
    padding: @padding;
***REMOVED***

  /* Transparent Icon***REMOVED***/
  :not(.field) > .ui.transparent.icon.input > i.icon {
    width: @transparentIconWidth;
***REMOVED***
  :not(.field) > .ui.ui.ui.transparent.icon.input > input {
    padding-left: 0;
    padding-right: @transparentIconMargin;
***REMOVED***
  :not(.field) > .ui.ui.ui.transparent[class*="left icon"].input > input {
    padding-left: @transparentIconMargin;
    padding-right: 0;
***REMOVED***
  & when (@variationInputInverted) {
    /* Transparent Inverted***REMOVED***/
    .ui.transparent.inverted.input {
      color: @transparentInvertedColor;
  ***REMOVED***
    .ui.ui.transparent.inverted.input > textarea,
    .ui.ui.transparent.inverted.input > input {
      color: inherit;
  ***REMOVED***

    .ui.transparent.inverted.input > input::-webkit-input-placeholder {
      color: @transparentInvertedPlaceholderColor;
  ***REMOVED***
    .ui.transparent.inverted.input > input::-moz-placeholder {
      color: @transparentInvertedPlaceholderColor;
  ***REMOVED***
    .ui.transparent.inverted.input > input:-ms-input-placeholder {
      color: @transparentInvertedPlaceholderColor;
  ***REMOVED***
***REMOVED***
***REMOVED***

& when (@variationInputIcon) {
  /*--------------------
           Icon
  ---------------------*/

  .ui.icon.input > i.icon {
    cursor: default;
    position: absolute;
    line-height: 1;
    text-align: center;
    top: 0;
    right: 0;
    margin: 0;
    height: 100%;

    width: @iconWidth;
    opacity: @iconOpacity;
    border-radius: 0 @borderRadius @borderRadius 0;
    transition: @iconTransition;
***REMOVED***
  .ui.icon.input > i.icon:not(.link) {
    pointer-events: none;
***REMOVED***
  .ui.ui.ui.ui.icon.input > textarea,
  .ui.ui.ui.ui.icon.input > input {
    padding-right: @iconMargin;
***REMOVED***

  .ui.icon.input > i.icon:before,
  .ui.icon.input > i.icon:after {
    left: 0;
    position: absolute;
    text-align: center;
    top: 50%;
    width: 100%;
    margin-top: @iconOffset;
***REMOVED***
  .ui.icon.input > i.link.icon {
    cursor: pointer;
***REMOVED***
  .ui.icon.input > i.circular.icon {
    top: @circularIconVerticalOffset;
    right: @circularIconHorizontalOffset;
***REMOVED***

  /* Left Icon Input***REMOVED***/
  .ui[class*="left icon"].input > i.icon {
    right: auto;
    left: @borderWidth;
    border-radius: @borderRadius 0 0 @borderRadius;
***REMOVED***
  .ui[class*="left icon"].input > i.circular.icon {
    right: auto;
    left: @circularIconHorizontalOffset;
***REMOVED***
  .ui.ui.ui.ui[class*="left icon"].input > textarea,
  .ui.ui.ui.ui[class*="left icon"].input > input {
    padding-left: @iconMargin;
    padding-right: @horizontalPadding;
***REMOVED***

  /* Focus***REMOVED***/
  .ui.icon.input > textarea:focus ~ i.icon,
  .ui.icon.input > input:focus ~ i.icon {
    opacity: 1;
***REMOVED***
***REMOVED***

& when (@variationInputLabeled) {
  /*--------------------
          Labeled
  ---------------------*/

  /* Adjacent Label***REMOVED***/
  .ui.labeled.input > .label {
    flex: 0 0 auto;
    margin: 0;
    font-size: @relativeMedium;
***REMOVED***
  .ui.labeled.input > .label:not(.corner) {
    padding-top: @verticalPadding;
    padding-bottom: @verticalPadding;
***REMOVED***

  /* Regular Label on Left***REMOVED***/
  .ui.labeled.input:not([class*="corner labeled"]) .label:first-child {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
***REMOVED***
  .ui.labeled.input:not([class*="corner labeled"]) .label:first-child + input {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
    border-left-color: transparent;
***REMOVED***
  .ui.labeled.input:not([class*="corner labeled"]) .label:first-child + input:focus {
    border-left-color: @focusBorderColor;
***REMOVED***

  /* Regular Label on Right***REMOVED***/
  .ui[class*="right labeled"].input > input {
    border-top-right-radius: 0 !important;
    border-bottom-right-radius: 0 !important;
    border-right-color: transparent !important;
***REMOVED***
  .ui[class*="right labeled"].input > input + .label {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
***REMOVED***

  .ui[class*="right labeled"].input > input:focus {
    border-right-color: @focusBorderColor !important;
***REMOVED***
***REMOVED***

& when (@variationInputCorner) {
  /* Corner Label***REMOVED***/
  .ui.labeled.input .corner.label {
    top: @labelCornerTop;
    right: @labelCornerRight;
    font-size: @labelCornerSize;
    border-radius: 0 @borderRadius 0 0;
***REMOVED***

  /* Spacing with corner label***REMOVED***/
  .ui[class*="corner labeled"]:not([class*="left corner labeled"]).labeled.input > textarea,
  .ui[class*="corner labeled"]:not([class*="left corner labeled"]).labeled.input > input {
    padding-right: @labeledMargin !important;
***REMOVED***
  .ui[class*="corner labeled"].icon.input:not([class*="left corner labeled"]) > textarea,
  .ui[class*="corner labeled"].icon.input:not([class*="left corner labeled"]) > input {
    padding-right: @labeledIconInputMargin !important;
***REMOVED***
  .ui[class*="corner labeled"].icon.input:not([class*="left corner labeled"]) > .icon {
    margin-right: @labeledIconMargin;
***REMOVED***

  /* Left Labeled***REMOVED***/
  .ui[class*="left corner labeled"].labeled.input > textarea,
  .ui[class*="left corner labeled"].labeled.input > input {
    padding-left: @labeledMargin !important;
***REMOVED***
  & when (@variationInputIcon) {
    .ui[class*="left corner labeled"].icon.input > textarea,
    .ui[class*="left corner labeled"].icon.input > input {
      padding-left: @labeledIconInputMargin !important;
  ***REMOVED***
    .ui[class*="left corner labeled"].icon.input > .icon {
      margin-left: @labeledIconMargin;
  ***REMOVED***
***REMOVED***
***REMOVED***
& when (@variationInputIcon) {
  .ui.icon.input > textarea ~ .icon {
    height: @textareaIconHeight;
***REMOVED***
  :not(.field) > .ui.transparent.icon.input > textarea ~ .icon {
    height: @transparentTextareaIconHeight;
***REMOVED***
***REMOVED***
& when (@variationInputCorner) {
  /* Corner Label Position ***REMOVED***/
  .ui.input > .ui.corner.label {
    top: @borderWidth;
    right: @borderWidth;
***REMOVED***
  .ui.input > .ui.left.corner.label {
    right: auto;
    left: @borderWidth;
***REMOVED***
***REMOVED***

& when (@variationInputLabeled)  or (@variationInputAction) {
  /* Labeled and action input states***REMOVED***/
  each(@formStates, {
    @state: replace(@key, '@', '');
    @borderColor: @formStates[@@state][borderColor];

    .ui.form > .field.@{state***REMOVED*** > .ui.action.input > .ui.button,
    .ui.form > .field.@{state***REMOVED*** > .ui.labeled.input:not([class*="corner labeled"]) > .ui.label,
    .ui.action.input.@{state***REMOVED*** > .ui.button,
    .ui.labeled.input.@{state***REMOVED***:not([class*="corner labeled"]) > .ui.label {
      border-top: @borderWidth solid @borderColor;
      border-bottom: @borderWidth solid @borderColor;
  ***REMOVED***
    .ui.form > .field.@{state***REMOVED*** > .ui.left.action.input > .ui.button,
    .ui.form > .field.@{state***REMOVED*** > .ui.labeled.input:not(.right):not([class*="corner labeled"]) > .ui.label,
    .ui.left.action.input.@{state***REMOVED*** > .ui.button,
    .ui.labeled.input.@{state***REMOVED***:not(.right):not([class*="corner labeled"]) > .ui.label {
      border-left: @borderWidth solid @borderColor;
  ***REMOVED***
    .ui.form > .field.@{state***REMOVED*** > .ui.action.input:not(.left) > input + .ui.button,
    .ui.form > .field.@{state***REMOVED*** > .ui.right.labeled.input:not([class*="corner labeled"]) > input + .ui.label,
    .ui.action.input.@{state***REMOVED***:not(.left) > input + .ui.button,
    .ui.right.labeled.input.@{state***REMOVED***:not([class*="corner labeled"]) > input + .ui.label {
      border-right: @borderWidth solid @borderColor;
  ***REMOVED***
    .ui.form > .field.@{state***REMOVED*** > .ui.right.labeled.input:not([class*="corner labeled"]) > .ui.label:first-child,
    .ui.right.labeled.input.@{state***REMOVED***:not([class*="corner labeled"]) > .ui.label:first-child {
      border-left: @borderWidth solid @borderColor;
  ***REMOVED***
***REMOVED***)
***REMOVED***

& when (@variationInputAction) {
  /*--------------------
          Action
  ---------------------*/

  .ui.action.input > .button,
  .ui.action.input > .buttons {
    display: flex;
    align-items: center;
    flex: 0 0 auto;
***REMOVED***
  .ui.action.input > .button,
  .ui.action.input > .buttons > .button {
    padding-top: @verticalPadding;
    padding-bottom: @verticalPadding;
    margin: 0;
***REMOVED***

  /* Input when ui Left*/
  .ui[class*="left action"].input > input {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
    border-left-color: transparent;
***REMOVED***

  /* Input when ui Right*/
  .ui.action.input:not([class*="left action"]) > input {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
    border-right-color: transparent;
***REMOVED***

  /* Button and Dropdown***REMOVED***/
  .ui.action.input > .dropdown:first-child,
  .ui.action.input > .button:first-child,
  .ui.action.input > .buttons:first-child > .button {
    border-radius: @borderRadius 0 0 @borderRadius;
***REMOVED***
  .ui.action.input > .dropdown:not(:first-child),
  .ui.action.input > .button:not(:first-child),
  .ui.action.input > .buttons:not(:first-child) > .button {
    border-radius: 0;
***REMOVED***
  .ui.action.input > .dropdown:last-child,
  .ui.action.input > .button:last-child,
  .ui.action.input > .buttons:last-child > .button {
    border-radius: 0 @borderRadius @borderRadius 0;
***REMOVED***

  /* Input Focus***REMOVED***/
  .ui.action.input:not([class*="left action"]) > input:focus {
    border-right-color: @focusBorderColor;
***REMOVED***

  .ui.ui[class*="left action"].input > input:focus {
    border-left-color: @focusBorderColor;
***REMOVED***
***REMOVED***

& when (@variationInputInverted) {
  /*--------------------
         Inverted
  ---------------------*/

  /* Standard***REMOVED***/
  .ui.inverted.input > input {
    border: none;
***REMOVED***
***REMOVED***

& when (@variationInputFluid) {
  /*--------------------
          Fluid
  ---------------------*/

  .ui.fluid.input {
    display: flex;
***REMOVED***
  .ui.fluid.input > input {
    width: 0 !important;
***REMOVED***
***REMOVED***

/*--------------------
        Size
---------------------*/

.ui.input {
  font-size: @relativeMedium;
***REMOVED***
& when not (@variationInputSizes = false) {
  each(@variationInputSizes, {
    @s: @{value***REMOVED***InputSize;
    .ui.@{value***REMOVED***.input {
      font-size: @@s;
  ***REMOVED***
***REMOVED***)
***REMOVED***

.loadUIOverrides();
